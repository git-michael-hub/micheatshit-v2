// app.routes.ts - Functional route definitions with guards in Angular 19
import { Routes } from '@angular/router';
import { DashboardComponent } from './dashboard/dashboard.component';
import { LoginComponent } from './login/login.component';
import { ProfileComponent } from './profile/profile.component';
import { AdminComponent } from './admin/admin.component';
import { UnauthorizedComponent } from './unauthorized/unauthorized.component';
import { authGuard, adminGuard } from './guards';
import { userResolver } from './resolvers';
import { confirmLeaveGuard } from './guards/confirm-leave.guard';

export const routes: Routes = [
  // Public routes
  { path: '', redirectTo: 'dashboard', pathMatch: 'full' },
  { path: 'login', component: LoginComponent },
  { path: 'unauthorized', component: UnauthorizedComponent },

  // Protected routes (require authentication)
  {
    path: 'dashboard',
    component: DashboardComponent,
    canActivate: [() => authGuard()]
  },

  // Profile route with resolver and deactivation guard
  {
    path: 'profile',
    component: ProfileComponent,
    canActivate: [() => authGuard()],
    canDeactivate: [() => confirmLeaveGuard()],
    resolve: { userData: () => userResolver() }
  },

  // Admin route with role-based protection
  {
    path: 'admin',
    component: AdminComponent,
    canActivate: [() => authGuard(), () => adminGuard()]
  },

  // Feature module with lazy loading
  {
    path: 'reports',
    loadChildren: () => import('./reports/reports.module').then(m => m.ReportsModule),
    canActivate: [() => authGuard()]
  },

  // Wildcard route for 404 handling
  { path: '**', redirectTo: 'dashboard' }
];

// main.ts - Providing router configuration
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { provideRouter, withComponentInputBinding } from '@angular/router';
import { routes } from './app/app.routes';

bootstrapApplication(AppComponent, {
  providers: [
    provideRouter(
      routes,
      withComponentInputBinding() // Enable route params as inputs
    )
  ]
}).catch(err => console.error(err));
