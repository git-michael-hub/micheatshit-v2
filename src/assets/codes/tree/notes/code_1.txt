// Example of Angular 19's enhanced static analysis for tree shaking
// Component before optimization
import { Component } from '@angular/core';
import * as _ from 'lodash'; // Importing entire lodash library

@Component({
  selector: 'app-inefficient',
  template: `<div>{{ formatDate(new Date()) }}</div>`
})
export class InefficientComponent {
  formatDate(date: Date): string {
    // Only using a single lodash function
    return _.format(date, 'YYYY-MM-DD');
  }
}

// Angular 19 static analysis would identify this issue

// Optimized version detected by Angular 19's enhanced static analysis
import { Component } from '@angular/core';
import { format } from 'lodash/format'; // Tree-shakable import

@Component({
  selector: 'app-efficient',
  template: `<div>{{ formatDate(new Date()) }}</div>`
})
export class EfficientComponent {
  formatDate(date: Date): string {
    return format(date, 'YYYY-MM-DD');
  }
}

// Bundle size impact:
// - Before optimization: ~70KB (full lodash)
// - After optimization: ~5KB (only the format function)
// - Reduction: ~93%
