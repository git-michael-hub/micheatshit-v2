import { Component, ElementRef, ViewChild, afterNextRender } from '@angular/core';

@Component({
  selector: 'app-responsive-layout',
  template: `
    <div class="container">
      <div #measuredElement class="measured-element">
        This element's dimensions will be measured after render
      </div>
      <div *ngIf="dimensions" class="dimensions-display">
        Width: {{ dimensions.width }}px, Height: {{ dimensions.height }}px
      </div>
    </div>
  `,
  styles: [`
    .container {
      width: 100%;
      padding: 20px;
    }
    .measured-element {
      padding: 16px;
      border: 1px solid #ddd;
      border-radius: 4px;
      background-color: #f8f9fa;
    }
    .dimensions-display {
      margin-top: 10px;
      font-size: 0.9em;
      color: #666;
    }
  `]
})
export class ResponsiveLayoutComponent {
  @ViewChild('measuredElement') element!: ElementRef;
  dimensions: { width: number; height: number } | null = null;

  constructor() {
    afterNextRender(() => {
      // Take measurements after the DOM is fully rendered
      this.measureElement();

      // Optionally set up a resize observer for responsive behavior
      this.setupResizeObserver();
    });
  }

  private measureElement(): void {
    if (this.element && this.element.nativeElement) {
      const el = this.element.nativeElement;
      this.dimensions = {
        width: el.offsetWidth,
        height: el.offsetHeight
      };
    }
  }

  private setupResizeObserver(): void {
    // Create a ResizeObserver to track size changes
    const resizeObserver = new ResizeObserver(entries => {
      for (const entry of entries) {
        if (entry.target === this.element.nativeElement) {
          // Update dimensions when the element resizes
          this.dimensions = {
            width: entry.contentRect.width,
            height: entry.contentRect.height
          };
        }
      }
    });

    // Start observing the element
    resizeObserver.observe(this.element.nativeElement);
  }

  ngOnDestroy(): void {
    // Clean up resources if needed
  }
}
