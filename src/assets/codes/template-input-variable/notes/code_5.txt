<!-- Type-safe template input variables -->

<!-- Traditional approach with explicit typing -->
<ul>
  <li *ngFor="let product of products;
              let i = index as number;
              let isFirst = first as boolean">
    {{ i + 1 }}. {{ product.name }} - ${{ product.price.toFixed(2) }}
    <span *ngIf="isFirst">FEATURED</span>
  </li>
</ul>

<!-- Angular 19 improved approach with @for -->
<ul>
  @for (product of products(); track product.id) {
    <!-- Type inference is improved in Angular 19 -->
    <li>
      {{ $index + 1 }}. {{ product.name }} - ${{ product.price.toFixed(2) }}
      @if ($first) {
        <span class="badge">FEATURED</span>
      }
    </li>
  }
</ul>

<!-- Type-safe ngTemplateOutlet -->
<ng-template #productTemplate
            let-product="product"
            let-index="index"
            let-isFeatured="isFeatured"
            let-formatter="formatter">
  <div class="product-card">
    <h3>{{ index + 1 }}. {{ product.name }}</h3>
    <p>Price: {{ formatter(product.price) }}</p>
    @if (isFeatured) {
      <span class="featured-badge">Featured Product</span>
    }
  </div>
</ng-template>

<!-- Usage with types -->
<ng-container
  [ngTemplateOutlet]="productTemplate"
  [ngTemplateOutletContext]="{
    product: featuredProduct,
    index: 0,
    isFeatured: true,
    formatter: currencyFormatter
  }">
</ng-container>

<!-- Component code -->
import { Component, signal } from '@angular/core';

interface Product {
  id: number;
  name: string;
  price: number;
  featured?: boolean;
}

@Component({
  selector: 'app-product-list',
  templateUrl: './product-list.component.html'
})
export class ProductListComponent {
  products = signal<Product[]>([
    { id: 1, name: 'Smartphone', price: 699.99, featured: true },
    { id: 2, name: 'Laptop', price: 1299.99 },
    { id: 3, name: 'Headphones', price: 149.99 }
  ]);

  featuredProduct = this.products()[0];

  currencyFormatter(price: number): string {
    return `$${price.toFixed(2)}`;
  }
}
