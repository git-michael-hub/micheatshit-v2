<div *ngIf="show">Hello, world!</div>

// Enable strict template type checking in tsconfig.json
{
  "angularCompilerOptions": {
    "strictTemplates": true,
    "strictInputTypes": true,
    "strictAttributeTypes": true,
    "strictOutputEventTypes": true,
    "strictDomEventTypes": true,
    "strictLiteralTypes": true,
    "strictNullInputTypes": true,
    "strictContextGenerics": true
  }
}

// Component with type-safe inputs and outputs
import { Component, Input, Output, EventEmitter } from '@angular/core';

interface UserData {
  id: number;
  name: string;
  role: 'admin' | 'user' | 'guest';
  profile: {
    email: string;
    verified: boolean;
  };
}

@Component({
  selector: 'app-user-card',
  template: `
    <!-- Type-safe property access -->
    <div class="user-card">
      <h3>{{ user.name }}</h3>
      <div [class]="user.role">Role: {{ user.role }}</div>
      <div>
        Email: {{ user.profile.email }}
        <span *ngIf="user.profile.verified">âœ“</span>
      </div>

      <!-- Type-safe event binding with correct event type -->
      <button (click)="handleAction($event, user.id)">
        Edit User
      </button>
    </div>
  `
})
export class UserCardComponent {
  // Strictly typed Input with non-nullable constraint
  @Input({ required: true }) user!: UserData;

  // Typed output event
  @Output() userAction = new EventEmitter<{userId: number, action: string}>();

  // Type-safe event handler with correct MouseEvent type
  handleAction(event: MouseEvent, userId: number): void {
    this.userAction.emit({
      userId,
      action: 'edit'
    });
  }
}
