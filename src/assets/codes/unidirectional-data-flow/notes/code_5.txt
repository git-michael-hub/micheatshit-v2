// todo-list.component.ts
import { Component } from '@angular/core';

interface Todo {
  id: number;
  text: string;
  completed: boolean;
}

@Component({
  selector: 'app-todo-list',
  template: `
    <div>
      <input #todoInput placeholder="Add todo">
      <button (click)="addTodo(todoInput.value); todoInput.value = ''">Add</button>

      <div *ngFor="let todo of todos">
        <app-todo-item
          [todo]="todo"
          (toggleComplete)="toggleComplete($event)"
          (delete)="deleteTodo($event)">
        </app-todo-item>
      </div>
    </div>
  `
})
export class TodoListComponent {
  todos: Todo[] = [];
  nextId = 1;

  addTodo(text: string) {
    if (text.trim()) {
      // Create a new array reference (immutability)
      this.todos = [
        ...this.todos,
        { id: this.nextId++, text, completed: false }
      ];
    }
  }

  toggleComplete(id: number) {
    this.todos = this.todos.map(todo =>
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    );
  }

  deleteTodo(id: number) {
    this.todos = this.todos.filter(todo => todo.id !== id);
  }
}

// todo-item.component.ts
import { Component, EventEmitter, Input, Output } from '@angular/core';

interface Todo {
  id: number;
  text: string;
  completed: boolean;
}

@Component({
  selector: 'app-todo-item',
  template: `
    <div>
      <input type="checkbox"
        [checked]="todo.completed"
        (change)="toggleComplete.emit(todo.id)">
      <span [style.text-decoration]="todo.completed ? 'line-through' : 'none'">
        {{ todo.text }}
      </span>
      <button (click)="delete.emit(todo.id)">Delete</button>
    </div>
  `
})
export class TodoItemComponent {
  @Input() todo!: Todo;
  @Output() toggleComplete = new EventEmitter<number>();
  @Output() delete = new EventEmitter<number>();
}
