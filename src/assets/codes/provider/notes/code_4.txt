// Root Application Providers in Angular 19
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter, withComponentInputBinding, withViewTransitions } from '@angular/router';
import { provideHttpClient, withFetch, withInterceptors } from '@angular/common/http';
import { provideAnimations } from '@angular/platform-browser/animations';
import { routes } from './app-routes';
import { authInterceptor } from './auth/auth.interceptor';
import { errorHandlerInterceptor } from './core/error-handler.interceptor';

// Import custom providers
import { provideAuth } from './auth/auth.provider';
import { provideAnalytics } from './analytics/analytics.provider';

// Define the application configuration
export const appConfig: ApplicationConfig = {
  providers: [
    // Router configuration with modern features
    provideRouter(
      routes,
      withComponentInputBinding(), // Enable route param binding to @Input() properties
      withViewTransitions()        // Enable view transitions API
    ),

    // Modern HTTP client with fetch and interceptors
    provideHttpClient(
      withFetch(),                 // Use fetch API instead of XMLHttpRequest
      withInterceptors([
        authInterceptor,           // Add auth tokens to requests
        errorHandlerInterceptor    // Handle API errors
      ])
    ),

    // Animation support
    provideAnimations(),

    // Enable zoneless change detection (new in Angular 19)
    provideZoneChangeDetection({
      eventCoalescing: true,       // Batch multiple events
      runCoalescing: true          // Batch change detection runs
    }),

    // Custom application services
    provideAuth({
      loginEndpoint: '/api/auth/login',
      tokenRefreshInterval: 5 * 60 * 1000 // 5 minutes
    }),

    provideAnalytics({
      trackPageViews: true,
      trackUserInteractions: true
    })
  ]
};

// In main.ts
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { appConfig } from './app/app.config';

bootstrapApplication(AppComponent, appConfig)
  .catch(err => console.error('Error bootstrapping application:', err));
