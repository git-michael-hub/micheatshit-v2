{"version":3,"file":"src_app_feature_angular_concepts_di_di_component_ts.js","mappings":"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","sources":["./src/app/feature/angular/concepts/di/di.component.ts","./src/app/feature/angular/concepts/di/di.component.html"],"sourcesContent":["import { Component, OnInit, ViewChild, TemplateRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HighlightModule } from 'ngx-highlightjs';\nimport { UnsubscribeService } from 'src/app/utils/services/unsubscribe.service';\n\n@Component({\n  selector: 'app-di',\n  standalone: true,\n  imports: [CommonModule, HighlightModule],\n  templateUrl: './di.component.html',\n  styleUrls: ['./di.component.scss']\n})\nexport class DiComponent extends UnsubscribeService implements OnInit {\n  @ViewChild('notesTemplate') notesTemplate!: TemplateRef<any>;\n  @ViewChild('bestPracticesTemplate') bestPracticesTemplate!: TemplateRef<any>;\n  @ViewChild('prosConsTemplate') prosConsTemplate!: TemplateRef<any>;\n  @ViewChild('relatedTopicsTemplate') relatedTopicsTemplate!: TemplateRef<any>;\n\n  activeTab = 'notes';\n\n  basicServiceCode = `@Injectable({\n  providedIn: 'root'\n})\nexport class LoggerService {\n  log(message: string): void {\n    console.log(\\`LOG: \\${message}\\`);\n  }\n}`;\n\n  componentInjectionCode = `@Component({\n  selector: 'app-example',\n  templateUrl: './example.component.html',\n  providers: [CounterService] // Provided at component level\n})\nexport class ExampleComponent {\n  constructor(private counterService: CounterService) { }\n}`;\n\n  provideInRootCode = `@Injectable({\n  providedIn: 'root' // Available application-wide as singleton\n})\nexport class UserService {\n  // Service implementation\n}`;\n\n  hierarchicalDICode = `@Component({\n  selector: 'app-parent',\n  template: \\`\n    <h2>Parent using: {{dataService.getValue()}}</h2>\n    <app-child></app-child>\n  \\`,\n  providers: [{ provide: DataService, useClass: ParentDataService }]\n})\nexport class ParentComponent {\n  constructor(public dataService: DataService) { }\n}`;\n\n  tokenInjectionCode = `// Define an injection token\nexport const API_URL = new InjectionToken<string>('api.url');\n\n// Provide a value for the token\n@NgModule({\n  providers: [\n    { provide: API_URL, useValue: 'https://api.example.com' }\n  ]\n})\n\n// Inject the token value\nconstructor(@Inject(API_URL) private apiUrl: string) { }`;\n\n  factoryProviderCode = `// Factory function\nexport function configFactory(config: ConfigService) {\n  return () => config.loadConfig();\n}\n\n@NgModule({\n  providers: [\n    ConfigService,\n    {\n      provide: APP_INITIALIZER,\n      useFactory: configFactory,\n      deps: [ConfigService],\n      multi: true\n    }\n  ]\n})`;\n\n  standaloneInjectionCode = `// In a standalone component\n@Component({\n  standalone: true,\n  providers: [\n    provideAnimations(),\n    ServiceA,\n    { provide: ServiceB, useClass: MockServiceB }\n  ]\n})\n\n// In main.ts for app-wide providers\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideRouter(routes),\n    provideHttpClient(),\n    { provide: ErrorHandler, useClass: CustomErrorHandler }\n  ]\n});`;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n  }\n\n  setActiveTab(tab: string): void {\n    this.activeTab = tab;\n  }\n}\n","<div class=\"container\">\n  <h1>Dependency Injection (DI)</h1>\n  <p>\n    Dependency Injection is a design pattern and mechanism in Angular that allows a class to receive its dependencies from an external source rather than creating them itself.\n  </p>\n\n  <div class=\"tab-navigation\">\n    <button [class.active]=\"activeTab === 'notes'\" (click)=\"setActiveTab('notes')\">Notes</button>\n    <button [class.active]=\"activeTab === 'bestPractices'\" (click)=\"setActiveTab('bestPractices')\">Best Practices</button>\n    <button [class.active]=\"activeTab === 'prosCons'\" (click)=\"setActiveTab('prosCons')\">Pros & Cons</button>\n    <button [class.active]=\"activeTab === 'relatedTopics'\" (click)=\"setActiveTab('relatedTopics')\">Related Topics</button>\n  </div>\n\n  <ng-container [ngSwitch]=\"activeTab\">\n    <ng-container *ngSwitchCase=\"'notes'\" [ngTemplateOutlet]=\"notesTemplate\"></ng-container>\n    <ng-container *ngSwitchCase=\"'bestPractices'\" [ngTemplateOutlet]=\"bestPracticesTemplate\"></ng-container>\n    <ng-container *ngSwitchCase=\"'prosCons'\" [ngTemplateOutlet]=\"prosConsTemplate\"></ng-container>\n    <ng-container *ngSwitchCase=\"'relatedTopics'\" [ngTemplateOutlet]=\"relatedTopicsTemplate\"></ng-container>\n  </ng-container>\n\n  <ng-template #notesTemplate>\n    <h2>Understanding Dependency Injection</h2>\n    <p>\n      Angular's DI system provides services or objects that a class needs without the class constructing them itself.\n      This promotes loose coupling, modularity, and testability.\n    </p>\n\n    <div class=\"di-diagram\">\n      <strong>The Angular DI System:</strong>\n      <ul>\n        <li>Providers: Instruct Angular how to create instances of dependencies</li>\n        <li>Injectors: Maintain a container of service instances</li>\n        <li>Dependencies: The services or objects that a class needs</li>\n      </ul>\n    </div>\n\n    <h3>Basic Service with DI</h3>\n    <div class=\"code-example\">\n      <pre><code [highlight]=\"basicServiceCode\" [languages]=\"['typescript']\"></code></pre>\n    </div>\n\n    <h3>Hierarchical Injectors</h3>\n    <p>\n      Angular has a hierarchical injection system with different levels where services can be provided:\n    </p>\n\n    <div class=\"di-level root\">\n      <strong>Root Injector:</strong> Application-wide singleton services\n      <div class=\"code-example\">\n        <pre><code [highlight]=\"provideInRootCode\" [languages]=\"['typescript']\"></code></pre>\n      </div>\n    </div>\n\n    <div class=\"di-level module\">\n      <strong>Module Injector:</strong> Services provided in a specific NgModule\n    </div>\n\n    <div class=\"di-level component\">\n      <strong>Component Injector:</strong> Services scoped to a component and its children\n      <div class=\"code-example\">\n        <pre><code [highlight]=\"componentInjectionCode\" [languages]=\"['typescript']\"></code></pre>\n      </div>\n    </div>\n\n    <h3>Provider Types</h3>\n    <ul>\n      <li><strong>Class Provider:</strong> Most common, provides an instance of a class</li>\n      <li><strong>Value Provider:</strong> Provides a pre-defined object</li>\n      <li><strong>Factory Provider:</strong> Provides a factory function to create an instance</li>\n      <li><strong>Existing Provider:</strong> Maps one token to another</li>\n    </ul>\n\n    <div class=\"code-example\">\n      <h4>Factory Provider Example</h4>\n      <pre><code [highlight]=\"factoryProviderCode\" [languages]=\"['typescript']\"></code></pre>\n    </div>\n\n    <h3>Injection Tokens</h3>\n    <p>\n      Used when you want to inject something that isn't a class, like strings, numbers, or objects:\n    </p>\n    <div class=\"code-example\">\n      <pre><code [highlight]=\"tokenInjectionCode\" [languages]=\"['typescript']\"></code></pre>\n    </div>\n\n    <h3>DI in Standalone Components</h3>\n    <p>\n      With Angular's standalone components, DI works without modules:\n    </p>\n    <div class=\"code-example\">\n      <pre><code [highlight]=\"standaloneInjectionCode\" [languages]=\"['typescript']\"></code></pre>\n    </div>\n  </ng-template>\n\n  <ng-template #bestPracticesTemplate>\n    <h2>Dependency Injection Best Practices</h2>\n\n    <h3>Service Design</h3>\n    <ul>\n      <li><strong>Single Responsibility:</strong> Create services that focus on a single concern</li>\n      <li><strong>Reusability:</strong> Design services to be reusable across components</li>\n      <li><strong>Service Composition:</strong> Inject services into other services when needed</li>\n      <li><strong>Stateful vs. Stateless:</strong> Be intentional about state management in services</li>\n    </ul>\n\n    <h3>Injection Scope</h3>\n    <ul>\n      <li><strong>Use providedIn: 'root'</strong> for application-wide singleton services</li>\n      <li><strong>Provide at component level</strong> when the service should be scoped to a component and its children</li>\n      <li><strong>Consider lazy modules</strong> for feature-specific services that should be loaded on demand</li>\n    </ul>\n\n    <h3>Testing with DI</h3>\n    <ul>\n      <li>Use TestBed to configure testing modules with mock dependencies</li>\n      <li>Leverage Angular's testing utilities like SpyOn for service method mocking</li>\n      <li>Create test doubles (mocks, stubs) for services to isolate components during testing</li>\n    </ul>\n\n    <h3>Performance Considerations</h3>\n    <ul>\n      <li>Avoid creating services with heavy initialization in the constructor</li>\n      <li>Use lazy loading to defer service initialization when possible</li>\n      <li>Consider using factory providers for complex service creation logic</li>\n    </ul>\n\n    <h3>Migration to Angular v19 DI</h3>\n    <ul>\n      <li>Prefer standalone components with their own providers</li>\n      <li>Use functional providers (provideHttpClient, provideRouter, etc.)</li>\n      <li>Migrate from NgModules to standalone APIs</li>\n      <li>Leverage environment injectors for better control over provider scope</li>\n    </ul>\n  </ng-template>\n\n  <ng-template #prosConsTemplate>\n    <h2>Pros and Cons of Dependency Injection</h2>\n\n    <h3>Advantages</h3>\n    <ul>\n      <li><strong>Loose Coupling:</strong> Components don't need to know how their dependencies are created</li>\n      <li><strong>Testability:</strong> Easy to provide mock implementations for testing</li>\n      <li><strong>Maintainability:</strong> Dependencies can be swapped without changing consumer code</li>\n      <li><strong>Reusability:</strong> Services can be reused across different parts of the application</li>\n      <li><strong>Singleton Management:</strong> Easy to control the lifecycle and scope of services</li>\n    </ul>\n\n    <h3>Challenges</h3>\n    <ul>\n      <li><strong>Learning Curve:</strong> Understanding hierarchical injection can be complex for beginners</li>\n      <li><strong>Debugging:</strong> Errors related to missing providers can be hard to track</li>\n      <li><strong>Potential Memory Leaks:</strong> Long-lived services need careful management of subscriptions</li>\n      <li><strong>Overuse:</strong> Creating too many small services can lead to fragmentation</li>\n    </ul>\n\n    <h3>Comparison: Angular DI vs Manual Dependency Creation</h3>\n    <table class=\"comparison-table\">\n      <tr>\n        <th>Aspect</th>\n        <th>Angular DI</th>\n        <th>Manual Creation</th>\n      </tr>\n      <tr>\n        <td>Code Complexity</td>\n        <td>Lower - Angular handles instantiation</td>\n        <td>Higher - Need to manage object creation</td>\n      </tr>\n      <tr>\n        <td>Testability</td>\n        <td>Better - Easy to substitute dependencies</td>\n        <td>Worse - Hard-coded dependencies</td>\n      </tr>\n      <tr>\n        <td>Flexibility</td>\n        <td>Higher - Can change implementations without changing consumers</td>\n        <td>Lower - Tightly coupled to specific implementations</td>\n      </tr>\n      <tr>\n        <td>Performance</td>\n        <td>Slight overhead for the DI system</td>\n        <td>Direct instantiation can be faster</td>\n      </tr>\n      <tr>\n        <td>Maintainability</td>\n        <td>Better for large applications</td>\n        <td>Simpler for very small applications</td>\n      </tr>\n    </table>\n  </ng-template>\n\n  <ng-template #relatedTopicsTemplate>\n    <h2>Related Topics</h2>\n\n    <h3>Angular Core Concepts</h3>\n    <ul>\n      <li><strong>Services:</strong> Classes with a specific purpose that can be injected</li>\n      <li><strong>Providers:</strong> Instructions for DI on how to create a dependency</li>\n      <li><strong>Injectors:</strong> The service locator responsible for retrieving dependencies</li>\n      <li><strong>ModuleInjector & ElementInjector:</strong> The two injector hierarchies in Angular</li>\n    </ul>\n\n    <h3>Advanced DI Features</h3>\n    <ul>\n      <li><strong>Multi Providers:</strong> Inject an array of values for a single token</li>\n      <li><strong>Forward References:</strong> Reference a dependency that's defined later in the code</li>\n      <li><strong>Circular Dependencies:</strong> Handling dependencies that depend on each other</li>\n      <li><strong>Optional Dependencies:</strong> Components can function without certain dependencies</li>\n    </ul>\n\n    <h3>DI for Specific Scenarios</h3>\n    <ul>\n      <li><strong>HTTP Services:</strong> Using HttpClient with DI for API communication</li>\n      <li><strong>State Management:</strong> Using services for application state</li>\n      <li><strong>Route Guards:</strong> Protecting routes using injectable services</li>\n      <li><strong>Interceptors:</strong> Processing HTTP requests/responses using DI</li>\n    </ul>\n\n    <h3>Angular v19 Enhancements</h3>\n    <ul>\n      <li><strong>Functional Providers:</strong> New provider functions for better type safety</li>\n      <li><strong>Environment Injectors:</strong> Creating injectors outside of components</li>\n      <li><strong>Runnable Injector:</strong> Application-wide injector available before bootstrap</li>\n      <li><strong>Injection Context:</strong> More control over where dependencies are retrieved from</li>\n      <li><strong>Signal-based Injection:</strong> Better integration with Angular's reactivity system</li>\n    </ul>\n  </ng-template>\n</div>\n"],"names":["CommonModule","HighlightModule","UnsubscribeService","i0","DiComponent","constructor","ngOnInit","setActiveTab","tab","activeTab","selectors","viewQuery","ctx","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}