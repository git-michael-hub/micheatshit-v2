{"version":3,"file":"src_app_feature_angular_concepts_class-field-decorator_class-field-decorator_component_ts.js","mappings":"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","sources":["./src/app/feature/angular/concepts/class-field-decorator/class-field-decorator.component.ts","./src/app/feature/angular/concepts/class-field-decorator/class-field-decorator.component.html"],"sourcesContent":["import { ChangeDetectionStrategy, Component, ViewChild, ElementRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HighlightModule } from 'ngx-highlightjs';\nimport { UnsubscribeService } from 'src/app/utils/services/unsubscribe.service';\n\n@Component({\n  selector: 'app-class-field-decorator',\n  standalone: true,\n  imports: [CommonModule, HighlightModule],\n  templateUrl: './class-field-decorator.component.html',\n  styleUrls: ['./class-field-decorator.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ClassFieldDecoratorComponent extends UnsubscribeService {\n\n  selectedTab = 1;\n\n  @ViewChild('inputCodeEl') inputCodeEl?: ElementRef;\n  @ViewChild('outputCodeEl') outputCodeEl?: ElementRef;\n  @ViewChild('viewChildCodeEl') viewChildCodeEl?: ElementRef;\n  @ViewChild('hostBindingCodeEl') hostBindingCodeEl?: ElementRef;\n  @ViewChild('signalInputCodeEl') signalInputCodeEl?: ElementRef;\n\n  // Code examples\n  inputCode = `// Traditional @Input decorator\n@Component({\n  selector: 'app-user-profile',\n  template: \\`\n    <div class=\"user-card\">\n      <h2>{{ name }}</h2>\n      <div>Age: {{ age }}</div>\n    </div>\n  \\`\n})\nexport class UserProfileComponent {\n  @Input() name: string = '';\n\n  // Input with alias\n  @Input('userAge') age: number = 0;\n\n  // Required input (Angular 14+)\n  @Input({ required: true }) userId!: string;\n\n  // Transformed input (Angular 16+)\n  @Input({ transform: (value: string) => value.toUpperCase() })\n  description: string = '';\n}`;\n\n  outputCode = `@Component({\n  selector: 'app-counter',\n  template: \\`\n    <div>\n      <h2>Count: {{ count }}</h2>\n      <button (click)=\"increment()\">Increment</button>\n      <button (click)=\"reset()\">Reset</button>\n    </div>\n  \\`\n})\nexport class CounterComponent {\n  count = 0;\n\n  // Basic output\n  @Output() countChanged = new EventEmitter<number>();\n\n  // Output with alias\n  @Output('resetEvent') resetTriggered = new EventEmitter<void>();\n\n  increment() {\n    this.count++;\n    this.countChanged.emit(this.count);\n  }\n\n  reset() {\n    this.count = 0;\n    this.resetTriggered.emit();\n    this.countChanged.emit(this.count);\n  }\n}`;\n\n  viewChildCode = `@Component({\n  selector: 'app-tabbed-panel',\n  template: \\`\n    <div>\n      <div #tabHeader class=\"tab-header\">\n        <button *ngFor=\"let tab of tabs\" (click)=\"selectTab(tab)\">\n          {{ tab.title }}\n        </button>\n      </div>\n      <div class=\"tab-content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  \\`\n})\nexport class TabbedPanelComponent implements AfterViewInit {\n  // Reference to a single element\n  @ViewChild('tabHeader') tabHeader!: ElementRef;\n\n  // Reference to a component\n  @ViewChild(TabComponent) activeTab?: TabComponent;\n\n  // Reference to a directive with specific read option\n  @ViewChild('tabHeader', { read: ViewContainerRef })\n  headerContainer!: ViewContainerRef;\n\n  // Multiple elements with ViewChildren\n  @ViewChildren(TabComponent) allTabs!: QueryList<TabComponent>;\n\n  // Static option for immediate availability\n  @ViewChild('staticContent', { static: true })\n  staticContent!: ElementRef;\n\n  ngAfterViewInit() {\n    console.log('Tab header element:', this.tabHeader.nativeElement);\n    this.allTabs.forEach(tab => console.log('Tab:', tab.title));\n  }\n}`;\n\n  hostBindingCode = `@Directive({\n  selector: '[appHighlight]',\n  standalone: true\n})\nexport class HighlightDirective {\n  // Color for the highlight, defaults to yellow\n  @Input() highlightColor = 'yellow';\n\n  // Bind to the style.backgroundColor property of the host element\n  @HostBinding('style.backgroundColor') backgroundColor: string = '';\n\n  // Bind to the class.active property of the host element\n  @HostBinding('class.active') isActive = false;\n\n  // Bind to the attr.aria-label property\n  @HostBinding('attr.aria-label') ariaLabel = 'Highlighted element';\n\n  // Listen for mouseenter event and apply highlighting\n  @HostListener('mouseenter')\n  onMouseEnter() {\n    this.backgroundColor = this.highlightColor;\n    this.isActive = true;\n  }\n\n  // Listen for mouseleave event and remove highlighting\n  @HostListener('mouseleave')\n  onMouseLeave() {\n    this.backgroundColor = '';\n    this.isActive = false;\n  }\n}`;\n\n  signalInputCode = `// Modern signal-based inputs (Angular 19)\n@Component({\n  selector: 'app-product-card',\n  template: \\`\n    <div class=\"product\">\n      <h2>{{ name() }}</h2>\n      <div>Price: {{ price() | currency }}</div>\n      <div *ngIf=\"isOnSale()\">ON SALE!</div>\n      <button [disabled]=\"!inStock()\" (click)=\"addToCart()\">\n        {{ inStock() ? 'Add to Cart' : 'Out of Stock' }}\n      </button>\n    </div>\n  \\`\n})\nexport class ProductCardComponent {\n  // Basic input signal\n  name = input<string>('');\n\n  // Input signal with transform function\n  price = input<number>(0, {\n    transform: (value: number) => Math.max(0, value)\n  });\n\n  // Required input signal\n  id = input.required<string>();\n\n  // Input signal with default value\n  inStock = input<boolean>(true);\n\n  // Model input (two-way bindable)\n  quantity = model<number>(1);\n\n  // Computed value based on input signals\n  isOnSale = computed(() => {\n    return this.price() < 50;\n  });\n\n  // Output signal\n  addedToCart = output<{id: string, quantity: number}>();\n\n  addToCart() {\n    if (this.inStock()) {\n      this.addedToCart.emit({\n        id: this.id(),\n        quantity: this.quantity()\n      });\n    }\n  }\n}`;\n\n  ngOnInit() {\n    // Any initialization code if needed\n  }\n}\n","<section class=\"p-4 text-sm\">\n  <p class=\"heading-1 mb-2\">\n    Class Field Decorators in Angular\n  </p>\n\n  <div class=\"text-content\">\n    <p>\n      <span class=\"text-zinc-50 tw-font-medium\">Class Field Decorators</span>\n      in Angular 19 are TypeScript decorators that add metadata to class properties and methods. These decorators enable Angular to understand how properties interact with components, templates, and the DOM, providing essential functionality like property binding, event handling, and DOM access.\n    </p>\n\n    <br>\n\n    <div class=\"flex flex-col\">\n      <div class=\"flex border-b border-gray-200\">\n        <button (click)=\"selectedTab = 1\" [class.text-rose-300]=\"selectedTab===1\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Notes\n        </button>\n        <button (click)=\"selectedTab = 2\" [class.text-rose-300]=\"selectedTab===2\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Best Practices\n        </button>\n        <button (click)=\"selectedTab = 3\" [class.text-rose-300]=\"selectedTab===3\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Pros and Cons\n        </button>\n        <button (click)=\"selectedTab = 4\" [class.text-rose-300]=\"selectedTab===4\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Related Topics\n        </button>\n      </div>\n      <div class=\"p-4\">\n        <div *ngIf=\"selectedTab === 1\">\n          <!-- Notes Tab -->\n          <p>Core Angular Class Field Decorators</p>\n          <ul class=\"list-disc pl-4 text-sm\">\n            <li>\n              <strong>&#64;Input()</strong>:\n              Declares a property that can receive data from a parent component.\n              <ul class=\"list-disc pl-4\">\n                <li>Enables component property binding</li>\n                <li>Can include aliases, required flag, and transform functions</li>\n                <li>Angular 19 introduces more robust typing and validation</li>\n                <button (click)=\"inputCodeEl.hidden = !inputCodeEl.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n                <span #inputCodeEl hidden copyToClipboard>\n                  <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n                    <span>typescript</span>\n                    <span class=\"copy-button-wrapper bg-gray-700\"></span>\n                  </div>\n                  <pre>\n                    <code [highlight]=\"inputCode\" [languages]=\"['typescript']\"></code>\n                  </pre>\n                </span>\n              </ul>\n            </li>\n            <li>\n              <strong>&#64;Output()</strong>:\n              Declares an event emitter property that a component can use to emit events.\n              <ul class=\"list-disc pl-4\">\n                <li>Uses EventEmitter to emit custom events to parent components</li>\n                <li>Can specify alias for clearer template binding</li>\n                <li>Facilitates component communication</li>\n                <button (click)=\"outputCodeEl.hidden = !outputCodeEl.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n                <span #outputCodeEl hidden copyToClipboard>\n                  <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n                    <span>typescript</span>\n                    <span class=\"copy-button-wrapper bg-gray-700\"></span>\n                  </div>\n                  <pre>\n                    <code [highlight]=\"outputCode\" [languages]=\"['typescript']\"></code>\n                  </pre>\n                </span>\n              </ul>\n            </li>\n            <li>\n              <strong>&#64;ViewChild() / &#64;ViewChildren()</strong>:\n              Provides access to child elements, components, or directives in templates.\n              <ul class=\"list-disc pl-4\">\n                <li>Queries the DOM for elements matching a selector</li>\n                <li>Can target template reference variables, component types, or directives</li>\n                <li>Supports static query option for early access in ngOnInit</li>\n                <button (click)=\"viewChildCodeEl.hidden = !viewChildCodeEl.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n                <span #viewChildCodeEl hidden copyToClipboard>\n                  <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n                    <span>typescript</span>\n                    <span class=\"copy-button-wrapper bg-gray-700\"></span>\n                  </div>\n                  <pre>\n                    <code [highlight]=\"viewChildCode\" [languages]=\"['typescript']\"></code>\n                  </pre>\n                </span>\n              </ul>\n            </li>\n            <li>\n              <strong>&#64;HostBinding() / &#64;HostListener()</strong>:\n              Binds properties and events of the host element.\n              <ul class=\"list-disc pl-4\">\n                <li>&#64;HostBinding binds to properties, attributes, or classes of the host element</li>\n                <li>&#64;HostListener subscribes to events on the host element</li>\n                <li>Useful for directive implementation</li>\n                <button (click)=\"hostBindingCodeEl.hidden = !hostBindingCodeEl.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n                <span #hostBindingCodeEl hidden copyToClipboard>\n                  <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n                    <span>typescript</span>\n                    <span class=\"copy-button-wrapper bg-gray-700\"></span>\n                  </div>\n                  <pre>\n                    <code [highlight]=\"hostBindingCode\" [languages]=\"['typescript']\"></code>\n                  </pre>\n                </span>\n              </ul>\n            </li>\n          </ul>\n\n          <br>\n          <br>\n\n          <p>Angular 19 Signal-Based Alternatives</p>\n          <ul class=\"list-disc pl-4 text-sm\">\n            <li>\n              <strong>Signal-Based Inputs and Outputs</strong>:\n              <ul class=\"list-disc pl-4\">\n                <li>input() function replaces &#64;Input() decorator</li>\n                <li>output() function replaces &#64;Output() decorator</li>\n                <li>model() function provides two-way binding capability</li>\n                <li>Improved type safety and runtime validation</li>\n                <li>Better tree-shaking and performance optimization</li>\n                <button (click)=\"signalInputCodeEl.hidden = !signalInputCodeEl.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n                <span #signalInputCodeEl hidden copyToClipboard>\n                  <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n                    <span>typescript</span>\n                    <span class=\"copy-button-wrapper bg-gray-700\"></span>\n                  </div>\n                  <pre>\n                    <code [highlight]=\"signalInputCode\" [languages]=\"['typescript']\"></code>\n                  </pre>\n                </span>\n              </ul>\n            </li>\n            <li>\n              <strong>Key Advantages of Signal-Based APIs</strong>:\n              <ul class=\"list-disc pl-4\">\n                <li>Improved reactivity with direct signal integration</li>\n                <li>Enhanced type checking with generics</li>\n                <li>More intuitive API for transform functions</li>\n                <li>Simpler syntax for declaring required inputs</li>\n                <li>Better performance through optimization</li>\n              </ul>\n            </li>\n          </ul>\n\n          <br>\n          <br>\n\n          <p>Other Important Class Field Decorators</p>\n          <table class=\"w-full border-collapse rounded-lg overflow-hidden shadow-md\">\n            <thead>\n              <tr class=\"bg-gray-800 text-gray-100\">\n                <th class=\"py-3 px-4 text-left\">Decorator</th>\n                <th class=\"py-3 px-4 text-left\">Purpose</th>\n                <th class=\"py-3 px-4 text-left\">Angular 19 Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr class=\"border-b border-gray-700 bg-gray-900 hover:bg-gray-800 transition-colors\">\n                <td class=\"py-3 px-4\">&#64;ContentChild / &#64;ContentChildren</td>\n                <td class=\"py-3 px-4\">Access projected content</td>\n                <td class=\"py-3 px-4\">Supported, no signal alternative yet</td>\n              </tr>\n              <tr class=\"border-b border-gray-700 bg-gray-950 hover:bg-gray-800 transition-colors\">\n                <td class=\"py-3 px-4\">&#64;Inject</td>\n                <td class=\"py-3 px-4\">Field-based DI token injection</td>\n                <td class=\"py-3 px-4\">Supported, functional inject() alternative available</td>\n              </tr>\n              <tr class=\"border-b border-gray-700 bg-gray-900 hover:bg-gray-800 transition-colors\">\n                <td class=\"py-3 px-4\">&#64;Optional</td>\n                <td class=\"py-3 px-4\">Mark dependencies as optional</td>\n                <td class=\"py-3 px-4\">Supported</td>\n              </tr>\n              <tr class=\"border-b border-gray-700 bg-gray-950 hover:bg-gray-800 transition-colors\">\n                <td class=\"py-3 px-4\">&#64;Self / &#64;SkipSelf</td>\n                <td class=\"py-3 px-4\">Control injector hierarchy traversal</td>\n                <td class=\"py-3 px-4\">Supported</td>\n              </tr>\n              <tr class=\"border-b border-gray-700 bg-gray-900 hover:bg-gray-800 transition-colors\">\n                <td class=\"py-3 px-4\">&#64;Attribute</td>\n                <td class=\"py-3 px-4\">Access host element attribute values</td>\n                <td class=\"py-3 px-4\">Supported</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <div *ngIf=\"selectedTab === 2\">\n          <!-- Best Practices Tab -->\n          <ol class=\"list-decimal pl-4 text-sm\">\n            <li>\n              <strong class=\"text-sky-400\">Use Descriptive Property Names</strong>\n              <ul class=\"list-disc pl-4\">\n                <li>Choose clear, descriptive names for decorated properties</li>\n                <li>Use camelCase for property names, following TypeScript conventions</li>\n                <li>If using an alias, ensure it's intuitive for template consumers</li>\n                <li>Document complex properties with JSDoc comments</li>\n              </ul>\n            </li>\n            <li>\n              <strong class=\"text-sky-400\">Prefer Signal-Based Inputs in Angular 19</strong>\n              <ul class=\"list-disc pl-4\">\n                <li>Use input() function instead of &#64;Input() decorator for new components</li>\n                <li>Take advantage of improved type safety with generics</li>\n                <li>Implement transform functions for data sanitization</li>\n                <li>Use input.required&lt;T&gt;() for mandatory properties</li>\n                <li>Consider model() for two-way binding scenarios</li>\n              </ul>\n            </li>\n            <li>\n              <strong class=\"text-sky-400\">Properly Type All Inputs and Outputs</strong>\n              <ul class=\"list-disc pl-4\">\n                <li>Always specify types for Input and Output properties</li>\n                <li>Use generic types with EventEmitter: EventEmitter&lt;T&gt;</li>\n                <li>Avoid the any type; use unknown if the type is truly dynamic</li>\n                <li>Consider using interface or type alias for complex data structures</li>\n                <li>Use readonly arrays or objects when appropriate</li>\n              </ul>\n            </li>\n            <li>\n              <strong class=\"text-sky-400\">Optimize ViewChild and ContentChild Queries</strong>\n              <ul class=\"list-disc pl-4\">\n                <li>Use {{ '{' }} static: true {{ '}' }} only when needed in ngOnInit</li>\n                <li>Specify the read option when querying for a specific token</li>\n                <li>Be aware of timing differences between static and dynamic queries</li>\n                <li>Use @ViewChildren with QueryList for multiple elements</li>\n                <li>Remember that ContentChild queries elements projected from parent templates</li>\n              </ul>\n            </li>\n            <li>\n              <strong class=\"text-sky-400\">Implement Change Detection Strategies</strong>\n              <ul class=\"list-disc pl-4\">\n                <li>Use OnPush change detection for improved performance</li>\n                <li>Understand how inputs trigger change detection</li>\n                <li>Consider immutable data patterns for OnPush components</li>\n                <li>Use signal-based inputs for automatic fine-grained updates</li>\n                <li>Be cautious with HostBinding in performance-critical components</li>\n              </ul>\n            </li>\n          </ol>\n        </div>\n\n        <div *ngIf=\"selectedTab === 3\">\n          <!-- Pros and Cons Tab -->\n          <div class=\"text-sm\">\n            <p class=\"font-semibold text-sky-400 mb-2\">Advantages of Class Field Decorators</p>\n            <ul class=\"list-disc pl-4 mb-6\">\n              <li><strong>Declarative API</strong>: Clearly identifies the purpose and behavior of properties</li>\n              <li><strong>Simplified Component Communication</strong>: Easy to implement parent-child data flow</li>\n              <li><strong>DOM Integration</strong>: Provides direct access to template elements and DOM events</li>\n              <li><strong>Type Safety</strong>: Works well with TypeScript's type system</li>\n              <li><strong>Template Integration</strong>: Makes binding in templates intuitive and straightforward</li>\n              <li><strong>Framework Integration</strong>: Ensures Angular can properly process components</li>\n              <li><strong>Metadata Preservation</strong>: Retains information through the build process</li>\n            </ul>\n\n            <p class=\"font-semibold text-sky-400 mb-2\">Challenges with Class Field Decorators</p>\n            <ul class=\"list-disc pl-4 mb-6\">\n              <li><strong>TypeScript Experimental Feature</strong>: Decorators are still technically experimental</li>\n              <li><strong>Performance Overhead</strong>: Traditional decorators add some runtime cost</li>\n              <li><strong>Debugging Complexity</strong>: Errors in decorators can be harder to diagnose</li>\n              <li><strong>Change Detection Complexity</strong>: Can trigger unnecessary renders if not careful</li>\n              <li><strong>Timing Issues</strong>: ViewChild and ContentChild queries have specific lifecycle timing</li>\n              <li><strong>Migration Effort</strong>: Moving to signal-based alternatives requires refactoring</li>\n              <li><strong>Testing Complexity</strong>: Some decorators require special handling in tests</li>\n            </ul>\n\n            <p class=\"font-semibold text-sky-400 mb-2\">Traditional vs. Angular 19 Signal-Based Patterns</p>\n            <table class=\"w-full border-collapse rounded-lg overflow-hidden shadow-md mb-4\">\n              <thead>\n                <tr class=\"bg-gray-800 text-gray-100\">\n                  <th class=\"py-3 px-4 text-left\">Traditional Pattern</th>\n                  <th class=\"py-3 px-4 text-left\">Angular 19 Signal-Based Pattern</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr class=\"border-b border-gray-700 bg-gray-900\">\n                  <td class=\"py-3 px-4\">&#64;Input() name: string;</td>\n                  <td class=\"py-3 px-4\">name = input&lt;string&gt;('');</td>\n                </tr>\n                <tr class=\"border-b border-gray-700 bg-gray-950\">\n                  <td class=\"py-3 px-4\">&#64;Input({{ '{' }} required: true {{ '}' }}) id!: string;</td>\n                  <td class=\"py-3 px-4\">id = input.required&lt;string&gt;();</td>\n                </tr>\n                <tr class=\"border-b border-gray-700 bg-gray-900\">\n                  <td class=\"py-3 px-4\">&#64;Input({{ '{' }} transform: fn {{ '}' }}) value: T;</td>\n                  <td class=\"py-3 px-4\">value = input&lt;T&gt;(defaultValue, {{ '{' }} transform: fn {{ '}' }});</td>\n                </tr>\n                <tr class=\"border-b border-gray-700 bg-gray-950\">\n                  <td class=\"py-3 px-4\">&#64;Output() changed = new EventEmitter&lt;T&gt;();</td>\n                  <td class=\"py-3 px-4\">changed = output&lt;T&gt;();</td>\n                </tr>\n                <tr class=\"border-b border-gray-700 bg-gray-900\">\n                  <td class=\"py-3 px-4\">&#64;Input() value: T;<br>&#64;Output() valueChange = new EventEmitter&lt;T&gt;();</td>\n                  <td class=\"py-3 px-4\">value = model&lt;T&gt;(defaultValue);</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <div *ngIf=\"selectedTab === 4\">\n          <!-- Related Topics Tab -->\n          <div class=\"text-sm\">\n            <p class=\"font-semibold text-sky-400 mb-2\">Related Angular Concepts</p>\n            <ul class=\"list-disc pl-4 mb-6\">\n              <li><strong>Component Communication</strong>: How data flows between components in Angular</li>\n              <li><strong>TypeScript Decorators</strong>: The language feature that enables Angular's field decorators</li>\n              <li><strong>Angular Signals</strong>: The reactive primitive that powers modern input/output APIs</li>\n              <li><strong>Change Detection</strong>: How decorated properties affect Angular's update cycle</li>\n              <li><strong>Component Lifecycle</strong>: How ViewChild and ContentChild queries interact with lifecycle hooks</li>\n            </ul>\n\n            <p class=\"font-semibold text-sky-400 mb-2\">Class Field Decorator FAQ</p>\n            <ul class=\"list-disc pl-4 mb-6\">\n              <li>\n                <strong>Q: Should I use traditional decorators or signal-based APIs in Angular 19?</strong><br>\n                A: For new components, prefer signal-based APIs (input(), output(), model()). They offer better performance, type safety, and integration with Angular's reactivity system. For existing components, consider migrating during major refactors.\n              </li>\n              <li>\n                <strong>Q: When should I use ViewChild vs ContentChild?</strong><br>\n                A: Use ViewChild to access elements defined in the component's own template. Use ContentChild to access elements projected into the component via ng-content.\n              </li>\n              <li>\n                <strong>Q: How do I handle required inputs in Angular 19?</strong><br>\n                A: With traditional decorators, use &#64;Input({{ '{' }} required: true {{ '}' }}). With signal-based APIs, use input.required&lt;T&gt;().\n              </li>\n              <li>\n                <strong>Q: Can I transform input values in Angular 19?</strong><br>\n                A: Yes, both &#64;Input({{ '{' }} transform: fn {{ '}' }}) and input(defaultValue, {{ '{' }} transform: fn {{ '}' }}) support transformation functions that process values before they reach the component.\n              </li>\n              <li>\n                <strong>Q: How do signal-based inputs affect change detection?</strong><br>\n                A: Signal-based inputs integrate with Angular's fine-grained reactivity system, potentially reducing unnecessary re-renders and improving performance.\n              </li>\n            </ul>\n\n            <p class=\"font-semibold text-sky-400 mb-2\">Useful Resources</p>\n            <ul class=\"list-disc pl-4\">\n              <li><a href=\"https://angular.dev/guide/components/inputs\" class=\"text-sky-400 hover:underline\">Angular Input Binding Guide</a></li>\n              <li><a href=\"https://angular.dev/guide/components/outputs\" class=\"text-sky-400 hover:underline\">Angular Output Binding Guide</a></li>\n              <li><a href=\"https://angular.dev/guide/components/view-encapsulation\" class=\"text-sky-400 hover:underline\">Component View Encapsulation</a></li>\n              <li><a href=\"https://angular.dev/guide/signals\" class=\"text-sky-400 hover:underline\">Angular Signals Guide</a></li>\n              <li><a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\" class=\"text-sky-400 hover:underline\">TypeScript Decorators Documentation</a></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n"],"names":["CommonModule","HighlightModule","UnsubscribeService","i0","ClassFieldDecoratorComponent","constructor","ngOnInit","selectors","viewQuery","styles","changeDetection"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}