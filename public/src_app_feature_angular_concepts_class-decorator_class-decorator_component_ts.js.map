{"version":3,"file":"src_app_feature_angular_concepts_class-decorator_class-decorator_component_ts.js","mappings":"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","sources":["./src/app/feature/angular/concepts/class-decorator/class-decorator.component.ts","./src/app/feature/angular/concepts/class-decorator/class-decorator.component.html"],"sourcesContent":["import { ChangeDetectionStrategy, Component, ViewChild, ElementRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HighlightModule } from 'ngx-highlightjs';\nimport { UnsubscribeService } from 'src/app/utils/services/unsubscribe.service';\n\n@Component({\n  selector: 'app-class-decorator',\n  standalone: true,\n  imports: [CommonModule, HighlightModule],\n  templateUrl: './class-decorator.component.html',\n  styleUrls: ['./class-decorator.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ClassDecoratorComponent extends UnsubscribeService {\n\n  selectedTab = 1;\n\n  @ViewChild('componentCodeEl') componentCodeEl?: ElementRef;\n  @ViewChild('directiveCodeEl') directiveCodeEl?: ElementRef;\n  @ViewChild('injectableCodeEl') injectableCodeEl?: ElementRef;\n  @ViewChild('pipeCodeEl') pipeCodeEl?: ElementRef;\n  @ViewChild('ngModuleCodeEl') ngModuleCodeEl?: ElementRef;\n  @ViewChild('customDecoratorCodeEl') customDecoratorCodeEl?: ElementRef;\n\n  // Code examples\n  componentCode = `@Component({\n  selector: 'app-example',\n  standalone: true,\n  imports: [CommonModule],\n  template: \\`\n    <h1>{{ title }}</h1>\n    <p>{{ description }}</p>\n  \\`,\n  styles: [\\`\n    h1 { color: #336699; }\n    p { font-size: 16px; }\n  \\`]\n})\nexport class ExampleComponent {\n  title = 'Example Component';\n  description = 'This is a simple component using the @Component decorator';\n}`;\n\n  directiveCode = `@Directive({\n  selector: '[appHighlight]',\n  standalone: true\n})\nexport class HighlightDirective {\n  @Input() appHighlight = '';\n  @Input() defaultColor = 'yellow';\n\n  constructor(private el: ElementRef) {}\n\n  @HostListener('mouseenter') onMouseEnter() {\n    this.highlight(this.appHighlight || this.defaultColor);\n  }\n\n  @HostListener('mouseleave') onMouseLeave() {\n    this.highlight('');\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n}`;\n\n  injectableCode = `@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private data: string[] = [];\n\n  addItem(item: string): void {\n    this.data.push(item);\n  }\n\n  getItems(): string[] {\n    return [...this.data];\n  }\n}`;\n\n  pipeCode = `@Pipe({\n  name: 'truncate',\n  standalone: true\n})\nexport class TruncatePipe implements PipeTransform {\n  transform(value: string, limit: number = 25, completeWords: boolean = false, ellipsis: string = '...'): string {\n    if (!value) return '';\n\n    if (value.length <= limit) {\n      return value;\n    }\n\n    if (completeWords) {\n      limit = value.substring(0, limit).lastIndexOf(' ');\n    }\n\n    return value.substring(0, limit) + ellipsis;\n  }\n}`;\n\n  ngModuleCode = `@NgModule({\n  declarations: [\n    // Components, directives, and pipes that belong to this module\n    AppComponent,\n    HomeComponent,\n    NavbarComponent\n  ],\n  imports: [\n    // Other modules this module depends on\n    BrowserModule,\n    HttpClientModule,\n    RouterModule.forRoot(routes)\n  ],\n  providers: [\n    // Services and other providers\n    AuthService,\n    { provide: API_URL, useValue: 'https://api.example.com' }\n  ],\n  bootstrap: [AppComponent] // Root component to bootstrap\n})\nexport class AppModule { }`;\n\n  customDecoratorCode = `// Creating a custom class decorator\nexport function LogClass() {\n  return function(target: any) {\n    // Original constructor\n    const original = target;\n\n    // New constructor function\n    const newConstructor: any = function(...args: any[]) {\n      console.log(\\`Creating instance of \\${target.name}\\`);\n      return new original(...args);\n    }\n\n    // Copy prototype\n    newConstructor.prototype = original.prototype;\n\n    // Return modified constructor\n    return newConstructor;\n  };\n}\n\n// Using the custom decorator\n@LogClass()\nexport class LoggedClass {\n  constructor() {\n    console.log('LoggedClass instance created');\n  }\n\n  doSomething() {\n    console.log('Doing something');\n  }\n}`;\n\n  ngOnInit() {\n    // Any initialization code if needed\n  }\n}\n","<section class=\"p-4 text-sm\">\n  <p class=\"heading-1 mb-2\">\n    Class Decorators in Angular\n  </p>\n\n  <div class=\"text-content\">\n    <p>\n      <span class=\"text-zinc-50 tw-font-medium\">Class Decorators</span>\n      in Angular 19 are TypeScript decorators that add metadata to classes, enabling Angular to understand their intended role and behavior. These decorators are essential building blocks that define components, directives, services, and other core features of Angular applications.\n    </p>\n\n    <br>\n\n    <div class=\"flex flex-col\">\n      <div class=\"flex border-b border-gray-200\">\n        <button (click)=\"selectedTab = 1\" [class.text-rose-300]=\"selectedTab===1\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Notes\n        </button>\n        <button (click)=\"selectedTab = 2\" [class.text-rose-300]=\"selectedTab===2\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Best Practices\n        </button>\n        <button (click)=\"selectedTab = 3\" [class.text-rose-300]=\"selectedTab===3\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Pros and Cons\n        </button>\n        <button (click)=\"selectedTab = 4\" [class.text-rose-300]=\"selectedTab===4\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Related Topics\n        </button>\n      </div>\n      <div class=\"p-4\">\n        <div *ngIf=\"selectedTab === 1\">\n          <!-- Notes Tab -->\n          <p>Core Angular Class Decorators</p>\n          <ul class=\"list-disc pl-4 text-sm\">\n            <li>\n              <strong>@Component</strong>:\n              Defines a component, connecting a template, styles, and business logic.\n              <ul class=\"list-disc pl-4\">\n                <li>Identifies a class as an Angular component</li>\n                <li>Specifies metadata like the selector, template, styles, and change detection strategy</li>\n                <li>Since Angular 19, standalone components are the preferred approach</li>\n                <button (click)=\"componentCodeEl.hidden = !componentCodeEl.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n                <span #componentCodeEl hidden copyToClipboard>\n                  <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n                    <span>typescript</span>\n                    <span class=\"copy-button-wrapper bg-gray-700\"></span>\n                  </div>\n                  <pre>\n                    <code [highlight]=\"componentCode\" [languages]=\"['typescript']\"></code>\n                  </pre>\n                </span>\n              </ul>\n            </li>\n            <li>\n              <strong>@Directive</strong>:\n              Creates a directive that adds behavior to DOM elements without a template.\n              <ul class=\"list-disc pl-4\">\n                <li>Marks a class as an Angular directive</li>\n                <li>Uses a CSS selector to target elements in templates</li>\n                <li>In Angular 19, standalone directives are fully supported</li>\n                <button (click)=\"directiveCodeEl.hidden = !directiveCodeEl.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n                <span #directiveCodeEl hidden copyToClipboard>\n                  <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n                    <span>typescript</span>\n                    <span class=\"copy-button-wrapper bg-gray-700\"></span>\n                  </div>\n                  <pre>\n                    <code [highlight]=\"directiveCode\" [languages]=\"['typescript']\"></code>\n                  </pre>\n                </span>\n              </ul>\n            </li>\n            <li>\n              <strong>@Injectable</strong>:\n              Marks a class as available for dependency injection.\n              <ul class=\"list-disc pl-4\">\n                <li>Essential for services and other injectable classes</li>\n                <li>Configures provider scope and tree-shakability</li>\n                <li>Angular 19 optimizes DI for better performance</li>\n                <button (click)=\"injectableCodeEl.hidden = !injectableCodeEl.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n                <span #injectableCodeEl hidden copyToClipboard>\n                  <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n                    <span>typescript</span>\n                    <span class=\"copy-button-wrapper bg-gray-700\"></span>\n                  </div>\n                  <pre>\n                    <code [highlight]=\"injectableCode\" [languages]=\"['typescript']\"></code>\n                  </pre>\n                </span>\n              </ul>\n            </li>\n            <li>\n              <strong>@Pipe</strong>:\n              Defines a transformation function for template expressions.\n              <ul class=\"list-disc pl-4\">\n                <li>Marks a class as an Angular pipe</li>\n                <li>Must implement the PipeTransform interface</li>\n                <li>In Angular 19, standalone pipes are the preferred approach</li>\n                <button (click)=\"pipeCodeEl.hidden = !pipeCodeEl.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n                <span #pipeCodeEl hidden copyToClipboard>\n                  <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n                    <span>typescript</span>\n                    <span class=\"copy-button-wrapper bg-gray-700\"></span>\n                  </div>\n                  <pre>\n                    <code [highlight]=\"pipeCode\" [languages]=\"['typescript']\"></code>\n                  </pre>\n                </span>\n              </ul>\n            </li>\n            <li>\n              <strong>@NgModule</strong>:\n              Defines a module that encapsulates related components, directives, pipes, and services.\n              <ul class=\"list-disc pl-4\">\n                <li>Less common in Angular 19 with standalone components</li>\n                <li>Still useful for organizing large applications and lazy loading</li>\n                <li>Configures elements, imports, providers, and bootstrap components</li>\n                <button (click)=\"ngModuleCodeEl.hidden = !ngModuleCodeEl.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n                <span #ngModuleCodeEl hidden copyToClipboard>\n                  <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n                    <span>typescript</span>\n                    <span class=\"copy-button-wrapper bg-gray-700\"></span>\n                  </div>\n                  <pre>\n                    <code [highlight]=\"ngModuleCode\" [languages]=\"['typescript']\"></code>\n                  </pre>\n                </span>\n              </ul>\n            </li>\n          </ul>\n\n          <br>\n          <br>\n\n          <p>Angular 19 Class Decorator Enhancements</p>\n          <ul class=\"list-disc pl-4 text-sm\">\n            <li>\n              <strong>Functional Pattern for Decorators</strong>:\n              <ul class=\"list-disc pl-4\">\n                <li>Angular 19 emphasizes functional patterns for better tree-shaking</li>\n                <li>New signal-based components use functional alternatives to decorators</li>\n                <li>Example: <code>input()</code> function instead of <code>@Input()</code> decorator</li>\n              </ul>\n            </li>\n            <li>\n              <strong>Improved Type Safety</strong>:\n              <ul class=\"list-disc pl-4\">\n                <li>Enhanced type checking for decorator metadata</li>\n                <li>Better TypeScript integration with decorator factories</li>\n                <li>More accurate error messages for decorator-related issues</li>\n              </ul>\n            </li>\n            <li>\n              <strong>Performance Optimizations</strong>:\n              <ul class=\"list-disc pl-4\">\n                <li>Reduced runtime overhead from decorator processing</li>\n                <li>More efficient metadata storage and retrieval</li>\n                <li>Improved tree-shaking for unused decorators</li>\n              </ul>\n            </li>\n            <li>\n              <strong>Custom Decorators</strong>:\n              <ul class=\"list-disc pl-4\">\n                <li>Better support for creating custom class decorators</li>\n                <li>Simplified decorator composition patterns</li>\n                <li>Integration with Angular's dependency injection system</li>\n                <button (click)=\"customDecoratorCodeEl.hidden = !customDecoratorCodeEl.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n                <span #customDecoratorCodeEl hidden copyToClipboard>\n                  <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n                    <span>typescript</span>\n                    <span class=\"copy-button-wrapper bg-gray-700\"></span>\n                  </div>\n                  <pre>\n                    <code [highlight]=\"customDecoratorCode\" [languages]=\"['typescript']\"></code>\n                  </pre>\n                </span>\n              </ul>\n            </li>\n          </ul>\n\n          <br>\n          <br>\n\n          <p>Class Decorator Metadata Options</p>\n          <table class=\"w-full border-collapse rounded-lg overflow-hidden shadow-md\">\n            <thead>\n              <tr class=\"bg-gray-800 text-gray-100\">\n                <th class=\"py-3 px-4 text-left\">Decorator</th>\n                <th class=\"py-3 px-4 text-left\">Key Metadata Properties</th>\n                <th class=\"py-3 px-4 text-left\">Angular 19 Features</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr class=\"border-b border-gray-700 bg-gray-900 hover:bg-gray-800 transition-colors\">\n                <td class=\"py-3 px-4\">@Component</td>\n                <td class=\"py-3 px-4\">selector, template, templateUrl, styles, styleUrls, changeDetection, standalone</td>\n                <td class=\"py-3 px-4\">Standalone is now default, signal-based alternatives available</td>\n              </tr>\n              <tr class=\"border-b border-gray-700 bg-gray-950 hover:bg-gray-800 transition-colors\">\n                <td class=\"py-3 px-4\">@Injectable</td>\n                <td class=\"py-3 px-4\">providedIn</td>\n                <td class=\"py-3 px-4\">Enhanced provider scoping, optimized for DI</td>\n              </tr>\n              <tr class=\"border-b border-gray-700 bg-gray-900 hover:bg-gray-800 transition-colors\">\n                <td class=\"py-3 px-4\">@Directive</td>\n                <td class=\"py-3 px-4\">selector, standalone, host, providers</td>\n                <td class=\"py-3 px-4\">Standalone is recommended, improved host binding</td>\n              </tr>\n              <tr class=\"border-b border-gray-700 bg-gray-950 hover:bg-gray-800 transition-colors\">\n                <td class=\"py-3 px-4\">@Pipe</td>\n                <td class=\"py-3 px-4\">name, pure, standalone</td>\n                <td class=\"py-3 px-4\">Standalone is default, better optimization for pure pipes</td>\n              </tr>\n              <tr class=\"border-b border-gray-700 bg-gray-900 hover:bg-gray-800 transition-colors\">\n                <td class=\"py-3 px-4\">@NgModule</td>\n                <td class=\"py-3 px-4\">declarations, imports, exports, providers, bootstrap</td>\n                <td class=\"py-3 px-4\">Less prominent with standalone components, improved lazy loading</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <div *ngIf=\"selectedTab === 2\">\n          <!-- Best Practices Tab -->\n          <ol class=\"list-decimal pl-4 text-sm\">\n            <li>\n              <strong class=\"text-sky-400\">Prefer Standalone Components</strong>\n              <ul class=\"list-disc pl-4\">\n                <li>Use standalone: true in @Component, @Directive, and @Pipe decorators</li>\n                <li>Directly import dependencies in the imports array</li>\n                <li>Avoid NgModules when possible for simpler code organization</li>\n                <li>Take advantage of improved tree-shaking with standalone components</li>\n              </ul>\n            </li>\n            <li>\n              <strong class=\"text-sky-400\">Optimize @Injectable Configuration</strong>\n              <ul class=\"list-disc pl-4\">\n                <li>Use providedIn: 'root' for singleton services across the application</li>\n                <li>Use providedIn: 'platform' only for truly application-wide services</li>\n                <li>Use providedIn: 'any' for multi-instance lazy-loaded modules</li>\n                <li>Consider using providedIn: SomeModule for module-scoped services</li>\n                <li>Use explicit providers arrays for component-level services</li>\n              </ul>\n            </li>\n            <li>\n              <strong class=\"text-sky-400\">Write Clean, Focused Components</strong>\n              <ul class=\"list-disc pl-4\">\n                <li>Each component should have a single responsibility</li>\n                <li>Keep templates and styles simple and maintainable</li>\n                <li>Use OnPush change detection strategy for better performance</li>\n                <li>Prefer composition over inheritance for component reuse</li>\n                <li>Consider using signal-based components for optimal reactivity</li>\n              </ul>\n            </li>\n            <li>\n              <strong class=\"text-sky-400\">Make Decorators Readable</strong>\n              <ul class=\"list-disc pl-4\">\n                <li>Use consistent formatting for decorator metadata</li>\n                <li>Organize properties alphabetically or by importance</li>\n                <li>Split complex decorators across multiple lines for readability</li>\n                <li>Add comments for non-obvious decorator configurations</li>\n                <li>Consider extracting complex configuration to constants</li>\n              </ul>\n            </li>\n            <li>\n              <strong class=\"text-sky-400\">Embrace Modern Patterns</strong>\n              <ul class=\"list-disc pl-4\">\n                <li>Consider signal-based alternatives to traditional decorators</li>\n                <li>Use functional patterns when appropriate for better tree-shaking</li>\n                <li>Take advantage of type inference improvements in Angular 19</li>\n                <li>Use explicit typing for decorator metadata where needed</li>\n                <li>Consider custom decorators for cross-cutting concerns</li>\n              </ul>\n            </li>\n          </ol>\n        </div>\n\n        <div *ngIf=\"selectedTab === 3\">\n          <!-- Pros and Cons Tab -->\n          <div class=\"text-sm\">\n            <p class=\"font-semibold text-sky-400 mb-2\">Advantages of Class Decorators</p>\n            <ul class=\"list-disc pl-4 mb-6\">\n              <li><strong>Declarative Syntax</strong>: Makes it clear what a class's role is in the Angular ecosystem</li>\n              <li><strong>Metadata Definition</strong>: Provides a clean way to attach configuration to classes</li>\n              <li><strong>Framework Integration</strong>: Enables Angular to discover and process classes correctly</li>\n              <li><strong>Separation of Concerns</strong>: Keeps configuration separate from implementation</li>\n              <li><strong>IDE Support</strong>: Modern editors provide excellent autocompletion and validation</li>\n              <li><strong>Testability</strong>: Decorators make classes easier to mock and test</li>\n              <li><strong>Code Organization</strong>: Helps maintain a consistent structure across the codebase</li>\n            </ul>\n\n            <p class=\"font-semibold text-sky-400 mb-2\">Challenges with Class Decorators</p>\n            <ul class=\"list-disc pl-4 mb-6\">\n              <li><strong>TypeScript Limitations</strong>: Decorators are still technically experimental in TypeScript</li>\n              <li><strong>Learning Curve</strong>: Understanding all decorator options requires time</li>\n              <li><strong>Runtime Overhead</strong>: Decorators add some processing cost during application startup</li>\n              <li><strong>Debugging Complexity</strong>: Errors in decorators can be harder to trace</li>\n              <li><strong>Limited Type Safety</strong>: Some decorator metadata isn't fully type-checked</li>\n              <li><strong>Code Size</strong>: Heavy use of decorators can increase bundle size</li>\n              <li><strong>Migration Challenges</strong>: Moving to new patterns requires refactoring</li>\n            </ul>\n\n            <p class=\"font-semibold text-sky-400 mb-2\">Traditional vs. Modern Angular 19 Patterns</p>\n            <table class=\"w-full border-collapse rounded-lg overflow-hidden shadow-md mb-4\">\n              <thead>\n                <tr class=\"bg-gray-800 text-gray-100\">\n                  <th class=\"py-3 px-4 text-left\">Traditional Pattern</th>\n                  <th class=\"py-3 px-4 text-left\">Angular 19 Modern Pattern</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr class=\"border-b border-gray-700 bg-gray-900\">\n                  <td class=\"py-3 px-4\">@Component with NgModule</td>\n                  <td class=\"py-3 px-4\">Standalone @Component with direct imports</td>\n                </tr>\n                <tr class=\"border-b border-gray-700 bg-gray-950\">\n                  <td class=\"py-3 px-4\">@Input() property decorator</td>\n                  <td class=\"py-3 px-4\">input() signal function</td>\n                </tr>\n                <tr class=\"border-b border-gray-700 bg-gray-900\">\n                  <td class=\"py-3 px-4\">@Output() with EventEmitter</td>\n                  <td class=\"py-3 px-4\">output() signal function</td>\n                </tr>\n                <tr class=\"border-b border-gray-700 bg-gray-950\">\n                  <td class=\"py-3 px-4\">Two-way binding with @Input/@Output</td>\n                  <td class=\"py-3 px-4\">model() signal function</td>\n                </tr>\n                <tr class=\"border-b border-gray-700 bg-gray-900\">\n                  <td class=\"py-3 px-4\">@Injectable provided in array</td>\n                  <td class=\"py-3 px-4\">@Injectable with providedIn configuration</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <div *ngIf=\"selectedTab === 4\">\n          <!-- Related Topics Tab -->\n          <div class=\"text-sm\">\n            <p class=\"font-semibold text-sky-400 mb-2\">Related Angular Concepts</p>\n            <ul class=\"list-disc pl-4 mb-6\">\n              <li><strong>TypeScript Decorators</strong>: The language feature that enables Angular decorators</li>\n              <li><strong>Metadata Reflection</strong>: How Angular uses decorators to generate metadata</li>\n              <li><strong>Dependency Injection</strong>: The system that leverages @Injectable decorators</li>\n              <li><strong>Standalone Components</strong>: Modern approach to component definition</li>\n              <li><strong>Signal-Based APIs</strong>: Functional alternatives to property decorators</li>\n            </ul>\n\n            <p class=\"font-semibold text-sky-400 mb-2\">Class Decorator FAQ</p>\n            <ul class=\"list-disc pl-4 mb-6\">\n              <li>\n                <strong>Q: When should I use NgModules vs. standalone components?</strong><br>\n                A: In Angular 19, prefer standalone components for most use cases. NgModules are still useful for organizing large applications and legacy code.\n              </li>\n              <li>\n                <strong>Q: What's the difference between providedIn: 'root' and providedIn: 'platform'?</strong><br>\n                A: 'root' creates a singleton for the current application, while 'platform' creates a singleton shared across multiple Angular applications that might be running on the same page.\n              </li>\n              <li>\n                <strong>Q: Should I migrate from property decorators to signal-based APIs?</strong><br>\n                A: For new components, use signal-based APIs. For existing components, consider migrating during major refactors rather than all at once.\n              </li>\n              <li>\n                <strong>Q: Can I create my own custom class decorators?</strong><br>\n                A: Yes, but they won't integrate with Angular's core functionality automatically. Custom decorators are useful for cross-cutting concerns like logging and validation.\n              </li>\n              <li>\n                <strong>Q: How do decorators affect performance?</strong><br>\n                A: Decorators add some overhead during application startup but have minimal impact on runtime performance. Angular 19 has optimized decorator processing considerably.\n              </li>\n            </ul>\n\n            <p class=\"font-semibold text-sky-400 mb-2\">Useful Resources</p>\n            <ul class=\"list-disc pl-4\">\n              <li><a href=\"https://angular.dev/guide/components\" class=\"text-sky-400 hover:underline\">Angular Component Guide</a></li>\n              <li><a href=\"https://angular.dev/guide/di/dependency-injection\" class=\"text-sky-400 hover:underline\">Angular Dependency Injection Guide</a></li>\n              <li><a href=\"https://angular.dev/guide/directives/directive-composition-api\" class=\"text-sky-400 hover:underline\">Directive Composition API</a></li>\n              <li><a href=\"https://angular.dev/guide/signals\" class=\"text-sky-400 hover:underline\">Angular Signals Guide</a></li>\n              <li><a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\" class=\"text-sky-400 hover:underline\">TypeScript Decorators Documentation</a></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n"],"names":["CommonModule","HighlightModule","UnsubscribeService","i0","ClassDecoratorComponent","constructor","ngOnInit","selectors","viewQuery","styles","changeDetection"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}