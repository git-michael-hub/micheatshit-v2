{"version":3,"file":"src_app_feature_angular_concepts_view-hierarchy_view-hierarchy_component_ts.js","mappings":"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","sources":["./src/app/feature/angular/concepts/view-hierarchy/view-hierarchy.component.ts","./src/app/feature/angular/concepts/view-hierarchy/view-hierarchy.component.html"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Component, ViewChild, TemplateRef } from '@angular/core';\nimport { HighlightModule } from 'ngx-highlightjs';\nimport { UnsubscribeService } from 'src/app/utils/services/unsubscribe.service';\n\n@Component({\n  selector: 'app-view-hierarchy',\n  standalone: true,\n  imports: [CommonModule, HighlightModule],\n  templateUrl: './view-hierarchy.component.html',\n  styleUrls: ['./view-hierarchy.component.scss']\n})\nexport class ViewHierarchyComponent extends UnsubscribeService {\n  selectedTab = 'notes';\n\n  @ViewChild('notesTemplate', { static: true }) notesTemplate!: TemplateRef<any>;\n  @ViewChild('bestPracticesTemplate', { static: true }) bestPracticesTemplate!: TemplateRef<any>;\n  @ViewChild('prosConsTemplate', { static: true }) prosConsTemplate!: TemplateRef<any>;\n  @ViewChild('relatedTopicsTemplate', { static: true }) relatedTopicsTemplate!: TemplateRef<any>;\n\n  componentExampleCode = `@Component({\n  selector: 'app-parent',\n  template: \\`\n    <h1>Parent Component</h1>\n    <app-child></app-child>\n  \\`\n})\nexport class ParentComponent {}\n\n@Component({\n  selector: 'app-child',\n  template: \\`\n    <h2>Child Component</h2>\n    <app-grandchild></app-grandchild>\n  \\`\n})\nexport class ChildComponent {}\n\n@Component({\n  selector: 'app-grandchild',\n  template: \\`<h3>Grandchild Component</h3>\\`\n})\nexport class GrandchildComponent {}`\n\n  viewTreeCode = `// Component View Tree Example\n<app-parent> <!-- HostView for ParentComponent -->\n  #shadow-root (open)\n    <h1>Parent Component</h1> <!-- ElementNode -->\n    <app-child> <!-- ElementNode & Host for ChildComponent -->\n      #shadow-root (open)\n        <h2>Child Component</h2> <!-- ElementNode -->\n        <app-grandchild> <!-- ElementNode & Host for GrandchildComponent -->\n          #shadow-root (open)\n            <h3>Grandchild Component</h3> <!-- ElementNode -->\n        </app-grandchild>\n    </app-child>\n</app-parent>`;\n\n  embeddedViewsCode = `@Component({\n  selector: 'app-example',\n  template: \\`\n    <h1>View Container Example</h1>\n\n    <!-- Host View (Component View) -->\n\n    <!-- Embedded View 1: Created from structural directive -->\n    <div *ngIf=\"showContent\">\n      <p>This content is conditionally shown</p>\n    </div>\n\n    <!-- Embedded View 2: Created from ng-template -->\n    <ng-container *ngTemplateOutlet=\"myTemplate\"></ng-container>\n\n    <ng-template #myTemplate>\n      <p>This content comes from a template</p>\n    </ng-template>\n\n    <!-- Dynamic Container -->\n    <div #container></div>\n  \\`\n})\nexport class ExampleComponent implements AfterViewInit {\n  @ViewChild('container', { read: ViewContainerRef })\n  container!: ViewContainerRef;\n\n  @ViewChild('myTemplate') myTemplate!: TemplateRef<any>;\n\n  showContent = true;\n\n  ngAfterViewInit() {\n    // Programmatically create and insert an embedded view\n    const embeddedView = this.myTemplate.createEmbeddedView(null);\n    this.container.insert(embeddedView);\n  }\n}`\n\n  viewContainerRefCode = `import { Component, ViewChild, ViewContainerRef,\n  TemplateRef, ComponentFactoryResolver } from '@angular/core';\n\n@Component({\n  selector: 'app-dynamic-content',\n  template: \\`\n    <div class=\"container\">\n      <button (click)=\"loadTemplate()\">Load Template</button>\n      <button (click)=\"loadComponent()\">Load Component</button>\n\n      <!-- This div will be our view container -->\n      <div #dynamicContainer></div>\n\n      <ng-template #sampleTemplate>\n        <div class=\"template-content\">\n          <h3>Dynamic Template Content</h3>\n          <p>This content was loaded dynamically.</p>\n        </div>\n      </ng-template>\n    </div>\n  \\`\n})\nexport class DynamicContentComponent {\n  @ViewChild('dynamicContainer', { read: ViewContainerRef })\n  container!: ViewContainerRef;\n\n  @ViewChild('sampleTemplate')\n  template!: TemplateRef<any>;\n\n  constructor(private cfr: ComponentFactoryResolver) {}\n\n  loadTemplate() {\n    // Clear previous content\n    this.container.clear();\n\n    // Create an embedded view from the template\n    const view = this.template.createEmbeddedView(null);\n\n    // Insert the view into the container\n    this.container.insert(view);\n  }\n\n  loadComponent() {\n    // Clear previous content\n    this.container.clear();\n\n    // Create component factory and component instance\n    const factory = this.cfr.resolveComponentFactory(DynamicComponent);\n    const componentRef = this.container.createComponent(factory);\n\n    // We can interact with the component instance\n    componentRef.instance.message = 'Hello from parent!';\n  }\n}`\n}\n","<div class=\"container\">\n  <h1>View Hierarchy in Angular</h1>\n  <p>\n    Angular's view hierarchy defines how components, templates, and DOM elements are organized and rendered. Understanding this hierarchy is crucial for effective component composition and dynamic content rendering.\n  </p>\n\n  <div class=\"tab-navigation\">\n    <button\n      type=\"button\"\n      [class.active]=\"selectedTab === 'notes'\"\n      (click)=\"selectedTab = 'notes'\">\n      Notes\n    </button>\n    <button\n      type=\"button\"\n      [class.active]=\"selectedTab === 'bestPractices'\"\n      (click)=\"selectedTab = 'bestPractices'\">\n      Best Practices\n    </button>\n    <button\n      type=\"button\"\n      [class.active]=\"selectedTab === 'prosCons'\"\n      (click)=\"selectedTab = 'prosCons'\">\n      Pros and Cons\n    </button>\n    <button\n      type=\"button\"\n      [class.active]=\"selectedTab === 'relatedTopics'\"\n      (click)=\"selectedTab = 'relatedTopics'\">\n      Related Topics\n    </button>\n  </div>\n\n  <ng-container [ngSwitch]=\"selectedTab\">\n    <ng-container *ngSwitchCase=\"'notes'\">\n      <ng-container *ngTemplateOutlet=\"notesTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'bestPractices'\">\n      <ng-container *ngTemplateOutlet=\"bestPracticesTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'prosCons'\">\n      <ng-container *ngTemplateOutlet=\"prosConsTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'relatedTopics'\">\n      <ng-container *ngTemplateOutlet=\"relatedTopicsTemplate\"></ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n\n<ng-template #notesTemplate>\n  <h2>Understanding View Hierarchy</h2>\n  <p>\n    In Angular, a view is the fundamental rendering unit that represents a portion of the UI. The view hierarchy is the tree-like structure of these UI components and their relationships.\n  </p>\n\n  <h3>Types of Views in Angular</h3>\n  <ul>\n    <li>\n      <strong>Host Views:</strong> Created for components. When you create a component, Angular creates a host view that hosts the component's template.\n    </li>\n    <li>\n      <strong>Embedded Views:</strong> Created from templates using structural directives like *ngIf, *ngFor, or from TemplateRef.\n    </li>\n  </ul>\n\n  <h3>Component Hierarchy Example</h3>\n  <div class=\"code-container\">\n    <pre><code [highlight]=\"componentExampleCode\" [languages]=\"['typescript']\"></code></pre>\n  </div>\n\n  <h3>Resulting View Tree</h3>\n  <div class=\"code-container\">\n    <pre><code [highlight]=\"viewTreeCode\" [languages]=\"['html']\"></code></pre>\n  </div>\n\n  <div class=\"hierarchy-diagram\">\n    <div class=\"component level-1\">\n      <span class=\"view-type host\">Host View</span> ParentComponent\n      <div class=\"component level-2\">\n        <span class=\"view-type host\">Host View</span> ChildComponent\n        <div class=\"component level-3\">\n          <span class=\"view-type host\">Host View</span> GrandchildComponent\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <h3>Embedded Views & ViewContainerRef</h3>\n  <p>\n    Embedded views are created from templates using structural directives or manually through the ViewContainerRef API.\n  </p>\n\n  <div class=\"code-container\">\n    <pre><code [highlight]=\"embeddedViewsCode\" [languages]=\"['typescript']\"></code></pre>\n  </div>\n\n  <h3>Dynamic Content with ViewContainerRef</h3>\n  <p>\n    The ViewContainerRef is a powerful API for managing views dynamically, allowing for insertion, movement, and removal of views.\n  </p>\n\n  <div class=\"code-container\">\n    <pre><code [highlight]=\"viewContainerRefCode\" [languages]=\"['typescript']\"></code></pre>\n  </div>\n</ng-template>\n\n<ng-template #bestPracticesTemplate>\n  <h2>Best Practices</h2>\n\n  <h3>Component Design</h3>\n  <ul>\n    <li>\n      <strong>Keep component hierarchies shallow:</strong> Deep component trees can lead to performance issues. Consider flattening your component tree when possible.\n    </li>\n    <li>\n      <strong>Maintain logical component boundaries:</strong> Components should have a single responsibility and represent a coherent part of the UI.\n    </li>\n    <li>\n      <strong>Use content projection strategically:</strong> For reusable components that need to accept varying content.\n    </li>\n    <li>\n      <strong>Design for reusability:</strong> Components should be designed to be reused in different contexts when appropriate.\n    </li>\n  </ul>\n\n  <h3>View Management</h3>\n  <ul>\n    <li>\n      <strong>Avoid deep nesting of *ngIf and *ngFor:</strong> This creates many embedded views and can affect performance.\n    </li>\n    <li>\n      <strong>Clean up dynamically created views:</strong> Always call clear() on ViewContainerRef when components are destroyed to prevent memory leaks.\n    </li>\n    <li>\n      <strong>Use trackBy with *ngFor:</strong> This helps Angular identify which items have changed and need to be re-rendered.\n    </li>\n    <li>\n      <strong>Limit DOM manipulations:</strong> Excessive DOM manipulations can lead to performance issues, especially in complex applications.\n    </li>\n  </ul>\n\n  <h3>Performance Considerations</h3>\n  <ul>\n    <li>\n      <strong>Use OnPush change detection:</strong> This can significantly improve performance by reducing unnecessary change detection cycles.\n    </li>\n    <li>\n      <strong>Lazy load components:</strong> Load components only when needed to improve initial loading time.\n    </li>\n    <li>\n      <strong>Consider virtual scrolling:</strong> For lists with many items, virtual scrolling can greatly improve performance.\n    </li>\n    <li>\n      <strong>Optimize change detection:</strong> Use appropriate lifecycle hooks and avoid unnecessary data binding.\n    </li>\n  </ul>\n\n  <div class=\"diagram\">\n    <h4>Recommended View Hierarchy Pattern:</h4>\n    <ol>\n      <li>Smart/Container components at the top level (handle data and logic)</li>\n      <li>Presentation/UI components in the middle (display data, emit events)</li>\n      <li>Reusable UI elements at the bottom (buttons, inputs, etc.)</li>\n    </ol>\n  </div>\n</ng-template>\n\n<ng-template #prosConsTemplate>\n  <h2>Pros and Cons</h2>\n\n  <h3>Advantages of Angular's View Hierarchy</h3>\n  <ul>\n    <li><strong>Component-Based Architecture:</strong> Encourages reusable, modular code</li>\n    <li><strong>Clear Separation of Concerns:</strong> Components have well-defined responsibilities</li>\n    <li><strong>Powerful Rendering Control:</strong> Fine-grained control over how and when content is rendered</li>\n    <li><strong>Dynamic Content Capabilities:</strong> Views can be created and manipulated at runtime</li>\n    <li><strong>Change Detection Optimization:</strong> View hierarchy enables efficient change detection strategies</li>\n  </ul>\n\n  <h3>Challenges and Limitations</h3>\n  <ul>\n    <li><strong>Learning Curve:</strong> Understanding view manipulation APIs can be challenging</li>\n    <li><strong>Performance Overhead:</strong> Deep component hierarchies can impact performance</li>\n    <li><strong>Complexity:</strong> Dynamic view manipulation can lead to complex and hard-to-maintain code</li>\n    <li><strong>Memory Management:</strong> Improper view handling can lead to memory leaks</li>\n    <li><strong>Debugging Difficulty:</strong> Issues in dynamic views can be harder to debug</li>\n  </ul>\n\n  <h3>View Types Comparison</h3>\n  <table class=\"comparison-table\">\n    <thead>\n      <tr>\n        <th>Feature</th>\n        <th>Host Views</th>\n        <th>Embedded Views</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Creation</td>\n        <td>Created for components</td>\n        <td>Created from templates</td>\n      </tr>\n      <tr>\n        <td>Lifecycle Hooks</td>\n        <td>Has component lifecycle hooks</td>\n        <td>No component lifecycle hooks</td>\n      </tr>\n      <tr>\n        <td>Change Detection</td>\n        <td>Can use OnPush strategy</td>\n        <td>Follows parent's strategy</td>\n      </tr>\n      <tr>\n        <td>Dynamic Creation</td>\n        <td>ComponentFactoryResolver</td>\n        <td>TemplateRef.createEmbeddedView</td>\n      </tr>\n      <tr>\n        <td>Typical Use Cases</td>\n        <td>Standalone UI elements</td>\n        <td>Conditional content, lists</td>\n      </tr>\n    </tbody>\n  </table>\n</ng-template>\n\n<ng-template #relatedTopicsTemplate>\n  <h2>Related Topics</h2>\n\n  <ul>\n    <li>\n      <strong>Components:</strong> The building blocks of Angular applications that create host views\n    </li>\n    <li>\n      <strong>Templates:</strong> Define the HTML and bindings that Angular renders\n    </li>\n    <li>\n      <strong>Content Projection:</strong> Allows components to accept content from their parent\n    </li>\n    <li>\n      <strong>Structural Directives:</strong> Create embedded views conditionally (*ngIf, *ngFor)\n    </li>\n    <li>\n      <strong>ViewChild/ViewChildren:</strong> Query child elements within a component's view\n    </li>\n    <li>\n      <strong>ContentChild/ContentChildren:</strong> Query projected content\n    </li>\n    <li>\n      <strong>Change Detection:</strong> How Angular determines when to update the DOM\n    </li>\n    <li>\n      <strong>Dynamic Component Loading:</strong> Creating components programmatically\n    </li>\n    <li>\n      <strong>Zones:</strong> Angular's mechanism for detecting changes\n    </li>\n    <li>\n      <strong>Rendering Pipeline:</strong> How Angular processes templates and updates the DOM\n    </li>\n  </ul>\n\n  <h3>Modern Angular Features Related to View Hierarchy</h3>\n  <ul>\n    <li>\n      <strong>Standalone Components:</strong> Simplifies component organization without NgModules\n    </li>\n    <li>\n      <strong>Signal-based Rendering:</strong> More efficient change detection with fine-grained reactivity\n    </li>\n    <li>\n      <strong>Deferrable Views:</strong> Load components lazily within templates\n    </li>\n    <li>\n      <strong>Hydration:</strong> Reusing server-rendered DOM instead of recreating it\n    </li>\n  </ul>\n</ng-template>\n"],"names":["CommonModule","HighlightModule","UnsubscribeService","i0","ViewHierarchyComponent","constructor","selectors","viewQuery","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}