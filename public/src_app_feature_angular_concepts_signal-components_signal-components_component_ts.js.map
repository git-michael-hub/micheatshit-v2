{"version":3,"file":"src_app_feature_angular_concepts_signal-components_signal-components_component_ts.js","mappings":"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","sources":["./src/app/feature/angular/concepts/signal-components/signal-components.component.ts","./src/app/feature/angular/concepts/signal-components/signal-components.component.html"],"sourcesContent":["import { Component, ViewChild, TemplateRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HighlightModule } from 'ngx-highlightjs';\n\n@Component({\n  selector: 'app-signal-components',\n  standalone: true,\n  imports: [CommonModule, HighlightModule],\n  templateUrl: './signal-components.component.html',\n  styleUrls: ['./signal-components.component.scss']\n})\nexport class SignalComponentsComponent {\n  selectedTab = 1;\n\n  // Template references for the tabs\n  @ViewChild('notesRef') notesRef!: TemplateRef<any>;\n  @ViewChild('bestRef') bestRef!: TemplateRef<any>;\n  @ViewChild('prosConsRef') prosConsRef!: TemplateRef<any>;\n  @ViewChild('topicsRef') topicsRef!: TemplateRef<any>;\n\n  // Code samples for signal components\n  basicSignalComponentCode = `import { Component, input, output, model } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-counter',\n  standalone: true,\n  imports: [CommonModule],\n  template: \\`\n    <div>\n      <h2>Counter: {{ count() }}</h2>\n      <button (click)=\"increment()\">Increment</button>\n      <button (click)=\"decrement()\">Decrement</button>\n    </div>\n  \\`\n})\nexport class CounterComponent {\n  // Input signal with default value\n  max = input(100);\n\n  // Required input signal\n  min = input.required<number>();\n\n  // Model signal for two-way binding\n  count = model(0);\n\n  // Output signal for events\n  countChanged = output<number>();\n\n  increment() {\n    if (this.count() < this.max()) {\n      this.count.update(value => value + 1);\n      this.countChanged.emit(this.count());\n    }\n  }\n\n  decrement() {\n    if (this.count() > this.min()) {\n      this.count.update(value => value - 1);\n      this.countChanged.emit(this.count());\n    }\n  }\n}`;\n\n  signalComponentFeaturesCode = `import { Component, input, output, model, viewChild, viewChildren, computed, effect, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ItemService } from './item.service';\n\n@Component({\n  selector: 'app-item-list',\n  standalone: true,\n  imports: [CommonModule],\n  template: \\`\n    <div>\n      <h2>Items ({{ filteredItems().length }} of {{ items().length }})</h2>\n\n      <label>\n        Filter by category:\n        <select #categoryFilter (change)=\"category.set(categoryFilter.value)\">\n          <option value=\"\">All</option>\n          <option *ngFor=\"let cat of categories()\" [value]=\"cat\">{{ cat }}</option>\n        </select>\n      </label>\n\n      <ul>\n        <li *ngFor=\"let item of filteredItems()\" #itemRef>\n          {{ item.name }} - {{ item.category }}\n        </li>\n      </ul>\n\n      <p>Total value: {{ totalValue() }}</p>\n    </div>\n  \\`\n})\nexport class ItemListComponent {\n  // Inject service\n  private itemService = inject(ItemService);\n\n  // Input with transform\n  items = input<Item[]>([], {\n    transform: (items: Item[]) => items.sort((a, b) => a.name.localeCompare(b.name))\n  });\n\n  // View child as signal\n  categorySelect = viewChild<HTMLSelectElement>('categoryFilter');\n\n  // View children as signal\n  itemElements = viewChildren<HTMLLIElement>('itemRef');\n\n  // Local signal state\n  category = signal('');\n\n  // Computed values\n  categories = computed(() => {\n    const uniqueCategories = new Set<string>();\n    this.items().forEach(item => uniqueCategories.add(item.category));\n    return Array.from(uniqueCategories).sort();\n  });\n\n  filteredItems = computed(() => {\n    const currentCategory = this.category();\n    if (!currentCategory) return this.items();\n    return this.items().filter(item => item.category === currentCategory);\n  });\n\n  totalValue = computed(() => {\n    return this.filteredItems().reduce((sum, item) => sum + item.price, 0);\n  });\n\n  constructor() {\n    // Effect for side effects (e.g., analytics)\n    effect(() => {\n      this.itemService.logCategoryChange(this.category());\n    });\n\n    // Effect with cleanup\n    effect((onCleanup) => {\n      const handler = () => this.category.set('');\n      window.addEventListener('reset-filters', handler);\n\n      // Return cleanup function\n      onCleanup(() => {\n        window.removeEventListener('reset-filters', handler);\n      });\n    });\n  }\n}\n\ninterface Item {\n  name: string;\n  category: string;\n  price: number;\n}`;\n\n  signalComponentPerformanceCode = `import { Component, input, computed, untracked, InputSignal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-performance-example',\n  standalone: true,\n  imports: [CommonModule],\n  template: \\`\n    <div>\n      <h2>Performance Optimized Component</h2>\n      <p>Active items: {{ activeItemCount() }}</p>\n      <p>Rendering {{ visibleItems().length }} of {{ untracked(items).length }} items</p>\n\n      <ul>\n        <li *ngFor=\"let item of visibleItems()\">\n          {{ item.name }} - {{ item.status }}\n        </li>\n      </ul>\n    </div>\n  \\`\n})\nexport class PerformanceExampleComponent {\n  // Input signals\n  items = input<Item[]>([]);\n  filterActive = input(true);\n\n  // Memoize expensive operations\n  private itemsMap = computed(() => {\n    console.log('Building items map - expensive operation');\n    const map = new Map<string, Item>();\n    this.items().forEach(item => map.set(item.id, item));\n    return map;\n  });\n\n  // Computed that depends on a subset of signals\n  activeItemCount = computed(() => {\n    // Using untracked to avoid dependency on the entire items array\n    // when we only care about the count of active items\n    return untracked(this.items).filter(item => item.status === 'active').length;\n  });\n\n  // Optimized computation that tracks only relevant dependencies\n  visibleItems = computed(() => {\n    const showActive = this.filterActive();\n\n    // Only re-compute when filterActive changes or items relevantly change\n    if (showActive) {\n      return this.items().filter(item => item.status === 'active');\n    } else {\n      return this.items();\n    }\n  });\n\n  // Getting a single item without tracking the entire items array\n  getItem(id: string): Item | undefined {\n    return this.itemsMap().get(id);\n  }\n}\n\ninterface Item {\n  id: string;\n  name: string;\n  status: 'active' | 'inactive';\n}`;\n\n  v19EnhancementsCode = `import { Component, input, output, model, viewChild, computed, signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// Angular 19 component (fully reactive, standalone by default)\n@Component({\n  selector: 'app-v19-counter',\n  // Standalone is now the default in Angular 19\n  // No need for imports array with automatic module detection\n  template: \\`\n    <div>\n      <h2>Enhanced Counter: {{ count() }}</h2>\n      <p>Squared value: {{ squared() }}</p>\n\n      <div class=\"controls\">\n        <button (click)=\"increment()\">Increment</button>\n        <button (click)=\"reset()\">Reset to Initial</button>\n      </div>\n\n      <div class=\"config\" *ngIf=\"showConfig()\">\n        <label>\n          Initial Value:\n          <input type=\"number\" [value]=\"initialValue()\"\n                (input)=\"setInitialValue($event)\">\n        </label>\n        <button (click)=\"applyInitialValue()\">Apply</button>\n      </div>\n\n      <button (click)=\"toggleConfig()\">\n        {{ showConfig() ? 'Hide' : 'Show' }} Config\n      </button>\n    </div>\n  \\`\n})\nexport class V19CounterComponent {\n  // Input with validation and transform\n  initialValue = input(0, {\n    // Additional type checking with alias support\n    alias: 'startValue',\n    transform: (value: number) => {\n      // Validate and transform input\n      return Math.max(0, Math.round(value));\n    }\n  });\n\n  // Private signals\n  #count = signal(this.initialValue());\n  #showConfig = signal(false);\n\n  // Public API (readonly for template)\n  count = this.#count.asReadonly();\n  showConfig = this.#showConfig.asReadonly();\n\n  // Two-way binding model\n  theme = model<'light' | 'dark'>('light');\n\n  // Computed value\n  squared = computed(() => this.count() * this.count());\n\n  // ViewChild as signal\n  counterDisplay = viewChild<HTMLHeadingElement>('counterDisplay');\n\n  // Methods\n  increment() {\n    this.#count.update(c => c + 1);\n  }\n\n  reset() {\n    this.#count.set(this.initialValue());\n  }\n\n  toggleConfig() {\n    this.#showConfig.update(show => !show);\n  }\n\n  setInitialValue(event: Event) {\n    const value = Number((event.target as HTMLInputElement).value);\n    this.initialValue.set(value);\n  }\n\n  applyInitialValue() {\n    this.reset();\n  }\n}`;\n}\n","<section class=\"p-4 text-sm\">\n  <p class=\"heading-1 mb-2\">\n    Signal-Based Components\n  </p>\n\n  <div class=\"text-content\">\n    <p>\n      <span class=\"text-zinc-50 tw-font-medium\">Signal-Based Components</span>\n      in Angular 19 introduce a fully reactive programming model for building web interfaces. This new component architecture leverages signals for fine-grained reactivity, offering improved performance, simplified two-way binding, and better developer experience through a streamlined API surface.\n    </p>\n\n    <br>\n\n    <div class=\"flex flex-col\">\n      <div class=\"flex border-b border-gray-200\">\n        <button (click)=\"selectedTab = 1\" [class.text-rose-300]=\"selectedTab===1\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Notes\n        </button>\n        <button (click)=\"selectedTab = 2\" [class.text-rose-300]=\"selectedTab===2\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Best Practices\n        </button>\n        <button (click)=\"selectedTab = 3\" [class.text-rose-300]=\"selectedTab===3\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Pros and Cons\n        </button>\n        <button (click)=\"selectedTab = 4\" [class.text-rose-300]=\"selectedTab===4\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Related Topics\n        </button>\n      </div>\n      <div class=\"p-4\">\n        <ng-container [ngSwitch]=\"selectedTab\">\n          <div *ngSwitchCase=\"2\">\n            <ng-container *ngTemplateOutlet=\"bestRef\"></ng-container>\n          </div>\n          <div *ngSwitchCase=\"3\">\n            <ng-container *ngTemplateOutlet=\"prosConsRef\"></ng-container>\n          </div>\n          <div *ngSwitchCase=\"4\">\n            <ng-container *ngTemplateOutlet=\"topicsRef\"></ng-container>\n          </div>\n          <div *ngSwitchDefault>\n            <ng-container *ngTemplateOutlet=\"notesRef\"></ng-container>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n\n  </div>\n</section>\n\n<ng-template #notesRef>\n  <p>What are Signal-Based Components?</p>\n  <ul class=\"list-disc pl-4 text-sm\">\n    <li>\n      <strong>Reactive Programming Model</strong>:\n      Components built using Angular's signals system, offering fine-grained reactivity and improved change detection.\n    </li>\n    <li>\n      <strong>Simplified API</strong>:\n      Streamlined API for inputs, outputs, models (two-way binding), and view queries.\n    </li>\n    <li>\n      <strong>Improved Performance</strong>:\n      Better performance through fine-grained reactivity and more efficient change detection.\n    </li>\n    <li>\n      <strong>Enhanced Developer Experience</strong>:\n      More intuitive programming model with a functional approach to reactivity.\n    </li>\n  </ul>\n\n  <br>\n  <br>\n\n  <p>Basic Signal Component Example</p>\n  <button (click)=\"code1.hidden = !code1.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n\n  <span #code1 hidden copyToClipboard>\n    <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n      <span>typescript</span>\n      <span class=\"copy-button-wrapper bg-gray-700\"></span>\n    </div>\n\n    <pre>\n      <code\n        [highlight]=\"basicSignalComponentCode\"\n        [languages]=\"['typescript']\">\n      </code>\n    </pre>\n  </span>\n\n  <br>\n  <br>\n\n  <p>Advanced Signal Component Features</p>\n  <button (click)=\"code2.hidden = !code2.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n\n  <span #code2 hidden copyToClipboard>\n    <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n      <span>typescript</span>\n      <span class=\"copy-button-wrapper bg-gray-700\"></span>\n    </div>\n\n    <pre>\n      <code\n        [highlight]=\"signalComponentFeaturesCode\"\n        [languages]=\"['typescript']\">\n      </code>\n    </pre>\n  </span>\n\n  <br>\n  <br>\n\n  <p>Performance Optimizations with Signal Components</p>\n  <button (click)=\"code3.hidden = !code3.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n\n  <span #code3 hidden copyToClipboard>\n    <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n      <span>typescript</span>\n      <span class=\"copy-button-wrapper bg-gray-700\"></span>\n    </div>\n\n    <pre>\n      <code\n        [highlight]=\"signalComponentPerformanceCode\"\n        [languages]=\"['typescript']\">\n      </code>\n    </pre>\n  </span>\n\n  <br>\n  <br>\n\n  <p>Angular 19 Signal Component System</p>\n  <button (click)=\"code4.hidden = !code4.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n\n  <span #code4 hidden copyToClipboard>\n    <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n      <span>typescript</span>\n      <span class=\"copy-button-wrapper bg-gray-700\"></span>\n    </div>\n\n    <pre>\n      <code\n        [highlight]=\"v19EnhancementsCode\"\n        [languages]=\"['typescript']\">\n      </code>\n    </pre>\n  </span>\n\n  <br>\n  <br>\n\n  <p>Key Features of Signal-Based Components in Angular 19</p>\n  <ol class=\"list-decimal pl-4 text-sm\">\n    <li>\n      <strong>Signal-Based Inputs and Outputs</strong>:\n      <ul class=\"list-disc pl-4\">\n        <li>Input signals with default values: <code>maxValue = input(100)</code></li>\n        <li>Required inputs: <code>userId = input.required&lt;string&gt;()</code></li>\n        <li>Input transforms for validation and conversion</li>\n        <li>Output signals for events: <code>countChanged = output&lt;number&gt;()</code></li>\n      </ul>\n    </li>\n    <li>\n      <strong>Model Signal for Two-Way Binding</strong>:\n      <ul class=\"list-disc pl-4\">\n        <li>Simplified two-way binding with model signals: <code>count = model(0)</code></li>\n        <li>Use with <code>[(property)]</code> in templates for cleaner binding syntax</li>\n        <li>Automatic update propagation both ways</li>\n      </ul>\n    </li>\n    <li>\n      <strong>View Queries as Signals</strong>:\n      <ul class=\"list-disc pl-4\">\n        <li>ViewChild as signal: <code>element = viewChild('elementRef')</code></li>\n        <li>ViewChildren as signal: <code>items = viewChildren('itemRef')</code></li>\n        <li>Reactive updates when queries change</li>\n      </ul>\n    </li>\n    <li>\n      <strong>Computed Values and Effects</strong>:\n      <ul class=\"list-disc pl-4\">\n        <li>Computed signals for derived state: <code>doubled = computed(() => count() * 2)</code></li>\n        <li>Effects for side effects: <code>effect(() => {{ '{' }} ... {{ '}' }})</code></li>\n        <li>Automatic cleanup of effects when component is destroyed</li>\n      </ul>\n    </li>\n    <li>\n      <strong>Dependency Injection Integration</strong>:\n      <ul class=\"list-disc pl-4\">\n        <li>Simplified DI with inject function: <code>service = inject(Service)</code></li>\n        <li>No more constructor parameter injection needed</li>\n        <li>Better tree-shaking and improved bundle size</li>\n      </ul>\n    </li>\n  </ol>\n\n  <br>\n  <br>\n\n  <p>Performance Comparison: Signal Components vs NgOnChanges</p>\n  <table class=\"w-full border-collapse rounded-lg overflow-hidden shadow-md\">\n    <thead>\n      <tr class=\"bg-gray-800 text-gray-100\">\n        <th class=\"py-3 px-4 text-left\">Aspect</th>\n        <th class=\"py-3 px-4 text-left\">Signal Components</th>\n        <th class=\"py-3 px-4 text-left\">Traditional Components</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr class=\"border-b border-gray-700 bg-gray-900 hover:bg-gray-800 transition-colors\">\n        <td class=\"py-3 px-4\">Change Detection</td>\n        <td class=\"py-3 px-4\">Fine-grained, only affected signals</td>\n        <td class=\"py-3 px-4\">Component-level, often causes unnecessary checks</td>\n      </tr>\n      <tr class=\"border-b border-gray-700 bg-gray-950 hover:bg-gray-800 transition-colors\">\n        <td class=\"py-3 px-4\">Component Reactivity</td>\n        <td class=\"py-3 px-4\">Automatic, based on signal dependencies</td>\n        <td class=\"py-3 px-4\">Manual, requires ngOnChanges handling</td>\n      </tr>\n      <tr class=\"border-b border-gray-700 bg-gray-900 hover:bg-gray-800 transition-colors\">\n        <td class=\"py-3 px-4\">Memory Usage</td>\n        <td class=\"py-3 px-4\">Lower, no change detection tree traversal</td>\n        <td class=\"py-3 px-4\">Higher, especially in large component trees</td>\n      </tr>\n      <tr class=\"bg-gray-950 hover:bg-gray-800 transition-colors\">\n        <td class=\"py-3 px-4\">Bundle Size</td>\n        <td class=\"py-3 px-4\">Smaller due to tree-shaking improvements</td>\n        <td class=\"py-3 px-4\">Larger, especially with decorator metadata</td>\n      </tr>\n    </tbody>\n  </table>\n</ng-template>\n\n<ng-template #bestRef>\n  <ol class=\"list-decimal px-4 text-sm\">\n    <li>\n      <strong class=\"text-sky-400\">Design with Signals in Mind</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong>Signal-First Architecture</strong>:\n          Start by defining your component's state as signals, and build from there.\n        </li>\n        <li>\n          <strong>Minimize Stateful Services</strong>:\n          Prefer injecting stateless services and managing state with signals in components.\n        </li>\n        <li>\n          <strong>Single Source of Truth</strong>:\n          Keep related state in one signal rather than spreading it across multiple signals.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong class=\"text-sky-400\">Optimize Computed Signals</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong>Keep Computations Pure</strong>:\n          Avoid side effects in computed signals; use effects for side effects instead.\n        </li>\n        <li>\n          <strong>Granular Computations</strong>:\n          Break complex computations into smaller, reusable computed signals.\n        </li>\n        <li>\n          <strong>Use Untracked When Needed</strong>:\n          Use <code>untracked()</code> to prevent unnecessary dependencies in computed signals.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong class=\"text-sky-400\">Manage Effects Carefully</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong>Return Cleanup Functions</strong>:\n          Always return cleanup functions from effects when subscribing to external resources.\n        </li>\n        <li>\n          <strong>Avoid Complex Logic</strong>:\n          Keep effects focused on side effects, not complex state transformations.\n        </li>\n        <li>\n          <strong>Batch Updates</strong>:\n          Group signal updates to minimize the number of effect executions.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong class=\"text-sky-400\">Input/Output Best Practices</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong>Use Default Values</strong>:\n          Provide sensible defaults for input signals when possible.\n        </li>\n        <li>\n          <strong>Consider Required Inputs</strong>:\n          Use <code>input.required()</code> for truly required inputs to catch missing inputs early.\n        </li>\n        <li>\n          <strong>Transform Inputs When Needed</strong>:\n          Use input transform functions to validate or convert incoming values.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong class=\"text-sky-400\">Component Integration</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong>Use Models for Two-Way Binding</strong>:\n          Leverage model signals for clean two-way binding between components.\n        </li>\n        <li>\n          <strong>Connect with Zoneless Applications</strong>:\n          Signal components work perfectly with zoneless applications for maximum performance.\n        </li>\n        <li>\n          <strong>Combine with Partial Hydration</strong>:\n          Use signal components with partial hydration for optimal SSR performance.\n        </li>\n      </ul>\n    </li>\n  </ol>\n</ng-template>\n\n<ng-template #prosConsRef>\n  <strong class=\"text-sky-400\">\n    Pros:\n  </strong>\n\n  <br>\n\n  <ol class=\"list-decimal px-10 text-sm\">\n    <li>\n      <strong>Performance Improvements</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Fine-Grained Reactivity</span>:\n          Only the parts of the UI that depend on changed signals are updated, reducing unnecessary work.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Simplified Change Detection</span>:\n          No need for OnPush strategy or managing change detection manually.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Smaller Bundle Size</span>:\n          Better tree-shaking and less decorator metadata lead to smaller application bundles.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Developer Experience</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Intuitive API</span>:\n          Clear, functional API for inputs, outputs, computed values, and side effects.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Improved Type Safety</span>:\n          Better TypeScript integration with less reliance on string literals and generics.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Clear Data Flow</span>:\n          Signal dependencies make it easier to understand and trace data flow in components.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Modern Reactivity Model</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Automatic Dependency Tracking</span>:\n          Computed signals and effects automatically track their dependencies.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Simplified Two-Way Binding</span>:\n          Model signals make two-way binding cleaner and more intuitive.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Reactive View Queries</span>:\n          ViewChild and ViewChildren as signals provide reactive access to DOM elements.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Integration with Angular 19 Features</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Zoneless Applications</span>:\n          Perfect for use in zoneless applications for ultimate performance.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Partial Hydration</span>:\n          Works seamlessly with partial hydration for optimized SSR applications.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Control Flow Integration</span>:\n          Clean integration with built-in control flow syntax for purely declarative templates.\n        </li>\n      </ul>\n    </li>\n  </ol>\n\n  <br>\n  <br>\n\n  <strong class=\"text-sky-400\">\n    Cons:\n  </strong>\n\n  <br>\n\n  <ol class=\"list-decimal px-10 text-sm\">\n    <li>\n      <strong>Learning Curve</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">New Programming Model</span>:\n          Requires learning and adapting to a different way of building components.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Reactive Thinking</span>:\n          Developers need to think reactively, which may be challenging for some.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Migration Effort</span>:\n          Converting existing components to the signal-based approach requires effort.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Potential Pitfalls</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Signal Overuse</span>:\n          Creating too many fine-grained signals can lead to complex component logic.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Effect Side Effects</span>:\n          Improper use of effects can lead to infinite update loops or other unexpected behavior.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Mental Model Shift</span>:\n          Moving between traditional and signal-based components in the same application can be confusing.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Ecosystem Integration</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Library Support</span>:\n          Some third-party libraries may not yet be optimized for signal-based components.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Tools and Testing</span>:\n          Testing tools and methodologies may need updates to work optimally with signal components.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Documentation and Resources</span>:\n          Fewer examples and resources compared to traditional components (though rapidly improving).\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Transition Challenges</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Mixed Component Types</span>:\n          Managing applications with both traditional and signal-based components can be challenging.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Training and Adoption</span>:\n          Teams need time and resources to adopt and become proficient with the new approach.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Legacy Integration</span>:\n          Integrating with legacy code or libraries optimized for the traditional component model.\n        </li>\n      </ul>\n    </li>\n  </ol>\n</ng-template>\n\n<ng-template #topicsRef>\n  <ol class=\"list-decimal px-10 text-sm\">\n    <li>\n      <strong>Signals</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Angular's reactive primitives for state management introduced in Angular 16+.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Signal Components</strong>:\n          Signal Components are built on and extend the basic signals system, providing a complete component model.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Zoneless Applications</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Angular applications that run without Zone.js, using explicit change detection.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Signal Components</strong>:\n          Signal Components provide the ideal programming model for zoneless applications, as they handle their own change detection.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Reactive Programming</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Programming paradigm focused on data streams and propagation of change.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Signal Components</strong>:\n          Signal Components implement reactive programming principles within the Angular component model.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Partial Hydration</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Technique to selectively hydrate server-rendered components based on need.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Signal Components</strong>:\n          Signal Components work well with partial hydration for fine-grained control over which parts of an app become interactive.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Two-Way Binding</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Data binding that works in both directions between parent and child components.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Signal Components</strong>:\n          Signal Components introduce model signals, a cleaner approach to two-way binding with <code>[(property)]</code> syntax.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>RxJS and Observables</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Library for reactive programming using Observables to compose asynchronous code.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Signal Components</strong>:\n          While different in API, both signals and RxJS provide reactive programming models, and can be used together.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Change Detection</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Angular's mechanism for updating the DOM when component data changes.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Signal Components</strong>:\n          Signal Components provide fine-grained, automatic change detection, eliminating the need for manual change detection management.\n        </li>\n      </ul>\n    </li>\n  </ol>\n</ng-template>\n"],"names":["CommonModule","HighlightModule","i0","SignalComponentsComponent","constructor","selectors","viewQuery","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}