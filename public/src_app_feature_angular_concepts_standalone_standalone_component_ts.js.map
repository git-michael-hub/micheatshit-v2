{"version":3,"file":"src_app_feature_angular_concepts_standalone_standalone_component_ts.js","mappings":"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","sources":["./src/app/feature/angular/concepts/standalone/standalone.component.ts","./src/app/feature/angular/concepts/standalone/standalone.component.html"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Component, ViewChild, TemplateRef } from '@angular/core';\nimport { HighlightModule } from 'ngx-highlightjs';\nimport { UnsubscribeService } from 'src/app/utils/services/unsubscribe.service';\n\n@Component({\n  selector: 'app-standalone',\n  standalone: true,\n  imports: [CommonModule, HighlightModule],\n  templateUrl: './standalone.component.html',\n  styleUrls: ['./standalone.component.scss']\n})\nexport class StandaloneComponent extends UnsubscribeService {\n  selectedTab = 'notes';\n\n  @ViewChild('notesTemplate', { static: true }) notesTemplate!: TemplateRef<any>;\n  @ViewChild('bestPracticesTemplate', { static: true }) bestPracticesTemplate!: TemplateRef<any>;\n  @ViewChild('prosConsTemplate', { static: true }) prosConsTemplate!: TemplateRef<any>;\n  @ViewChild('relatedTopicsTemplate', { static: true }) relatedTopicsTemplate!: TemplateRef<any>;\n\n  standaloneComponentCode = `// Standalone component example\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { UserProfileComponent } from './user-profile.component';\n\n@Component({\n  selector: 'app-dashboard',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    UserProfileComponent\n  ],\n  template: \\`\n    <div class=\"dashboard\">\n      <h1>Welcome to your Dashboard</h1>\n      <app-user-profile></app-user-profile>\n      <button mat-button>View Statistics</button>\n    </div>\n  \\`\n})\nexport class DashboardComponent { }`;\n\n  bootstrapCode = `// main.ts\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { provideRouter } from '@angular/router';\nimport { routes } from './app/app.routes';\nimport { provideAnimations } from '@angular/platform-browser/animations';\n\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideRouter(routes),\n    provideAnimations()\n  ]\n}).catch(err => console.error(err));`;\n\n  standaloneRoutesCode = `// app.routes.ts\nimport { Routes } from '@angular/router';\n\nexport const routes: Routes = [\n  {\n    path: 'dashboard',\n    loadComponent: () => import('./dashboard/dashboard.component')\n      .then(c => c.DashboardComponent)\n  },\n  {\n    path: 'settings',\n    loadComponent: () => import('./settings/settings.component')\n      .then(c => c.SettingsComponent)\n  }\n];`;\n\n  providersCode = `// app.config.ts\nimport { ApplicationConfig } from '@angular/core';\nimport { provideRouter } from '@angular/router';\nimport { routes } from './app.routes';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\nimport { provideAnimations } from '@angular/platform-browser/animations';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideRouter(routes),\n    provideHttpClient(withInterceptorsFromDi()),\n    provideAnimations()\n  ]\n};`;\n\n  dependencyInjectionCode = `// Dependency injection in standalone components\nimport { Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UserService } from '../services/user.service';\n\n@Component({\n  selector: 'app-user-profile',\n  standalone: true,\n  imports: [CommonModule],\n  template: \\`\n    <div *ngIf=\"user$ | async as user\">\n      <h2>{{ user.name }}</h2>\n      <p>{{ user.email }}</p>\n    </div>\n  \\`\n})\nexport class UserProfileComponent {\n  // Inject service using the inject function\n  private userService = inject(UserService);\n  user$ = this.userService.getCurrentUser();\n}`;\n}\n","<div class=\"container\">\n  <h1>Standalone Components in Angular</h1>\n  <p>\n    Standalone components are a feature in Angular that allows components, directives, and pipes to be used without declaring them in an NgModule. This simplifies the component architecture and makes Angular development more intuitive.\n  </p>\n\n  <div class=\"tab-navigation\">\n    <button\n      type=\"button\"\n      [class.active]=\"selectedTab === 'notes'\"\n      (click)=\"selectedTab = 'notes'\">\n      Notes\n    </button>\n    <button\n      type=\"button\"\n      [class.active]=\"selectedTab === 'bestPractices'\"\n      (click)=\"selectedTab = 'bestPractices'\">\n      Best Practices\n    </button>\n    <button\n      type=\"button\"\n      [class.active]=\"selectedTab === 'prosCons'\"\n      (click)=\"selectedTab = 'prosCons'\">\n      Pros and Cons\n    </button>\n    <button\n      type=\"button\"\n      [class.active]=\"selectedTab === 'relatedTopics'\"\n      (click)=\"selectedTab = 'relatedTopics'\">\n      Related Topics\n    </button>\n  </div>\n\n  <ng-container [ngSwitch]=\"selectedTab\">\n    <ng-container *ngSwitchCase=\"'notes'\">\n      <ng-container *ngTemplateOutlet=\"notesTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'bestPractices'\">\n      <ng-container *ngTemplateOutlet=\"bestPracticesTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'prosCons'\">\n      <ng-container *ngTemplateOutlet=\"prosConsTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'relatedTopics'\">\n      <ng-container *ngTemplateOutlet=\"relatedTopicsTemplate\"></ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n\n<ng-template #notesTemplate>\n  <h2>Overview</h2>\n  <p>\n    Standalone components are a simplified way of building Angular applications without explicitly creating and managing NgModules for each component. They were introduced to reduce boilerplate code and make the framework more intuitive.\n  </p>\n\n  <h3>Creating a Standalone Component</h3>\n  <div class=\"code-example\">\n    <pre><code [highlight]=\"standaloneComponentCode\" [languages]=\"['typescript']\"></code></pre>\n  </div>\n\n  <h3>Key Features of Standalone Components</h3>\n  <ul class=\"feature-list\">\n    <li>\n      <strong>Self-contained:</strong> A standalone component declares its own dependencies.\n    </li>\n    <li>\n      <strong>No NgModule required:</strong> Components can be used without being declared in an NgModule.\n    </li>\n    <li>\n      <strong>Direct imports:</strong> Components can directly import other components, directives, and pipes.\n    </li>\n    <li>\n      <strong>Simplified lazy loading:</strong> Makes it easier to lazy load components in routes.\n    </li>\n    <li>\n      <strong>Better tree-shaking:</strong> Allows the build system to more efficiently eliminate unused code.\n    </li>\n  </ul>\n\n  <h3>Bootstrapping a Standalone Application</h3>\n  <div class=\"code-example\">\n    <pre><code [highlight]=\"bootstrapCode\" [languages]=\"['typescript']\"></code></pre>\n  </div>\n\n  <h3>Routing with Standalone Components</h3>\n  <div class=\"code-example\">\n    <pre><code [highlight]=\"standaloneRoutesCode\" [languages]=\"['typescript']\"></code></pre>\n  </div>\n\n  <h3>Configuring Providers</h3>\n  <div class=\"code-example\">\n    <pre><code [highlight]=\"providersCode\" [languages]=\"['typescript']\"></code></pre>\n  </div>\n\n  <h3>Dependency Injection</h3>\n  <div class=\"code-example\">\n    <pre><code [highlight]=\"dependencyInjectionCode\" [languages]=\"['typescript']\"></code></pre>\n  </div>\n</ng-template>\n\n<ng-template #bestPracticesTemplate>\n  <h2>Best Practices</h2>\n\n  <h3>Organization</h3>\n  <ul>\n    <li>\n      <strong>Feature-based organization:</strong> Group related standalone components, directives, and pipes by feature.\n    </li>\n    <li>\n      <strong>Public API pattern:</strong> Use barrel files (index.ts) to export multiple related standalone components.\n    </li>\n    <li>\n      <strong>Keep imports lean:</strong> Only import what you need to minimize bundle size.\n    </li>\n    <li>\n      <strong>Be mindful of circular dependencies:</strong> They can be more common with standalone components, so structure your code carefully.\n    </li>\n  </ul>\n\n  <h3>Migration Strategy</h3>\n  <ul>\n    <li>\n      <strong>Incremental adoption:</strong> Migrate to standalone components gradually, starting with leaf components.\n    </li>\n    <li>\n      <strong>Use the standalone migration schematic:</strong> Angular provides schematics to help migrate NgModule-based components to standalone.\n    </li>\n    <li>\n      <strong>Test thoroughly:</strong> Ensure components still work correctly after migration.\n    </li>\n  </ul>\n\n  <h3>Performance</h3>\n  <ul>\n    <li>\n      <strong>Lazy load when possible:</strong> Standalone components make it easier to implement lazy loading.\n    </li>\n    <li>\n      <strong>Share common dependencies:</strong> Use shared imports for common modules to avoid duplication.\n    </li>\n    <li>\n      <strong>Use library-level providers:</strong> For services shared across many components.\n    </li>\n  </ul>\n\n  <div class=\"workflow-diagram\">\n    <h4>Recommended Development Workflow:</h4>\n    <ol>\n      <li>Identify a feature to implement</li>\n      <li>Create standalone components, directives, and pipes for the feature</li>\n      <li>Use an index.ts file to export all public API elements</li>\n      <li>Import only what's needed in each component</li>\n      <li>Add route configurations if needed</li>\n      <li>Configure providers at the appropriate level</li>\n    </ol>\n  </div>\n</ng-template>\n\n<ng-template #prosConsTemplate>\n  <h2>Pros and Cons</h2>\n\n  <h3>Advantages</h3>\n  <ul>\n    <li><strong>Reduced Boilerplate:</strong> Eliminates the need for NgModules in many cases</li>\n    <li><strong>Simplified Mental Model:</strong> More intuitive component architecture</li>\n    <li><strong>Improved Developer Experience:</strong> Easier to understand what dependencies a component has</li>\n    <li><strong>Better Tree Shaking:</strong> More efficient build optimization</li>\n    <li><strong>Easier Lazy Loading:</strong> Simplified route configuration</li>\n    <li><strong>Smoother Migration Path:</strong> Can coexist with NgModule-based components</li>\n  </ul>\n\n  <h3>Challenges</h3>\n  <ul>\n    <li><strong>Potential for Duplication:</strong> Services might be provided multiple times if not careful</li>\n    <li><strong>Transition Period:</strong> Applications may mix NgModule-based and standalone components</li>\n    <li><strong>Learning Curve:</strong> For developers familiar with NgModule patterns</li>\n    <li><strong>Configuration Management:</strong> Need to manage providers carefully</li>\n  </ul>\n\n  <h3>Standalone vs. NgModule Comparison</h3>\n  <table class=\"comparison-table\">\n    <thead>\n      <tr>\n        <th>Feature</th>\n        <th>Standalone Components</th>\n        <th>NgModule-based Components</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Declaration</td>\n        <td>Self-declared with standalone: true</td>\n        <td>Must be declared in an NgModule</td>\n      </tr>\n      <tr>\n        <td>Dependency Management</td>\n        <td>Direct imports in @Component</td>\n        <td>Via NgModule imports</td>\n      </tr>\n      <tr>\n        <td>Lazy Loading</td>\n        <td>Direct component loading</td>\n        <td>Module-based loading</td>\n      </tr>\n      <tr>\n        <td>Provider Scope</td>\n        <td>Component, route, or application</td>\n        <td>NgModule (root, feature, or component)</td>\n      </tr>\n      <tr>\n        <td>Testing</td>\n        <td>Simpler test setup</td>\n        <td>Requires TestBed with modules</td>\n      </tr>\n      <tr>\n        <td>Library Creation</td>\n        <td>More flexible export options</td>\n        <td>Public API through modules</td>\n      </tr>\n    </tbody>\n  </table>\n</ng-template>\n\n<ng-template #relatedTopicsTemplate>\n  <h2>Related Topics</h2>\n\n  <ul>\n    <li>\n      <strong>Angular Modules:</strong> The previous way of organizing components, still used for some cases.\n    </li>\n    <li>\n      <strong>Dependency Injection:</strong> The system for providing services to components.\n    </li>\n    <li>\n      <strong>Routing in Angular:</strong> How to set up navigation with standalone components.\n    </li>\n    <li>\n      <strong>Lazy Loading:</strong> Loading components or features only when needed.\n    </li>\n    <li>\n      <strong>Tree Shaking:</strong> Build optimization technique to remove unused code.\n    </li>\n    <li>\n      <strong>Angular Libraries:</strong> Building and sharing reusable standalone components.\n    </li>\n    <li>\n      <strong>Signal-based Components:</strong> New reactive programming model that works well with standalone components.\n    </li>\n    <li>\n      <strong>Testing:</strong> How to test standalone components effectively.\n    </li>\n  </ul>\n\n  <h3>Changes in Angular 19</h3>\n  <p>\n    Angular 19 enhances standalone components with:\n  </p>\n  <ul>\n    <li>Improved tooling and schematics for migration</li>\n    <li>Better integration with signals</li>\n    <li>Enhanced performance through more efficient change detection</li>\n    <li>Simplified bootstrapping process</li>\n    <li>Better support for Server-Side Rendering (SSR) and hydration</li>\n  </ul>\n</ng-template>\n"],"names":["CommonModule","HighlightModule","UnsubscribeService","i0","StandaloneComponent","constructor","selectors","viewQuery","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}