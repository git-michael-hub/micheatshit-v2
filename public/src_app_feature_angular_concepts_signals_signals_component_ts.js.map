{"version":3,"file":"src_app_feature_angular_concepts_signals_signals_component_ts.js","mappings":"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","sources":["./src/app/feature/angular/concepts/signals/signals.component.ts","./src/app/feature/angular/concepts/signals/signals.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, ViewChild, TemplateRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HighlightModule } from 'ngx-highlightjs';\nimport { UnsubscribeService } from 'src/app/utils/services/unsubscribe.service';\nimport { takeUntil } from 'rxjs';\n\n@Component({\n  selector: 'app-signals',\n  standalone: true,\n  imports: [CommonModule, HighlightModule],\n  templateUrl: './signals.component.html',\n  styleUrls: ['./signals.component.scss']\n})\nexport class SignalsComponent extends UnsubscribeService {\n  selectedTab = 1;\n\n  // Template references for the tabs\n  @ViewChild('notesRef') notesRef!: TemplateRef<any>;\n  @ViewChild('bestRef') bestRef!: TemplateRef<any>;\n  @ViewChild('prosConsRef') prosConsRef!: TemplateRef<any>;\n  @ViewChild('topicsRef') topicsRef!: TemplateRef<any>;\n\n  // Code examples for signals\n  basicSignalCode = `import { signal, computed, effect } from '@angular/core';\n\n// Create a signal with an initial value\nconst count = signal(0);\n\n// Read the signal's value\nconsole.log(count()); // 0\n\n// Update the signal's value\ncount.set(5);\nconsole.log(count()); // 5\n\n// Update based on the previous value\ncount.update(value => value + 1);\nconsole.log(count()); // 6\n\n// Create a computed signal that depends on another signal\nconst doubled = computed(() => count() * 2);\nconsole.log(doubled()); // 12\n\n// Effect that runs when any of its dependencies change\neffect(() => {\n  console.log(\\`The count is \\${count()} and doubled is \\${doubled()}\\`);\n  // The count is 6 and doubled is 12\n});\n\n// When we update the count, the effect runs again automatically\ncount.set(10);\n// Effect logs: The count is 10 and doubled is 20`;\n\n  signalComponentsCode = `import { Component, signal, computed, effect } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-counter',\n  standalone: true,\n  imports: [CommonModule],\n  template: \\`\n    <div>\n      <h2>Counter: {{ count() }}</h2>\n      <p>Doubled: {{ doubled() }}</p>\n      <button (click)=\"increment()\">Increment</button>\n    </div>\n  \\`\n})\nexport class CounterComponent {\n  // Signal for component state\n  count = signal(0);\n\n  // Computed signal derived from count\n  doubled = computed(() => count() * 2);\n\n  constructor() {\n    // Effect runs whenever count changes\n    effect(() => {\n      console.log(\\`Counter changed to \\${this.count()}\\`);\n    });\n  }\n\n  increment() {\n    this.count.update(n => n + 1);\n  }\n}`;\n\n  advancedSignalsCode = `import { signal, computed, effect, untracked, Signal } from '@angular/core';\n\n// 1. Signal with custom equality function\nconst user = signal({ name: 'Alice', age: 30 }, {\n  equal: (a, b) => a.name === b.name && a.age === b.age\n});\n\n// Now only changes to name or age will trigger updates\nuser.set({ name: 'Alice', age: 30 }); // No notifications\nuser.set({ name: 'Bob', age: 30 }); // Triggers updates\n\n// 2. Signal wrapping\n// Convert a value to a read-only signal\nfunction wrap<T>(value: T): Signal<T> {\n  const sig = signal(value);\n  return () => sig();\n}\n\nconst readOnly = wrap('hello');\nconsole.log(readOnly()); // 'hello'\n// readOnly.set('world'); // Error: readOnly is not a WritableSignal\n\n// 3. Untracked to prevent dependencies\nconst count = signal(0);\nconst name = signal('Alice');\n\nconst message = computed(() => {\n  // Only depends on count, not name\n  return \\`Count: \\${count()}, User: \\${untracked(() => name())}\\`;\n});\n\n// 4. Effect cleanup\neffect((onCleanup) => {\n  const intervalId = setInterval(() => {\n    console.log(count());\n  }, 1000);\n\n  // Cleanup function runs before the next effect execution\n  // or when the effect is destroyed\n  onCleanup(() => {\n    clearInterval(intervalId);\n  });\n});`;\n\n  v19EnhancementsCode = `// Angular 19 Signal Enhancements\n\n// 1. Signal-based Component Inputs\nimport { Component, input, model } from '@angular/core';\n\n@Component({\n  selector: 'app-user-card',\n  template: \\`<div>{{ name() }}</div>\\`\n})\nexport class UserCardComponent {\n  // Signal-based input with default value\n  name = input('Guest');\n\n  // Required input with type\n  userId = input.required<string>();\n\n  // Input with transform function\n  age = input(0, {\n    transform: (value: number) => Math.max(0, value)\n  });\n\n  // Two-way binding with model signal\n  isActive = model(false);\n}\n\n// 2. Read-only signals with asReadonly\nimport { signal } from '@angular/core';\n\nconst counter = signal(0);\n// Create a read-only version of the signal\nconst readonlyCounter = counter.asReadonly();\n\ncounter.update(v => v + 1); // Works fine\n// readonlyCounter.update(v => v + 1); // Error: no update method\n\n// 3. Improved type-safety\nimport { signal, computed, effect } from '@angular/core';\n\n// Signal generic types are properly preserved\nconst items = signal<string[]>([]);\nitems.update(arr => [...arr, 'new item']);\n\n// Type checking in computed values\nconst itemCount = computed(() => items().length);\n\n// Type inference in effects\neffect(() => {\n  const currentItems: string[] = items(); // Type is inferred correctly\n  console.log(\\`There are \\${itemCount()} items\\`);\n});\n\n// 4. Enhanced Developer Experience\n// Better error messages for common mistakes\neffect(() => {\n  console.log(items); // Error: Signal accessed without being called\n  console.log(items()); // Correct: Call the signal to get its value\n});`;\n\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  ngOnInit() {\n    // Load code examples from files if needed\n    // Currently using inline examples\n  }\n}\n","<section class=\"p-4 text-sm\">\n  <p class=\"heading-1 mb-2\">\n    Signals\n  </p>\n\n  <div class=\"text-content\">\n    <p>\n      <span class=\"text-zinc-50 tw-font-medium\">Signals</span>\n      in Angular are reactive primitives introduced in Angular 16 and enhanced in Angular 19. They provide a fine-grained reactivity system for tracking state changes, enabling more efficient rendering, improved change detection, and a more intuitive reactive programming model.\n    </p>\n\n    <br>\n\n    <div class=\"flex flex-col\">\n      <div class=\"flex border-b border-gray-200\">\n        <button (click)=\"selectedTab = 1\" [class.text-rose-300]=\"selectedTab===1\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Notes\n        </button>\n        <button (click)=\"selectedTab = 2\" [class.text-rose-300]=\"selectedTab===2\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Best Practices\n        </button>\n        <button (click)=\"selectedTab = 3\" [class.text-rose-300]=\"selectedTab===3\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Pros and Cons\n        </button>\n        <button (click)=\"selectedTab = 4\" [class.text-rose-300]=\"selectedTab===4\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Related Topics\n        </button>\n      </div>\n      <div class=\"p-4\">\n        <ng-container [ngSwitch]=\"selectedTab\">\n          <div *ngSwitchCase=\"2\">\n            <ng-container *ngTemplateOutlet=\"bestRef\"></ng-container>\n          </div>\n          <div *ngSwitchCase=\"3\">\n            <ng-container *ngTemplateOutlet=\"prosConsRef\"></ng-container>\n          </div>\n          <div *ngSwitchCase=\"4\">\n            <ng-container *ngTemplateOutlet=\"topicsRef\"></ng-container>\n          </div>\n          <div *ngSwitchDefault>\n            <ng-container *ngTemplateOutlet=\"notesRef\"></ng-container>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n\n  </div>\n</section>\n\n<ng-template #notesRef>\n  <p>What are Angular Signals?</p>\n  <ul class=\"list-disc pl-4 text-sm\">\n    <li>\n      <strong>Reactive Primitives</strong>:\n      Angular Signals are reactive primitives that enable fine-grained tracking of state changes and dependencies between values.\n    </li>\n    <li>\n      <strong>Three Primary Signal Types</strong>:\n      Signals come in three main types: writable signals, computed signals, and effects.\n    </li>\n    <li>\n      <strong>Declarative Reactivity</strong>:\n      They enable a declarative approach to reactivity, where dependencies are automatically tracked and updates propagate efficiently.\n    </li>\n    <li>\n      <strong>Improved Performance</strong>:\n      Angular 19 has significantly improved signal performance, making them suitable for even the most demanding applications.\n    </li>\n  </ul>\n\n  <br>\n  <br>\n\n  <p>Basic Signal Usage</p>\n  <button (click)=\"code1.hidden = !code1.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n\n  <span #code1 hidden copyToClipboard>\n    <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n      <span>typescript</span>\n      <span class=\"copy-button-wrapper bg-gray-700\"></span>\n    </div>\n\n    <pre>\n      <code\n        [highlight]=\"basicSignalCode\"\n        [languages]=\"['typescript']\">\n      </code>\n    </pre>\n  </span>\n\n  <br>\n  <br>\n\n  <p>Signals in Components</p>\n  <button (click)=\"code2.hidden = !code2.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n\n  <span #code2 hidden copyToClipboard>\n    <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n      <span>typescript</span>\n      <span class=\"copy-button-wrapper bg-gray-700\"></span>\n    </div>\n\n    <pre>\n      <code\n        [highlight]=\"signalComponentsCode\"\n        [languages]=\"['typescript']\">\n      </code>\n    </pre>\n  </span>\n\n  <br>\n  <br>\n\n  <p>Advanced Signal Features</p>\n  <button (click)=\"code3.hidden = !code3.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n\n  <span #code3 hidden copyToClipboard>\n    <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n      <span>typescript</span>\n      <span class=\"copy-button-wrapper bg-gray-700\"></span>\n    </div>\n\n    <pre>\n      <code\n        [highlight]=\"advancedSignalsCode\"\n        [languages]=\"['typescript']\">\n      </code>\n    </pre>\n  </span>\n\n  <br>\n  <br>\n\n  <p>Angular 19 Signal Enhancements</p>\n  <button (click)=\"code4.hidden = !code4.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n\n  <span #code4 hidden copyToClipboard>\n    <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n      <span>typescript</span>\n      <span class=\"copy-button-wrapper bg-gray-700\"></span>\n    </div>\n\n    <pre>\n      <code\n        [highlight]=\"v19EnhancementsCode\"\n        [languages]=\"['typescript']\">\n      </code>\n    </pre>\n  </span>\n\n  <br>\n  <br>\n\n  <p>The Three Signal Types</p>\n  <table class=\"w-full border-collapse rounded-lg overflow-hidden shadow-md\">\n    <thead>\n      <tr class=\"bg-gray-800 text-gray-100\">\n        <th class=\"py-3 px-4 text-left\">Signal Type</th>\n        <th class=\"py-3 px-4 text-left\">Description</th>\n        <th class=\"py-3 px-4 text-left\">Key Methods</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr class=\"border-b border-gray-700 bg-gray-900 hover:bg-gray-800 transition-colors\">\n        <td class=\"py-3 px-4\"><strong>Writable Signal</strong></td>\n        <td class=\"py-3 px-4\">Basic signal that can be directly updated</td>\n        <td class=\"py-3 px-4\"><code>signal()</code>, <code>set()</code>, <code>update()</code>, <code>asReadonly()</code></td>\n      </tr>\n      <tr class=\"border-b border-gray-700 bg-gray-950 hover:bg-gray-800 transition-colors\">\n        <td class=\"py-3 px-4\"><strong>Computed Signal</strong></td>\n        <td class=\"py-3 px-4\">Derived signal that calculates its value from other signals</td>\n        <td class=\"py-3 px-4\"><code>computed()</code></td>\n      </tr>\n      <tr class=\"bg-gray-900 hover:bg-gray-800 transition-colors\">\n        <td class=\"py-3 px-4\"><strong>Effect</strong></td>\n        <td class=\"py-3 px-4\">Side effect that runs when its dependencies change</td>\n        <td class=\"py-3 px-4\"><code>effect()</code>, cleanup function</td>\n      </tr>\n    </tbody>\n  </table>\n\n  <br>\n  <br>\n\n  <p>Angular 19 Signal Improvements</p>\n  <ol class=\"list-decimal pl-4 text-sm\">\n    <li>\n      <strong>Signal-Based Component Model</strong>:\n      <ul class=\"list-disc pl-4\">\n        <li>Angular 19 introduces signal-based inputs, outputs, models, and queries for components</li>\n        <li>Component inputs and outputs are now signal-based with <code>input()</code> and <code>output()</code></li>\n        <li>Two-way binding with <code>model()</code> for cleaner component communication</li>\n      </ul>\n    </li>\n    <li>\n      <strong>Performance Optimizations</strong>:\n      <ul class=\"list-disc pl-4\">\n        <li>Optimized signal implementation for faster change detection</li>\n        <li>Reduced memory overhead for signal storage</li>\n        <li>Better garbage collection integration for signal dependencies</li>\n      </ul>\n    </li>\n    <li>\n      <strong>Developer Experience</strong>:\n      <ul class=\"list-disc pl-4\">\n        <li>Improved type safety across all signal operations</li>\n        <li>Better error messages for common signal usage mistakes</li>\n        <li>Enhanced debugging support in Angular DevTools</li>\n      </ul>\n    </li>\n    <li>\n      <strong>Signal Utilities</strong>:\n      <ul class=\"list-disc pl-4\">\n        <li><code>asReadonly()</code> method for creating read-only signals</li>\n        <li>Custom equality functions for controlling signal change detection</li>\n        <li><code>untracked()</code> for preventing dependency tracking in computed signals</li>\n      </ul>\n    </li>\n    <li>\n      <strong>Integration with Zoneless Applications</strong>:\n      <ul class=\"list-disc pl-4\">\n        <li>Signals are the foundation for zoneless applications in Angular 19</li>\n        <li>Provide automatic UI updates without relying on Zone.js</li>\n        <li>Enable more predictable, fine-grained change detection</li>\n      </ul>\n    </li>\n  </ol>\n</ng-template>\n\n<ng-template #bestRef>\n  <ol class=\"list-decimal px-4 text-sm\">\n    <li>\n      <strong class=\"text-sky-400\">Signal State Design</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong>Keep Signal Granularity Appropriate</strong>:\n          Create signals at the right level of granularity. Too fine-grained signals can lead to complexity, while too coarse can reduce the benefits of reactivity.\n        </li>\n        <li>\n          <strong>Use Computed for Derived State</strong>:\n          Always use computed signals for derived state rather than manually updating dependent values. This ensures your derived state stays in sync automatically.\n        </li>\n        <li>\n          <strong>Minimize Stateful Services</strong>:\n          Move signals to components when possible and keep services stateless. When services need state, use signals to make that state reactive.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong class=\"text-sky-400\">Performance Optimization</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong>Avoid Deep Objects in Signals</strong>:\n          Prefer flat state in signals. Deep nesting can make change detection less efficient and updates more complex.\n        </li>\n        <li>\n          <strong>Use untracked() Strategically</strong>:\n          Use <code>untracked()</code> to prevent unnecessary dependencies in computed signals when you need to access a signal's value without creating a dependency.\n        </li>\n        <li>\n          <strong>Custom Equality Functions</strong>:\n          Use custom equality functions for complex objects to prevent unnecessary updates when actual values haven't changed.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong class=\"text-sky-400\">Effect Management</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong>Clean Up Effects</strong>:\n          Always return cleanup functions from effects that subscribe to external resources or create timers to prevent memory leaks.\n        </li>\n        <li>\n          <strong>Keep Effects Focused</strong>:\n          Effects should have a single responsibility. Prefer multiple small effects over one large effect with many dependencies.\n        </li>\n        <li>\n          <strong>Place Effects Appropriately</strong>:\n          Define effects where their dependencies are defined, typically in component constructors or initialization methods.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong class=\"text-sky-400\">Component Integration</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong>Prefer Signal Inputs and Outputs</strong>:\n          In Angular 19, use <code>input()</code>, <code>output()</code>, and <code>model()</code> for component communications over the older decorator approach.\n        </li>\n        <li>\n          <strong>Use asReadonly() for API Design</strong>:\n          Expose read-only signals to consumers when they shouldn't be able to modify the value directly.\n        </li>\n        <li>\n          <strong>Consider Signal Store for Complex State</strong>:\n          For complex application state, consider using a pattern like signal-based stores to organize related state and behavior.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong class=\"text-sky-400\">Migration Strategy</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong>Incremental Adoption</strong>:\n          Migrate to signals incrementally, focusing on areas with complex state management or performance issues first.\n        </li>\n        <li>\n          <strong>Combine with RxJS When Needed</strong>:\n          Signals and RxJS can coexist. Use signals for UI state and component interaction, and RxJS for complex asynchronous operations.\n        </li>\n        <li>\n          <strong>Consider Future Patterns</strong>:\n          Design your signal architecture with the future in mind, such as zoneless applications and signal-based components.\n        </li>\n      </ul>\n    </li>\n  </ol>\n</ng-template>\n\n<ng-template #prosConsRef>\n  <strong class=\"text-sky-400\">\n    Pros:\n  </strong>\n\n  <br>\n\n  <ol class=\"list-decimal px-10 text-sm\">\n    <li>\n      <strong>Fine-grained Reactivity</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Precise Dependency Tracking</span>:\n          Signals automatically track their dependencies, leading to more efficient updates and rendering.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Minimal Re-rendering</span>:\n          Only parts of the UI that depend on changed signals are updated, reducing unnecessary work.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Explicit Change Detection</span>:\n          Changes to signal values explicitly trigger updates, making application behavior more predictable.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Improved Performance</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Optimized Change Detection</span>:\n          Angular 19 signals significantly improve change detection efficiency compared to traditional mechanisms.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Memory Efficiency</span>:\n          Signals have minimal memory overhead compared to alternatives like RxJS Subjects.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Zone-free Operation</span>:\n          Signals enable zoneless applications, reducing overhead related to zone.js.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Better Developer Experience</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Simple API</span>:\n          Signals have a straightforward, functional API that's easy to understand and use.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Improved Type Safety</span>:\n          Signal operations are fully typed, providing excellent TypeScript integration.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Debugging Support</span>:\n          Angular DevTools offers enhanced debugging capabilities for signals in Angular 19.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Integration with Angular Ecosystem</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Signal-based Components</span>:\n          Angular 19 introduces a complete signal-based component model with signal inputs, outputs, and models.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Integration with Templates</span>:\n          Signal values can be used directly in templates and automatically update when signals change.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Works with Existing Code</span>:\n          Signals can be gradually adopted alongside existing Angular patterns.\n        </li>\n      </ul>\n    </li>\n  </ol>\n\n  <br>\n  <br>\n\n  <strong class=\"text-sky-400\">\n    Cons:\n  </strong>\n\n  <br>\n\n  <ol class=\"list-decimal px-10 text-sm\">\n    <li>\n      <strong>Learning Curve</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">New Mental Model</span>:\n          Developers familiar with RxJS or traditional Angular change detection need to learn a new approach.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Signal Function Calls</span>:\n          The need to call signals as functions to get their values can be confusing for newcomers.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Reactive Thinking</span>:\n          Requires a shift to thinking reactively about dependencies and data flow.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Migration Challenges</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Mixed Code Bases</span>:\n          During migration, managing code that uses both signals and traditional patterns can be complex.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Refactoring Effort</span>:\n          Converting existing components and services to use signals requires significant effort.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Third-party Libraries</span>:\n          Not all third-party libraries support signals yet, creating potential integration challenges.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Debugging Complexity</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Hidden Dependencies</span>:\n          Automatic dependency tracking can sometimes make it difficult to trace exactly what's causing updates.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Effect Debugging</span>:\n          Effects with many dependencies can be challenging to debug when they trigger unexpectedly.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Stack Traces</span>:\n          Error stack traces from signal operations can sometimes be harder to follow than traditional code.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Potential Overuse</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Signal Proliferation</span>:\n          There's a risk of creating too many fine-grained signals, leading to unnecessarily complex code.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Architecture Decisions</span>:\n          Determining where to place signals (components vs. services) requires careful consideration.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Performance Overhead</span>:\n          While signals are optimized, there's still some overhead for very simple state changes that might not need reactivity.\n        </li>\n      </ul>\n    </li>\n  </ol>\n</ng-template>\n\n<ng-template #topicsRef>\n  <ol class=\"list-decimal px-10 text-sm\">\n    <li>\n      <strong>Signal-Based Components</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Angular 19's component model based entirely on signals, replacing traditional inputs and outputs.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Signals</strong>:\n          Uses signals as the foundation for component inputs, outputs, models, and queries, creating a unified reactive programming model.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Zoneless Applications</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Angular applications that operate without Zone.js, using signals and explicit change detection.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Signals</strong>:\n          Signals provide the reactivity mechanism that enables applications to function efficiently without Zone.js.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Reactive Programming</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Programming paradigm focused on data streams and propagation of change.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Signals</strong>:\n          Signals implement reactive programming principles in a way that's integrated with Angular's rendering system.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>RxJS and Observables</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Library for reactive programming with Observables in Angular applications.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Signals</strong>:\n          Complementary to signals - RxJS is better for complex async operations, while signals excel at UI state management.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Change Detection</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          How Angular identifies and propagates changes to update the DOM.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Signals</strong>:\n          Signals enable fine-grained change detection by creating explicit connections between state and UI.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Partial Hydration</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Technique to selectively hydrate server-rendered components based on priority or visibility.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Signals</strong>:\n          Signals integrate with partial hydration, enabling efficient state restoration when components are hydrated.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>State Management</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Patterns and practices for managing application state in Angular applications.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Signals</strong>:\n          Signals provide a built-in mechanism for reactive state management that can replace or complement external libraries.\n        </li>\n      </ul>\n    </li>\n  </ol>\n</ng-template>\n"],"names":["CommonModule","HighlightModule","UnsubscribeService","i0","SignalsComponent","constructor","http","ngOnInit","selectors","viewQuery","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}