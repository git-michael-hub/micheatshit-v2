"use strict";(self.webpackChunktailwind=self.webpackChunktailwind||[]).push([[281],{7281:(k,d,r)=>{r.r(d),r.d(d,{AotComponent:()=>u});var g=r(8512),s=r(2722),e=r(8256),_=r(529),c=r(6895),Z=r(827),m=r(1143);function h(n,t){1&n&&e.GkF(0)}function A(n,t){if(1&n&&(e.TgZ(0,"div"),e.YNc(1,h,1,0,"ng-container",15),e.qZA()),2&n){e.oxw();const i=e.MAs(28);e.xp6(1),e.Q6J("ngTemplateOutlet",i)}}function T(n,t){1&n&&e.GkF(0)}function U(n,t){if(1&n&&(e.TgZ(0,"div"),e.YNc(1,T,1,0,"ng-container",15),e.qZA()),2&n){e.oxw();const i=e.MAs(30);e.xp6(1),e.Q6J("ngTemplateOutlet",i)}}function b(n,t){1&n&&e.GkF(0)}function f(n,t){if(1&n&&(e.TgZ(0,"div"),e.YNc(1,b,1,0,"ng-container",15),e.qZA()),2&n){e.oxw();const i=e.MAs(32);e.xp6(1),e.Q6J("ngTemplateOutlet",i)}}function y(n,t){1&n&&e.GkF(0)}function q(n,t){if(1&n&&(e.TgZ(0,"div"),e.YNc(1,y,1,0,"ng-container",15),e.qZA()),2&n){e.oxw();const i=e.MAs(26);e.xp6(1),e.Q6J("ngTemplateOutlet",i)}}const l=function(){return["bash"]},v=function(){return["json"]};function x(n,t){if(1&n){const i=e.EpF();e.TgZ(0,"p"),e._uU(1,"Why Use AOT Compilation?"),e.qZA(),e.TgZ(2,"ul",16)(3,"li")(4,"strong"),e._uU(5,"Faster Rendering"),e.qZA(),e._uU(6,": Pre-compiles code, so the browser doesn't have to compile it at runtime, reducing initial load time. "),e.qZA(),e.TgZ(7,"li")(8,"strong"),e._uU(9,"Smaller Bundle Sizes"),e.qZA(),e._uU(10,": Removes the Angular compiler from the bundle, resulting in smaller files. "),e.qZA(),e.TgZ(11,"li")(12,"strong"),e._uU(13,"Improved Security"),e.qZA(),e._uU(14,": Reduces the risk of injection attacks by compiling templates at build time. "),e.qZA(),e.TgZ(15,"li")(16,"strong"),e._uU(17,"Early Error Detectionn"),e.qZA(),e._uU(18,": Identifies template errors during build time, reducing runtime errors. "),e.qZA()(),e._UZ(19,"br")(20,"br"),e.TgZ(21,"p"),e._uU(22,"New Features and Enhancements in Angular 19"),e.qZA(),e.TgZ(23,"ol",17)(24,"li")(25,"strong"),e._uU(26,"Fully Stabilized Zoneless Applications"),e.qZA(),e._uU(27,": "),e.TgZ(28,"ul",18)(29,"li"),e._uU(30,"Angular 19 fully stabilizes zoneless applications, eliminating dependency on "),e.TgZ(31,"code"),e._uU(32,"zone.js"),e.qZA(),e._uU(33,", using native async functions, and achieving significantly smaller, faster bundles with improved AOT optimization."),e.qZA()()(),e.TgZ(34,"li")(35,"strong"),e._uU(36,"Enhanced Signal-based Components"),e.qZA(),e._uU(37,": "),e.TgZ(38,"ul",18)(39,"li"),e._uU(40,"Angular 19 introduces a completely signal-based component model that AOT can optimize more effectively, providing better performance and more predictable rendering."),e.qZA()()(),e.TgZ(41,"li")(42,"strong"),e._uU(43,"Advanced Partial Hydration Strategy"),e.qZA(),e._uU(44,": "),e.TgZ(45,"ul",18)(46,"li"),e._uU(47,"Offers improved partial hydration for server-side rendering (SSR) with granular control over which components are hydrated, significantly improving performance for complex applications."),e.qZA()()(),e.TgZ(48,"li")(49,"strong"),e._uU(50,"Stable Built-in Control Flow"),e.qZA(),e._uU(51,": "),e.TgZ(52,"ul",18)(53,"li"),e._uU(54,"The built-in control flow syntax ("),e.TgZ(55,"code"),e._uU(56,"@if"),e.qZA(),e._uU(57,", "),e.TgZ(58,"code"),e._uU(59,"@for"),e.qZA(),e._uU(60,", "),e.TgZ(61,"code"),e._uU(62,"@switch"),e.qZA(),e._uU(63,") is now fully stable and optimized for AOT compilation, resulting in more efficient bundles than the previous directive-based approach."),e.qZA()()(),e.TgZ(64,"li")(65,"strong"),e._uU(66,"Improved DevTools Integration"),e.qZA(),e._uU(67,": "),e.TgZ(68,"ul",18)(69,"li"),e._uU(70,"Angular DevTools now provides enhanced debugging capabilities specifically for AOT-compiled applications, making it easier to identify performance bottlenecks and optimize rendering."),e.qZA()()()(),e._UZ(71,"br")(72,"br"),e.TgZ(73,"p"),e._uU(74,"How to Enable AOT Compilation"),e.qZA(),e.TgZ(75,"ul",16)(76,"li")(77,"strong"),e._uU(78,"Using Angular CLI"),e.qZA(),e._uU(79,": Compiles the app with AOT enabled. "),e.TgZ(80,"button",19),e.NdJ("click",function(){e.CHM(i);const o=e.MAs(83);return e.KtG(o.hidden=!o.hidden)}),e._uU(81,"code"),e.qZA(),e.TgZ(82,"span",20,21)(84,"div",22)(85,"span"),e._uU(86,"bash"),e.qZA(),e._UZ(87,"span",23),e.qZA(),e.TgZ(88,"pre"),e._uU(89,"          "),e.TgZ(90,"code",24),e._uU(91,"\n          "),e.qZA(),e._uU(92,"\n        "),e.qZA()()(),e.TgZ(93,"li")(94,"strong"),e._uU(95,"Production Builds (AOT Enabled by Default)"),e.qZA(),e._uU(96,": Automatically enables AOT and other optimizations. "),e.TgZ(97,"button",19),e.NdJ("click",function(){e.CHM(i);const o=e.MAs(100);return e.KtG(o.hidden=!o.hidden)}),e._uU(98,"code"),e.qZA(),e.TgZ(99,"span",20,25)(101,"div",22)(102,"span"),e._uU(103,"bash"),e.qZA(),e._UZ(104,"span",23),e.qZA(),e.TgZ(105,"pre"),e._uU(106,"          "),e.TgZ(107,"code",24),e._uU(108,"\n          "),e.qZA(),e._uU(109,"\n        "),e.qZA()()(),e.TgZ(110,"li")(111,"strong"),e._uU(112,"Configuring in "),e.TgZ(113,"code"),e._uU(114,"angular.json"),e.qZA()(),e._uU(115,": Sets AOT as the default for all builds. "),e.TgZ(116,"button",19),e.NdJ("click",function(){e.CHM(i);const o=e.MAs(119);return e.KtG(o.hidden=!o.hidden)}),e._uU(117,"code"),e.qZA(),e.TgZ(118,"span",20,26)(120,"div",22)(121,"span"),e._uU(122,"json"),e.qZA(),e._UZ(123,"span",23),e.qZA(),e.TgZ(124,"pre"),e._uU(125,"          "),e.TgZ(126,"code",24),e._uU(127,"\n          "),e.qZA(),e._uU(128,"\n        "),e.qZA()()()(),e._UZ(129,"br")(130,"br"),e.TgZ(131,"p"),e._uU(132,"Common Commands for AOT Compilation"),e.qZA(),e._UZ(133,"br"),e.TgZ(134,"table",27)(135,"thead")(136,"tr",28)(137,"th",29),e._uU(138,"Command"),e.qZA(),e.TgZ(139,"th",29),e._uU(140,"Description"),e.qZA()()(),e.TgZ(141,"tbody")(142,"tr",30)(143,"td",31)(144,"code"),e._uU(145,"ng build --aot"),e.qZA()(),e.TgZ(146,"td",31),e._uU(147,"Builds the application with AOT enabled."),e.qZA()(),e.TgZ(148,"tr",32)(149,"td",31)(150,"code"),e._uU(151,"ng serve --aot"),e.qZA()(),e.TgZ(152,"td",31),e._uU(153,"Serves the application locally with AOT enabled."),e.qZA()(),e.TgZ(154,"tr",30)(155,"td",31)(156,"code"),e._uU(157,"ng build --prod"),e.qZA()(),e.TgZ(158,"td",31),e._uU(159,"Production build with AOT and other optimizations."),e.qZA()(),e.TgZ(160,"tr",32)(161,"td",31)(162,"code"),e._uU(163,"ng build --aot --source-map"),e.qZA()(),e.TgZ(164,"td",31),e._uU(165,"AOT build with source maps for debugging purposes."),e.qZA()()()()}if(2&n){const i=e.oxw();e.xp6(90),e.Q6J("highlight",i.code_16)("languages",e.DdM(6,l)),e.xp6(17),e.Q6J("highlight",i.code_17)("languages",e.DdM(7,l)),e.xp6(19),e.Q6J("highlight",i.code_18)("languages",e.DdM(8,v))}}const p=function(){return["typescript"]};function O(n,t){if(1&n){const i=e.EpF();e.TgZ(0,"ol",33)(1,"li")(2,"strong",34),e._uU(3,"Use Static Templates and Expressions"),e.qZA(),e.TgZ(4,"ul",18)(5,"li")(6,"strong"),e._uU(7,"Avoid Dynamic Constructs"),e.qZA(),e._uU(8,": Ensure templates use static, predictable expressions. Avoid using dynamic constructs like function calls or complex logic inside templates, as they can prevent AOT from optimizing properly. "),e.qZA(),e.TgZ(9,"li")(10,"strong"),e._uU(11,"Leverage Pure Pipes"),e.qZA(),e._uU(12,": Use pure pipes for complex data transformations. Pure pipes are cached and only recomputed when their input changes, which helps optimize performance during AOT. "),e.qZA()()(),e.TgZ(13,"li")(14,"strong",34),e._uU(15,"Ensure Type Safety and Static Metadata"),e.qZA(),e._uU(16,": "),e.TgZ(17,"ul",18)(18,"li")(19,"strong"),e._uU(20,"Explicit Typing"),e.qZA(),e._uU(21,": Use strict TypeScript types and avoid the any type. Angular's AOT compiler relies heavily on TypeScript's type system for generating metadata, so always define explicit types for variables, function parameters, and return types. "),e.qZA(),e.TgZ(22,"li")(23,"strong"),e._uU(24,"Avoid Dynamic Metadata"),e.qZA(),e._uU(25,": Use static values in decorators and component metadata. Avoid using dynamic expressions (like functions) to define metadata such as component selectors, template URLs, etc., as AOT requires all metadata to be statically analyzable. "),e.qZA()()(),e.TgZ(26,"li"),e._UZ(27,"strong",34),e.TgZ(28,"ul",18)(29,"li")(30,"strong"),e._uU(31,"Production Builds"),e.qZA(),e._uU(32,": Use the Angular CLI to ensure AOT is enabled for all production builds. This command enables AOT by default, along with other optimizations like minification and tree-shaking. "),e.TgZ(33,"button",19),e.NdJ("click",function(){e.CHM(i);const o=e.MAs(36);return e.KtG(o.hidden=!o.hidden)}),e._uU(34,"code"),e.qZA(),e.TgZ(35,"span",20,25)(37,"div",22)(38,"span"),e._uU(39,"bash"),e.qZA(),e._UZ(40,"span",23),e.qZA(),e.TgZ(41,"pre"),e._uU(42,"              "),e.TgZ(43,"code",24),e._uU(44,"\n              "),e.qZA(),e._uU(45,"\n            "),e.qZA()()(),e.TgZ(46,"li")(47,"strong"),e._uU(48,"Development Builds"),e.qZA(),e._uU(49,": Enable AOT during development to catch errors early. This allows you to detect template-related errors early in the development process. "),e.TgZ(50,"button",19),e.NdJ("click",function(){e.CHM(i);const o=e.MAs(53);return e.KtG(o.hidden=!o.hidden)}),e._uU(51,"code"),e.qZA(),e.TgZ(52,"span",20,35)(54,"div",22)(55,"span"),e._uU(56,"bash"),e.qZA(),e._UZ(57,"span",23),e.qZA(),e.TgZ(58,"pre"),e._uU(59,"              "),e.TgZ(60,"code",24),e._uU(61,"\n              "),e.qZA(),e._uU(62,"\n            "),e.qZA()()(),e.TgZ(63,"li")(64,"strong"),e._uU(65,"Configuration in "),e.TgZ(66,"code"),e._uU(67,"angular.json"),e.qZA()(),e._uU(68,": Set AOT as the default for all builds. "),e.TgZ(69,"button",19),e.NdJ("click",function(){e.CHM(i);const o=e.MAs(72);return e.KtG(o.hidden=!o.hidden)}),e._uU(70,"code"),e.qZA(),e.TgZ(71,"span",20,26)(73,"div",22)(74,"span"),e._uU(75,"bash"),e.qZA(),e._UZ(76,"span",23),e.qZA(),e.TgZ(77,"pre"),e._uU(78,"              "),e.TgZ(79,"code",24),e._uU(80,"\n              "),e.qZA(),e._uU(81,"\n            "),e.qZA()()()()(),e.TgZ(82,"li")(83,"strong",34),e._uU(84,"Optimize Component Structure and Lifecycle"),e.qZA(),e.TgZ(85,"ul",18)(86,"li")(87,"strong"),e._uU(88,"Use "),e.TgZ(89,"code"),e._uU(90,"ChangeDetectionStrategy.OnPush"),e.qZA()(),e._uU(91,": Minimize change detection cycles by using "),e.TgZ(92,"code"),e._uU(93,"ChangeDetectionStrategy.OnPush"),e.qZA(),e._uU(94," for components that do not rely on global state: "),e.TgZ(95,"button",19),e.NdJ("click",function(){e.CHM(i);const o=e.MAs(98);return e.KtG(o.hidden=!o.hidden)}),e._uU(96,"code"),e.qZA(),e.TgZ(97,"span",20,36)(99,"div",22)(100,"span"),e._uU(101,"typescript"),e.qZA(),e._UZ(102,"span",23),e.qZA(),e.TgZ(103,"pre"),e._uU(104,"              "),e.TgZ(105,"code",24),e._uU(106,"\n              "),e.qZA(),e._uU(107,"\n            "),e.qZA()()(),e.TgZ(108,"li")(109,"strong"),e._uU(110,"Break Down Complex Components"),e.qZA(),e._uU(111,": Divide large, complex components into smaller, focused components. This makes them easier to analyze and optimize by the AOT compiler. "),e.qZA()()(),e.TgZ(112,"li")(113,"strong",34),e._uU(114,"Utilize Lazy Loading for Feature Modules"),e.qZA(),e.TgZ(115,"ul",18)(116,"li")(117,"strong"),e._uU(118,"Implement Lazy Loading"),e.qZA(),e._uU(119,": Use lazy loading to defer the loading of feature modules that are not required immediately, reducing the initial bundle size. This reduces the initial load time by only loading necessary modules when needed. "),e.TgZ(120,"button",19),e.NdJ("click",function(){e.CHM(i);const o=e.MAs(123);return e.KtG(o.hidden=!o.hidden)}),e._uU(121,"code"),e.qZA(),e.TgZ(122,"span",20,37)(124,"div",22)(125,"span"),e._uU(126,"typescript"),e.qZA(),e._UZ(127,"span",23),e.qZA(),e.TgZ(128,"pre"),e._uU(129,"              "),e.TgZ(130,"code",24),e._uU(131,"\n              "),e.qZA(),e._uU(132,"\n            "),e.qZA()()()()(),e.TgZ(133,"li")(134,"strong",34),e._uU(135,"Ensure Compatibility of Third-Party Libraries"),e.qZA(),e.TgZ(136,"ul",18)(137,"li")(138,"strong"),e._uU(139,"Use AOT-Compatible Libraries"),e.qZA(),e._uU(140,": Verify that all third-party libraries are compatible with AOT. Some libraries might rely on dynamic runtime features that are not supported by AOT. "),e.qZA(),e.TgZ(141,"li")(142,"strong"),e._uU(143,"Tree-Shaking"),e.qZA(),e._uU(144,": Remove unused libraries and dependencies to reduce the final bundle size. AOT, combined with tree-shaking, can eliminate dead code during the build process. "),e.qZA()()(),e.TgZ(145,"li")(146,"strong",34),e._uU(147,"Avoid Direct DOM Manipulation"),e.qZA(),e.TgZ(148,"ul",18)(149,"li")(150,"strong"),e._uU(151,"Use Angular's "),e.TgZ(152,"code"),e._uU(153,"Renderer2"),e.qZA(),e._uU(154," API"),e.qZA(),e._uU(155,": Instead of directly manipulating the DOM using native methods or third-party libraries like jQuery, use Angular's "),e.TgZ(156,"code"),e._uU(157,"Renderer2"),e.qZA(),e._uU(158," API. This ensures compatibility with Angular's rendering engine and supports AOT. "),e.qZA()()(),e.TgZ(159,"li")(160,"strong",34),e._uU(161,"Optimize Styles and Assets"),e.qZA(),e.TgZ(162,"ul",18)(163,"li")(164,"strong"),e._uU(165,"Inline Critical CSS"),e.qZA(),e._uU(166,": Inline critical CSS to reduce the number of HTTP requests and speed up initial rendering. "),e.qZA(),e.TgZ(167,"li")(168,"strong"),e._uU(169,"Minimize Asset Size"),e.qZA(),e._uU(170,": Compress images, fonts, and other assets to reduce their size and optimize the app's load time. "),e.qZA()()(),e.TgZ(171,"li")(172,"strong",34),e._uU(173,"Monitor Build Performance and Diagnostics"),e.qZA(),e.TgZ(174,"ul",18)(175,"li")(176,"strong"),e._uU(177,"Analyze Build Outputs"),e.qZA(),e._uU(178,": Regularly check build outputs for any warnings or errors during AOT compilation. Use tools like Webpack Bundle Analyzer to analyze bundle sizes and identify performance bottlenecks. "),e.qZA(),e.TgZ(179,"li")(180,"strong"),e._uU(181,"Use Angular DevTools"),e.qZA(),e._uU(182,": Utilize Angular DevTools to inspect component performance, detect hydration issues, and debug AOT-related errors more effectively. "),e.qZA()()(),e.TgZ(183,"li")(184,"strong",34),e._uU(185,"Use Angular's Partial Hydration and Improved SSR Features"),e.qZA(),e.TgZ(186,"ul",18)(187,"li")(188,"strong"),e._uU(189,"Partial Hydration"),e.qZA(),e._uU(190,": In Angular 19, partial hydration helps optimize server-side rendering (SSR) by hydrating only necessary parts of the app, improving load times and overall performance. "),e.qZA()()()()}if(2&n){const i=e.oxw();e.xp6(43),e.Q6J("highlight",i.code_17)("languages",e.DdM(10,l)),e.xp6(17),e.Q6J("highlight",i.code_19)("languages",e.DdM(11,l)),e.xp6(19),e.Q6J("highlight",i.code_18)("languages",e.DdM(12,l)),e.xp6(26),e.Q6J("highlight",i.code_20)("languages",e.DdM(13,p)),e.xp6(25),e.Q6J("highlight",i.code_21)("languages",e.DdM(14,p))}}function w(n,t){1&n&&(e.TgZ(0,"strong",34),e._uU(1," Pros: "),e.qZA(),e._UZ(2,"br"),e.TgZ(3,"ol",38)(4,"li")(5,"strong"),e._uU(6,"Faster Initial Load Time"),e.qZA(),e.TgZ(7,"ul",18)(8,"li"),e._uU(9," AOT compiles templates and components during the build process, eliminating the need for Just-in-Time (JIT) compilation in the browser. This reduces the amount of JavaScript the browser needs to process at runtime, resulting in a faster initial load time. "),e.qZA()()(),e.TgZ(10,"li")(11,"strong"),e._uU(12,"Smaller Bundle Sizes"),e.qZA(),e.TgZ(13,"ul",18)(14,"li"),e._uU(15," By removing the Angular compiler from the application bundle, AOT reduces the size of the JavaScript files sent to the client. Smaller bundle sizes lead to faster downloads and improved app performance, particularly on slower networks. "),e.qZA()()(),e.TgZ(16,"li")(17,"strong"),e._uU(18,"Improved Security"),e.qZA(),e.TgZ(19,"ul",18)(20,"li"),e._uU(21," AOT compiles templates into JavaScript before deployment, preventing the risk of injection attacks that can occur if templates are dynamically compiled at runtime. This makes the app more secure by reducing the surface area for potential vulnerabilities. "),e.qZA()()(),e.TgZ(22,"li")(23,"strong"),e._uU(24,"Early Error Detection"),e.qZA(),e.TgZ(25,"ul",18)(26,"li"),e._uU(27," Errors in templates, components, and metadata are detected during the build phase, allowing developers to identify and fix them early in the development process. This leads to fewer runtime errors and more stable applications. "),e.qZA()()(),e.TgZ(28,"li")(29,"strong"),e._uU(30,"Optimized Performance for Production"),e.qZA(),e.TgZ(31,"ul",18)(32,"li"),e._uU(33," AOT is optimized for production use, ensuring that the application performs well under various conditions. It is fully compatible with Angular's change detection strategies and supports advanced features like partial hydration for server-side rendering (SSR). "),e.qZA()()(),e.TgZ(34,"li")(35,"strong"),e._uU(36,"Compatibility with Zoneless Applications and Signal-based Components"),e.qZA(),e.TgZ(37,"ul",18)(38,"li"),e._uU(39," Angular 19 fully stabilizes zoneless applications and introduces an optimized signal-based component model, reducing reliance on "),e.TgZ(40,"code"),e._uU(41,"zone.js"),e.qZA(),e._uU(42," and enabling more efficient, smaller bundles with AOT. "),e.qZA()()()(),e._UZ(43,"br"),e.TgZ(44,"strong",34),e._uU(45," Cons: "),e.qZA(),e._UZ(46,"br"),e.TgZ(47,"ol",38)(48,"li")(49,"strong"),e._uU(50,"Increased Build Time"),e.qZA(),e.TgZ(51,"ul",18)(52,"li"),e._uU(53," AOT compilation adds extra processing time to the build process because it performs template compilation, type checking, and optimization at build time. This can increase the time required for builds, which might be noticeable in large projects. "),e.qZA()()(),e.TgZ(54,"li")(55,"strong"),e._uU(56,"Limited Support for Dynamic Code"),e.qZA(),e.TgZ(57,"ul",18)(58,"li"),e._uU(59," AOT relies on static analysis, which means it cannot handle dynamic code constructs or certain types of JavaScript expressions (e.g., dynamically generated templates or code that uses reflection). This can be a limitation if your app requires highly dynamic behavior. "),e.qZA()()(),e.TgZ(60,"li")(61,"strong"),e._uU(62,"Requires Strict Type Checking"),e.qZA(),e.TgZ(63,"ul",18)(64,"li"),e._uU(65," AOT requires strict adherence to TypeScript types and Angular best practices. This means any loose typing or use of dynamic types (any) can lead to compilation errors. While this is generally a good practice, it may require additional work for legacy projects or applications with less strict typing. "),e.qZA()()(),e.TgZ(66,"li")(67,"strong"),e._uU(68,"Compatibility Issues with Third-Party Libraries"),e.qZA(),e.TgZ(69,"ul",18)(70,"li"),e._uU(71," Not all third-party libraries are compatible with AOT, especially those that rely on dynamic runtime behavior or use reflection. You may need to modify or replace incompatible libraries, which can add extra work and complexity. "),e.qZA()()(),e.TgZ(72,"li")(73,"strong",34),e._uU(74,"More Complex Debugging in Some Cases"),e.qZA(),e.TgZ(75,"ul",18)(76,"li"),e._uU(77," While AOT catches many errors at build time, debugging AOT-specific issues can sometimes be more complex due to the additional build steps and optimizations involved. Developers may need to use specific tools like Angular DevTools to diagnose and resolve AOT-related problems. "),e.qZA()()(),e.TgZ(78,"li")(79,"strong",34),e._uU(80,"Initial Setup and Configuration Overhead"),e.qZA(),e.TgZ(81,"ul",18)(82,"li"),e._uU(83," Configuring an application to use AOT, especially if transitioning from JIT, may involve some initial setup and refactoring. This can include ensuring that all templates, components, and metadata are statically analyzable and updating any dynamic code that is incompatible with AOT. "),e.qZA()()()(),e._UZ(84,"br"),e.TgZ(85,"p"),e._uU(86," Summary "),e.qZA(),e.TgZ(87,"table",39)(88,"thead")(89,"tr",28)(90,"th",40),e._uU(91,"Pros"),e.qZA(),e.TgZ(92,"th",40),e._uU(93,"Cons"),e.qZA()()(),e.TgZ(94,"tbody")(95,"tr",30)(96,"td",31),e._uU(97,"Faster initial load times"),e.qZA(),e.TgZ(98,"td",31),e._uU(99,"Increased build time"),e.qZA()(),e.TgZ(100,"tr",32)(101,"td",31),e._uU(102,"Smaller bundle sizes"),e.qZA(),e.TgZ(103,"td",31),e._uU(104,"Limited support for dynamic code"),e.qZA()(),e.TgZ(105,"tr",30)(106,"td",31),e._uU(107,"Improved security"),e.qZA(),e.TgZ(108,"td",31),e._uU(109,"Requires strict type checking"),e.qZA()(),e.TgZ(110,"tr",32)(111,"td",31),e._uU(112,"Early error detection"),e.qZA(),e.TgZ(113,"td",31),e._uU(114,"Compatibility issues with some third-party libraries"),e.qZA()(),e.TgZ(115,"tr",30)(116,"td",31),e._uU(117,"Optimized performance for production"),e.qZA(),e.TgZ(118,"td",31),e._uU(119,"More complex debugging in certain scenarios"),e.qZA()(),e.TgZ(120,"tr",41)(121,"td",31),e._uU(122,"Supports zoneless applications and signal-based components"),e.qZA(),e.TgZ(123,"td",31),e._uU(124,"Initial setup and configuration overhead"),e.qZA()()()())}function C(n,t){1&n&&(e.TgZ(0,"ol",38)(1,"li")(2,"strong"),e._uU(3,"Just-in-Time (JIT) Compilation"),e.qZA(),e.TgZ(4,"ul",18)(5,"li")(6,"strong",34),e._uU(7,"Description"),e.qZA(),e._uU(8,": In contrast to AOT, "),e.TgZ(9,"span",3),e._uU(10,"Just-in-Time (JIT) Compilation"),e.qZA(),e._uU(11," compiles Angular templates and components in the browser at runtime. This approach allows for a more dynamic development experience since changes can be quickly reloaded without rebuilding the entire app. "),e.qZA(),e.TgZ(12,"li")(13,"strong",34),e._uU(14,"Key Differences with AOT"),e.qZA(),e._uU(15,": "),e.TgZ(16,"ul",18)(17,"li")(18,"span",3),e._uU(19,"JIT"),e.qZA(),e._uU(20," is faster during development because it avoids the initial build time, while "),e.TgZ(21,"span",3),e._uU(22,"AOT"),e.qZA(),e._uU(23," is faster for end users because it reduces the app's load time. "),e.qZA(),e.TgZ(24,"li")(25,"span",3),e._uU(26,"JIT"),e.qZA(),e._uU(27," is suitable for development environments where quick iteration is needed, whereas "),e.TgZ(28,"span",3),e._uU(29,"AOT"),e.qZA(),e._uU(30," is better for production deployments where performance and security are priorities. "),e.qZA()()()()(),e.TgZ(31,"li")(32,"strong"),e._uU(33,"Angular Ivy"),e.qZA(),e.TgZ(34,"ul",18)(35,"li")(36,"strong",34),e._uU(37,"Description"),e.qZA(),e._uU(38,": "),e.TgZ(39,"span",3),e._uU(40,"Ivy"),e.qZA(),e._uU(41," is the default rendering engine in Angular starting from Angular 9. It offers a more efficient compilation and rendering pipeline, resulting in smaller bundles and faster compilation times. "),e.qZA(),e.TgZ(42,"li")(43,"strong",34),e._uU(44,"Relation to AOT"),e.qZA(),e._uU(45,": "),e.TgZ(46,"ul",18)(47,"li")(48,"span",3),e._uU(49,"Ivy"),e.qZA(),e._uU(50," makes AOT compilation faster and more efficient by compiling templates more effectively and eliminating unnecessary code. It also enables new features like partial hydration and support for zoneless applications. "),e.qZA(),e.TgZ(51,"li")(52,"span",3),e._uU(53,"Angular 19"),e.qZA(),e._uU(54," leverages Ivy to enhance the performance of both JIT and AOT compilations. "),e.qZA()()()()(),e.TgZ(55,"li")(56,"strong"),e._uU(57,"Change Detection Strategies"),e.qZA(),e.TgZ(58,"ul",18)(59,"li")(60,"strong",34),e._uU(61,"Description"),e.qZA(),e._uU(62,": "),e.TgZ(63,"ul",18)(64,"li")(65,"span",3),e._uU(66,"Default Strategy"),e.qZA(),e._uU(67,": Checks the entire component tree for changes, which can be inefficient for large applications. "),e.qZA(),e.TgZ(68,"li")(69,"span",3),e._uU(70,"OnPush Strategy"),e.qZA(),e._uU(71,": Checks only when input properties change, an event occurs, or a component's view is initialized. "),e.qZA()()(),e.TgZ(72,"li")(73,"strong",34),e._uU(74,"Relation to AOT"),e.qZA(),e._uU(75,": "),e.TgZ(76,"ul",18)(77,"li"),e._uU(78," Using "),e.TgZ(79,"span",3),e._uU(80,"ChangeDetectionStrategy.OnPush"),e.qZA(),e._uU(81," with AOT can improve performance by reducing the number of change detection cycles, especially in large applications. "),e.qZA(),e.TgZ(82,"li"),e._uU(83," With "),e.TgZ(84,"span",3),e._uU(85,"AOT"),e.qZA(),e._uU(86,", Angular can statically analyze the templates, optimize change detection, and eliminate unnecessary checks. "),e.qZA()()()()(),e.TgZ(87,"li")(88,"strong"),e._uU(89,"Lazy Loading"),e.qZA(),e.TgZ(90,"ul",18)(91,"li")(92,"strong",34),e._uU(93,"Description"),e.qZA(),e._uU(94,": "),e.TgZ(95,"span",3),e._uU(96,"Lazy Loading"),e.qZA(),e._uU(97," allows Angular to load feature modules on demand rather than upfront, reducing the initial bundle size and improving application load times. "),e.qZA(),e.TgZ(98,"li")(99,"strong",34),e._uU(100,"Relation to AOT"),e.qZA(),e._uU(101,": "),e.TgZ(102,"ul",18)(103,"li")(104,"span",3),e._uU(105,"AOT"),e.qZA(),e._uU(106," and lazy loading work together to optimize application performance by reducing the amount of code loaded initially. "),e.qZA(),e.TgZ(107,"li"),e._uU(108," With Angular 19, AOT can be used alongside lazy loading to ensure that only the necessary modules are loaded when needed, which minimizes the download size and speeds up initial rendering. "),e.qZA()()()()(),e.TgZ(109,"li")(110,"strong"),e._uU(111,"Tree Shaking"),e.qZA(),e.TgZ(112,"ul",18)(113,"li")(114,"strong",34),e._uU(115,"Description"),e.qZA(),e._uU(116,": "),e.TgZ(117,"span",3),e._uU(118,"Tree Shaking"),e.qZA(),e._uU(119," is a technique used to eliminate unused code from the final bundle, reducing the size of the application. "),e.qZA(),e.TgZ(120,"li")(121,"strong",34),e._uU(122,"Relation to AOT"),e.qZA(),e._uU(123,": "),e.TgZ(124,"ul",18)(125,"li")(126,"span",3),e._uU(127,"AOT"),e.qZA(),e._uU(128," works well with tree shaking to eliminate parts of the Angular framework that are not used by the application. This leads to smaller bundle sizes and faster load times. "),e.qZA(),e.TgZ(129,"li"),e._uU(130," Angular's build optimizer, enabled with AOT, enhances tree-shaking effectiveness by marking unused code for removal. "),e.qZA()()()()(),e.TgZ(131,"li")(132,"strong"),e._uU(133,"Partial Hydration and Server-Side Rendering (SSR)"),e.qZA(),e.TgZ(134,"ul",18)(135,"li")(136,"strong",34),e._uU(137,"Description"),e.qZA(),e._uU(138,": "),e.TgZ(139,"span",3),e._uU(140,"Partial Hydration"),e.qZA(),e._uU(141," is a strategy where only the necessary parts of an application are hydrated or made interactive after server-side rendering (SSR). "),e.qZA(),e.TgZ(142,"li")(143,"strong",34),e._uU(144,"Relation to AOT"),e.qZA(),e._uU(145,": "),e.TgZ(146,"ul",18)(147,"li"),e._uU(148," Angular 19's AOT supports partial hydration to optimize server-side rendering (SSR) by hydrating only necessary parts of the app after initial SSR, improving performance and reducing load times. "),e.qZA(),e.TgZ(149,"li"),e._uU(150," AOT ensures that the JavaScript required for hydration is minimal and only contains what's necessary to make the server-rendered content interactive. "),e.qZA()()()()(),e.TgZ(151,"li")(152,"strong"),e._uU(153,"Angular CLI and Build Optimization"),e.qZA(),e.TgZ(154,"ul",18)(155,"li")(156,"strong",34),e._uU(157,"Description"),e.qZA(),e._uU(158,": The "),e.TgZ(159,"span",3),e._uU(160,"Angular CLI"),e.qZA(),e._uU(161," is a command-line tool that provides commands to initialize, develop, scaffold, and maintain Angular applications. "),e.qZA(),e.TgZ(162,"li")(163,"strong",34),e._uU(164,"Relation to AOT"),e.qZA(),e._uU(165,": "),e.TgZ(166,"ul",18)(167,"li"),e._uU(168," The "),e.TgZ(169,"span",3),e._uU(170,"CLI"),e.qZA(),e._uU(171," provides commands like "),e.TgZ(172,"code"),e._uU(173,"ng build --aot"),e.qZA(),e._uU(174," to enable AOT compilation. It also includes build optimization flags ("),e.TgZ(175,"code"),e._uU(176,"--prod"),e.qZA(),e._uU(177,") that enable AOT by default along with other optimizations like minification, tree shaking, and code splitting. "),e.qZA(),e.TgZ(178,"li"),e._uU(179," The "),e.TgZ(180,"span",3),e._uU(181,"CLI"),e.qZA(),e._uU(182," helps automate the build process with AOT, making it easier to integrate AOT into the CI/CD pipeline. "),e.qZA()()()()(),e.TgZ(183,"li")(184,"strong"),e._uU(185,"Angular DevTools"),e.qZA(),e.TgZ(186,"ul",18)(187,"li")(188,"strong",34),e._uU(189,"Description"),e.qZA(),e._uU(190,": "),e.TgZ(191,"span",3),e._uU(192,"Angular DevTools"),e.qZA(),e._uU(193," is a browser extension for debugging and profiling Angular applications. "),e.qZA(),e.TgZ(194,"li")(195,"strong",34),e._uU(196,"Relation to AOT"),e.qZA(),e._uU(197,": "),e.TgZ(198,"ul",18)(199,"li"),e._uU(200," It provides tools for inspecting the component tree, detecting performance bottlenecks, and understanding the impact of AOT compilation on the application's runtime behavior. "),e.qZA(),e.TgZ(201,"li"),e._uU(202," Angular DevTools can be used to monitor the effectiveness of AOT optimizations, including how change detection strategies affect performance. "),e.qZA()()()()(),e.TgZ(203,"li")(204,"strong"),e._uU(205,"NgModules and Modular Architecture"),e.qZA(),e.TgZ(206,"ul",18)(207,"li")(208,"strong",34),e._uU(209,"Description"),e.qZA(),e._uU(210,": "),e.TgZ(211,"span",3),e._uU(212,"NgModules"),e.qZA(),e._uU(213," are fundamental building blocks of Angular applications, used to group related components, directives, services, and pipes. "),e.qZA(),e.TgZ(214,"li")(215,"strong",34),e._uU(216,"Relation to AOT"),e.qZA(),e._uU(217,": "),e.TgZ(218,"ul",18)(219,"li"),e._uU(220," Properly organizing code into NgModules improves AOT compilation by making code more modular, manageable, and easier for the compiler to optimize. "),e.qZA(),e.TgZ(221,"li"),e._uU(222," With Angular 19, modular architecture allows for better compatibility with new features like zoneless apps and native async functions. "),e.qZA()()()()(),e.TgZ(223,"li")(224,"strong"),e._uU(225,"Zoneless Applications"),e.qZA(),e.TgZ(226,"ul",18)(227,"li")(228,"strong",34),e._uU(229,"Description"),e.qZA(),e._uU(230,": Zoneless applications in Angular remove the reliance on "),e.TgZ(231,"code"),e._uU(232,"zone.js"),e.qZA(),e._uU(233," for change detection, relying instead on native async capabilities like "),e.TgZ(234,"code"),e._uU(235,"async/await"),e.qZA(),e._uU(236,". "),e.qZA(),e.TgZ(237,"li")(238,"strong",34),e._uU(239,"Relation to AOT"),e.qZA(),e._uU(240,": "),e.TgZ(241,"ul",18)(242,"li"),e._uU(243," Angular 19's fully stabilized support for zoneless applications benefits AOT by allowing for smaller bundles and more efficient change detection, optimizing both runtime and build-time performance. "),e.qZA()()()()(),e.TgZ(244,"li")(245,"strong"),e._uU(246,"Signal-based Components"),e.qZA(),e.TgZ(247,"ul",18)(248,"li")(249,"strong",34),e._uU(250,"Description"),e.qZA(),e._uU(251,": Signal-based components are a new way to build Angular components with fine-grained reactivity using signals instead of traditional property bindings. "),e.qZA(),e.TgZ(252,"li")(253,"strong",34),e._uU(254,"Relation to AOT"),e.qZA(),e._uU(255,": "),e.TgZ(256,"ul",18)(257,"li"),e._uU(258," Angular 19's signal-based component model is designed to work optimally with AOT compilation, providing better performance through more efficient change detection and rendering. "),e.qZA()()()()()())}class u extends g.Y{constructor(t){super(),this.http=t,this.selectedTab=1,this.code_3="",this.code_5="",this.code_6="",this.code_7="",this.code_8="",this.code_9_1="",this.code_9_2="",this.code_10="",this.code_11="",this.code_14="",this.code_15="",this.code_16="",this.code_17="",this.code_18="",this.code_19="",this.code_20="",this.code_21=""}ngOnInit(){this.http.get("assets/codes/aot/notes/code_3.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_3=t),this.http.get("assets/codes/aot/notes/code_5.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_5=t),this.http.get("assets/codes/aot/notes/code_6.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_6=t),this.http.get("assets/codes/aot/notes/code_7.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_7=t),this.http.get("assets/codes/aot/notes/code_8.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_8=t),this.http.get("assets/codes/aot/notes/code_9_1.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_9_1=t),this.http.get("assets/codes/aot/notes/code_9_2.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_9_2=t),this.http.get("assets/codes/aot/notes/code_10.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_10=t),this.http.get("assets/codes/aot/notes/code_11.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_11=t),this.http.get("assets/codes/aot/notes/code_14.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_14=t),this.http.get("assets/codes/aot/notes/code_15.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_15=t),this.http.get("assets/codes/aot/notes/code_16.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_16=t),this.http.get("assets/codes/aot/notes/code_17.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_17=t),this.http.get("assets/codes/aot/notes/code_18.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_18=t),this.http.get("assets/codes/aot/notes/code_19.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_19=t),this.http.get("assets/codes/aot/notes/code_20.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_20=t),this.http.get("assets/codes/aot/notes/code_21.txt",{responseType:"text"}).pipe((0,s.R)(this.toUnsubscribe$)).subscribe(t=>this.code_21=t)}}u.\u0275fac=function(t){return new(t||u)(e.Y36(_.eN))},u.\u0275cmp=e.Xpm({type:u,selectors:[["app-aot"]],features:[e.qOj],decls:33,vars:12,consts:[[1,"p-4","text-sm"],[1,"heading-1","mb-2"],[1,"text-content"],[1,"text-zinc-50","tw-font-medium"],[1,"flex","flex-col"],[1,"flex","border-b","border-gray-200"],[1,"text-sky-400","hover:text-rose-400","font-semibold","py-2","px-4","border-b-2","border-transparent","hover:border-gray-500","focus:outline-none",3,"click"],[1,"p-4"],[3,"ngSwitch"],[4,"ngSwitchCase"],[4,"ngSwitchDefault"],["notesRef",""],["bestRef",""],["prosConsRef",""],["topicsRef",""],[4,"ngTemplateOutlet"],[1,"list-disc","pl-4","text-sm"],[1,"list-decimal","pl-4","text-sm"],[1,"list-disc","pl-4"],[1,"border","border-rose-400","rounded-md","px-1","text-sky-400",3,"click"],["hidden","","copyToClipboard",""],["code16",""],[1,"flex","flex-row","justify-between","items-center","bg-gray-900","px-4","py-2","relative","top-5"],[1,"copy-button-wrapper","bg-gray-700"],[3,"highlight","languages"],["code17",""],["code18",""],[1,"w-full","border-collapse","rounded-lg","overflow-hidden","shadow-md"],[1,"bg-gray-800","text-gray-100"],[1,"py-3","px-4","text-left"],[1,"border-b","border-gray-700","bg-gray-900","hover:bg-gray-800","transition-colors"],[1,"py-3","px-4"],[1,"border-b","border-gray-700","bg-gray-950","hover:bg-gray-800","transition-colors"],[1,"list-decimal","px-4","text-sm"],[1,"text-sky-400"],["code19",""],["code20",""],["code21",""],[1,"list-decimal","px-10","text-sm"],[1,"w-full","border-collapse","rounded-lg","overflow-hidden","shadow-md","mt-4"],[1,"py-3","px-4","text-left","w-1/2"],[1,"bg-gray-950","hover:bg-gray-800","transition-colors"]],template:function(t,i){1&t&&(e.TgZ(0,"section",0)(1,"p",1),e._uU(2," Ahead-of-time (AOT) compilation "),e.qZA(),e.TgZ(3,"div",2)(4,"p")(5,"span",3),e._uU(6,"Ahead-of-Time (AOT) Compilation"),e.qZA(),e._uU(7," in Angular 19 pre-compiles Angular templates and TypeScript code into highly optimized JavaScript at build time. This process improves application performance by reducing load times, shrinking bundle sizes, enhancing security, and catching template errors early in the development cycle. "),e.qZA(),e._UZ(8,"br"),e.TgZ(9,"div",4)(10,"div",5)(11,"button",6),e.NdJ("click",function(){return i.selectedTab=1}),e._uU(12," Notes "),e.qZA(),e.TgZ(13,"button",6),e.NdJ("click",function(){return i.selectedTab=2}),e._uU(14," Best Practices "),e.qZA(),e.TgZ(15,"button",6),e.NdJ("click",function(){return i.selectedTab=3}),e._uU(16," Pros and Cons "),e.qZA(),e.TgZ(17,"button",6),e.NdJ("click",function(){return i.selectedTab=4}),e._uU(18," Related Topics "),e.qZA()(),e.TgZ(19,"div",7),e.ynx(20,8),e.YNc(21,A,2,1,"div",9),e.YNc(22,U,2,1,"div",9),e.YNc(23,f,2,1,"div",9),e.YNc(24,q,2,1,"div",10),e.BQk(),e.qZA()()()(),e.YNc(25,x,166,9,"ng-template",null,11,e.W1O),e.YNc(27,O,191,15,"ng-template",null,12,e.W1O),e.YNc(29,w,125,0,"ng-template",null,13,e.W1O),e.YNc(31,C,259,0,"ng-template",null,14,e.W1O)),2&t&&(e.xp6(11),e.ekj("text-rose-300",1===i.selectedTab),e.xp6(2),e.ekj("text-rose-300",2===i.selectedTab),e.xp6(2),e.ekj("text-rose-300",3===i.selectedTab),e.xp6(2),e.ekj("text-rose-300",4===i.selectedTab),e.xp6(3),e.Q6J("ngSwitch",i.selectedTab),e.xp6(1),e.Q6J("ngSwitchCase",2),e.xp6(1),e.Q6J("ngSwitchCase",3),e.xp6(1),e.Q6J("ngSwitchCase",4))},dependencies:[c.tP,c.RF,c.n9,c.ED,Z.y$,m.j],styles:[".border-b-2[_ngcontent-%COMP%]{border-bottom-width:2px}"]})}}]);