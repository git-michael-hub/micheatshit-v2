{"version":3,"file":"src_app_feature_angular_concepts_universal_universal_component_ts.js","mappings":"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","sources":["./src/app/feature/angular/concepts/universal/universal.component.ts","./src/app/feature/angular/concepts/universal/universal.component.html"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Component, ViewChild, TemplateRef } from '@angular/core';\nimport { HighlightModule } from 'ngx-highlightjs';\nimport { UnsubscribeService } from 'src/app/utils/services/unsubscribe.service';\n\n@Component({\n  selector: 'app-universal',\n  standalone: true,\n  imports: [CommonModule, HighlightModule],\n  templateUrl: './universal.component.html',\n  styleUrls: ['./universal.component.scss']\n})\nexport class UniversalComponent extends UnsubscribeService {\n  selectedTab = 'notes';\n\n  @ViewChild('notesTemplate', { static: true }) notesTemplate!: TemplateRef<any>;\n  @ViewChild('bestPracticesTemplate', { static: true }) bestPracticesTemplate!: TemplateRef<any>;\n  @ViewChild('prosConsTemplate', { static: true }) prosConsTemplate!: TemplateRef<any>;\n  @ViewChild('relatedTopicsTemplate', { static: true }) relatedTopicsTemplate!: TemplateRef<any>;\n\n  setupCode = `// Install Angular Universal\nng add @nguniversal/express-engine\n\n// This creates the following files:\n// - server.ts (Express server)\n// - main.server.ts (Entry point for server-side app)\n// - app.server.module.ts (Server module configuration)\n// - tsconfig.server.json (TypeScript config for server)`;\n\n  buildRunCode = `# Build the application for server-side rendering\nng build\nng run your-app-name:server\n\n# Run the server\nnode dist/your-app-name/server/main.js`;\n\n  serverModuleCode = `// app.server.module.ts\nimport { NgModule } from '@angular/core';\nimport { ServerModule } from '@angular/platform-server';\nimport { AppModule } from './app.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  imports: [\n    AppModule,\n    ServerModule,\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppServerModule {}`;\n\n  angularJsonCode = `// angular.json (partial)\n{\n  \"projects\": {\n    \"your-app-name\": {\n      \"architect\": {\n        \"build\": { ... },\n        \"server\": {\n          \"builder\": \"@angular-devkit/build-angular:server\",\n          \"options\": {\n            \"outputPath\": \"dist/your-app-name/server\",\n            \"main\": \"server.ts\",\n            \"tsConfig\": \"tsconfig.server.json\"\n          }\n        }\n      }\n    }\n  }\n}`;\n\n  isBrowserCode = `// Check if code is running in browser or server\nimport { isPlatformBrowser } from '@angular/common';\nimport { Component, Inject, PLATFORM_ID } from '@angular/core';\n\n@Component({...})\nexport class MyComponent {\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {\n    if (isPlatformBrowser(this.platformId)) {\n      // Browser-only code (e.g., accessing window, localStorage)\n      console.log('Running in browser');\n    } else {\n      // Server-only code\n      console.log('Running on server');\n    }\n  }\n}`;\n\n  transferStateCode = `// Using TransferState to avoid duplicate HTTP requests\nimport { Component, OnInit, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TransferState, makeStateKey } from '@angular/platform-browser';\n\nconst USER_KEY = makeStateKey<any>('user');\n\n@Component({...})\nexport class UserComponent implements OnInit {\n  private http = inject(HttpClient);\n  private transferState = inject(TransferState);\n\n  user: any;\n\n  ngOnInit() {\n    // Try to get the state from server transfer\n    if (this.transferState.hasKey(USER_KEY)) {\n      this.user = this.transferState.get(USER_KEY, null);\n      // We've used the transferred state, so remove it\n      this.transferState.remove(USER_KEY);\n    } else {\n      // If not available in transfer state, make the API call\n      this.http.get('/api/user').subscribe(user => {\n        this.user = user;\n        // On server side, this will be transferred to the client\n        this.transferState.set(USER_KEY, user);\n      });\n    }\n  }\n}`;\n}\n","<div class=\"container\">\n  <h1>Angular Universal</h1>\n  <p>\n    Angular Universal is a technology that enables server-side rendering (SSR) for Angular applications. It allows your app to render on the server before sending HTML to the client, providing better performance, SEO, and user experience.\n  </p>\n\n  <div class=\"tab-navigation\">\n    <button\n      type=\"button\"\n      [class.active]=\"selectedTab === 'notes'\"\n      (click)=\"selectedTab = 'notes'\">\n      Notes\n    </button>\n    <button\n      type=\"button\"\n      [class.active]=\"selectedTab === 'bestPractices'\"\n      (click)=\"selectedTab = 'bestPractices'\">\n      Best Practices\n    </button>\n    <button\n      type=\"button\"\n      [class.active]=\"selectedTab === 'prosCons'\"\n      (click)=\"selectedTab = 'prosCons'\">\n      Pros and Cons\n    </button>\n    <button\n      type=\"button\"\n      [class.active]=\"selectedTab === 'relatedTopics'\"\n      (click)=\"selectedTab = 'relatedTopics'\">\n      Related Topics\n    </button>\n  </div>\n\n  <ng-container [ngSwitch]=\"selectedTab\">\n    <ng-container *ngSwitchCase=\"'notes'\">\n      <ng-container *ngTemplateOutlet=\"notesTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'bestPractices'\">\n      <ng-container *ngTemplateOutlet=\"bestPracticesTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'prosCons'\">\n      <ng-container *ngTemplateOutlet=\"prosConsTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'relatedTopics'\">\n      <ng-container *ngTemplateOutlet=\"relatedTopicsTemplate\"></ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n\n<ng-template #notesTemplate>\n  <h2>Overview</h2>\n  <p>\n    Angular Universal renders your Angular application on the server, generating static HTML that's sent to the browser. This approach combines the benefits of server-side rendering with Angular's client-side capabilities.\n  </p>\n\n  <h3>Benefits of Angular Universal</h3>\n  <ul class=\"benefits-list\">\n    <li>\n      <strong>Improved SEO:</strong> Search engines can crawl and index the fully rendered HTML content.\n    </li>\n    <li>\n      <strong>Faster First Contentful Paint:</strong> Users see rendered content quickly before the JavaScript bundles load.\n    </li>\n    <li>\n      <strong>Better Performance on Low-Power Devices:</strong> Less client-side processing required initially.\n    </li>\n    <li>\n      <strong>Improved Social Media Sharing:</strong> Proper preview images and metadata for social media platforms.\n    </li>\n  </ul>\n\n  <h3>How Angular Universal Works</h3>\n  <p>\n    The workflow of an Angular Universal application:\n  </p>\n  <div class=\"workflow-diagram\">\n    <h4>Request Flow:</h4>\n    <ol>\n      <li>User requests your application URL</li>\n      <li>Request is received by the server (Node.js with Express typically)</li>\n      <li>Angular Universal renders your application on the server</li>\n      <li>Server responds with fully rendered HTML</li>\n      <li>Browser displays the HTML immediately</li>\n      <li>Angular JavaScript bundles load in the background</li>\n      <li>Once loaded, Angular \"hydrates\" the application, taking over interaction handling</li>\n    </ol>\n  </div>\n\n  <h3>Setup and Installation</h3>\n  <div class=\"code-container\">\n    <pre><code [highlight]=\"setupCode\" [languages]=\"['bash']\"></code></pre>\n  </div>\n\n  <h3>Building and Running</h3>\n  <div class=\"code-container\">\n    <pre><code [highlight]=\"buildRunCode\" [languages]=\"['bash']\"></code></pre>\n  </div>\n\n  <h3>Server Module Configuration</h3>\n  <div class=\"code-container\">\n    <pre><code [highlight]=\"serverModuleCode\" [languages]=\"['typescript']\"></code></pre>\n  </div>\n\n  <h3>Angular Configuration</h3>\n  <div class=\"code-container\">\n    <pre><code [highlight]=\"angularJsonCode\" [languages]=\"['json']\"></code></pre>\n  </div>\n</ng-template>\n\n<ng-template #bestPracticesTemplate>\n  <h2>Best Practices</h2>\n\n  <h3>Browser/Server Code Differentiation</h3>\n  <p>\n    Use platform detection to handle browser-specific code:\n  </p>\n  <div class=\"code-container\">\n    <pre><code [highlight]=\"isBrowserCode\" [languages]=\"['typescript']\"></code></pre>\n  </div>\n\n  <h3>Managing State Transfer</h3>\n  <p>\n    Use TransferState to avoid duplicate data fetching:\n  </p>\n  <div class=\"code-container\">\n    <pre><code [highlight]=\"transferStateCode\" [languages]=\"['typescript']\"></code></pre>\n  </div>\n\n  <h3>Additional Best Practices</h3>\n  <ul>\n    <li>\n      <strong>Avoid Browser-Only APIs:</strong> Window, document, localStorage, and other browser-specific APIs aren't available during server rendering. Use conditional checks or Angular abstractions.\n    </li>\n    <li>\n      <strong>Optimize for Time-to-First-Byte (TTFB):</strong> Keep server rendering efficient to minimize delays.\n    </li>\n    <li>\n      <strong>Implement Proper Caching:</strong> Use response caching strategies to reduce server load and improve performance.\n    </li>\n    <li>\n      <strong>Use Relative URLs:</strong> For API requests and asset references to ensure they work both on server and client.\n    </li>\n    <li>\n      <strong>Implement Pre-rendering for Static Content:</strong> Consider pre-rendering routes with static content during build time.\n    </li>\n    <li>\n      <strong>Optimize Bundle Size:</strong> Smaller bundles lead to quicker hydration after the initial server-rendered view.\n    </li>\n    <li>\n      <strong>Use Angular's Meta and Title Services:</strong> Ensure proper metadata for SEO and social sharing.\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template #prosConsTemplate>\n  <h2>Pros and Cons</h2>\n\n  <h3>Advantages</h3>\n  <ul>\n    <li><strong>SEO Benefits:</strong> Better indexing by search engines</li>\n    <li><strong>Improved Performance:</strong> Faster initial rendering and Time to Interactive</li>\n    <li><strong>Progressive Enhancement:</strong> Content available before JavaScript loads</li>\n    <li><strong>Better Accessibility:</strong> Content available to users with JavaScript disabled</li>\n    <li><strong>Social Media Sharing:</strong> Proper preview cards on social platforms</li>\n  </ul>\n\n  <h3>Challenges and Limitations</h3>\n  <ul>\n    <li><strong>Increased Complexity:</strong> More complex architecture and deployment</li>\n    <li><strong>Server Requirements:</strong> Need for Node.js server infrastructure</li>\n    <li><strong>Development Overhead:</strong> Must account for both client and server environments</li>\n    <li><strong>Potential for Double HTTP Requests:</strong> If not using TransferState properly</li>\n    <li><strong>Additional Build/Deploy Steps:</strong> More complex CI/CD pipelines</li>\n  </ul>\n\n  <h3>Comparison: SSR vs CSR vs Pre-rendering</h3>\n  <table class=\"comparison-table\">\n    <thead>\n      <tr>\n        <th>Feature</th>\n        <th>Server-Side Rendering (SSR)</th>\n        <th>Client-Side Rendering (CSR)</th>\n        <th>Static Pre-rendering</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Initial Load Time</td>\n        <td>Fast (HTML ready)</td>\n        <td>Slower (wait for JS)</td>\n        <td>Fastest (pre-built HTML)</td>\n      </tr>\n      <tr>\n        <td>SEO</td>\n        <td>Good</td>\n        <td>Limited</td>\n        <td>Excellent</td>\n      </tr>\n      <tr>\n        <td>Server Load</td>\n        <td>High (per request)</td>\n        <td>Low</td>\n        <td>Build-time only</td>\n      </tr>\n      <tr>\n        <td>Dynamic Content</td>\n        <td>Supported</td>\n        <td>Supported</td>\n        <td>Limited (build-time only)</td>\n      </tr>\n      <tr>\n        <td>Development Complexity</td>\n        <td>Higher</td>\n        <td>Lower</td>\n        <td>Medium</td>\n      </tr>\n      <tr>\n        <td>Infrastructure</td>\n        <td>Node.js server</td>\n        <td>Static hosting</td>\n        <td>Static hosting</td>\n      </tr>\n    </tbody>\n  </table>\n</ng-template>\n\n<ng-template #relatedTopicsTemplate>\n  <h2>Related Topics</h2>\n\n  <ul>\n    <li>\n      <strong>Server-Side Rendering (SSR):</strong> The underlying concept behind Angular Universal\n    </li>\n    <li>\n      <strong>Hydration:</strong> Process of attaching event listeners to server-rendered HTML\n    </li>\n    <li>\n      <strong>Partial Hydration:</strong> Selectively hydrating only parts of your application\n    </li>\n    <li>\n      <strong>TransferState:</strong> API for transferring state from server to client\n    </li>\n    <li>\n      <strong>Pre-rendering:</strong> Generating static HTML at build time rather than per request\n    </li>\n    <li>\n      <strong>App Shell:</strong> Minimal UI shown during app loading\n    </li>\n    <li>\n      <strong>SEO (Search Engine Optimization):</strong> Improving discoverability in search results\n    </li>\n    <li>\n      <strong>Express.js:</strong> Common Node.js framework used with Angular Universal\n    </li>\n  </ul>\n\n  <h3>Recent Angular Universal Updates</h3>\n  <p>\n    Angular 19 brings several improvements to Universal:\n  </p>\n  <ul>\n    <li>Improved performance for server-side rendering</li>\n    <li>Better integration with Angular signals</li>\n    <li>Enhanced hydration capabilities</li>\n    <li>Support for partial hydration</li>\n    <li>More streamlined setup process</li>\n  </ul>\n</ng-template>\n"],"names":["CommonModule","HighlightModule","UnsubscribeService","i0","UniversalComponent","constructor","selectors","viewQuery","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}