{"version":3,"file":"src_app_feature_angular_concepts_input-transform_index_ts.js","mappings":"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","sources":["./src/app/feature/angular/concepts/input-transform/index.ts","./src/app/feature/angular/concepts/input-transform/input-transform.component.ts","./src/app/feature/angular/concepts/input-transform/input-transform.component.html"],"sourcesContent":["export { InputTransformComponent } from './input-transform.component';\n","import { HttpClient } from '@angular/common/http';\nimport { Component, ViewChild, TemplateRef, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HighlightModule } from 'ngx-highlightjs';\nimport { UnsubscribeService } from 'src/app/utils/services/unsubscribe.service';\n\n@Component({\n  selector: 'app-input-transform',\n  standalone: true,\n  imports: [CommonModule, HighlightModule],\n  templateUrl: './input-transform.component.html',\n  styleUrls: ['./input-transform.component.scss']\n})\nexport class InputTransformComponent extends UnsubscribeService implements OnInit {\n  selectedTab = 1;\n\n  // Template references\n  @ViewChild('notesRef') notesRef!: TemplateRef<any>;\n  @ViewChild('bestRef') bestRef!: TemplateRef<any>;\n  @ViewChild('prosConsRef') prosConsRef!: TemplateRef<any>;\n  @ViewChild('topicsRef') topicsRef!: TemplateRef<any>;\n\n  // Code examples for Input Transform\n  basicExampleCode: string = `// Basic Input Transform Example\nimport { Component, input } from '@angular/core';\n\n@Component({\n  selector: 'app-price-display',\n  standalone: true,\n  template: \\`\n    <div class=\"price\">{{ price() }}</div>\n  \\`\n})\nexport class PriceDisplayComponent {\n  // Transform a number into a formatted currency string\n  price = input<number>(0, {\n    transform: (value: number) => \\`$\\${value.toFixed(2)}\\`\n  });\n}\n\n// Usage in parent component\n@Component({\n  selector: 'app-parent',\n  template: \\`\n    <app-price-display [price]=\"productPrice\" />\n  \\`\n})\nexport class ParentComponent {\n  productPrice = 25.99;\n}`;\n\n  multiInputExampleCode: string = `// Multiple Input Transforms\nimport { Component, input } from '@angular/core';\n\n@Component({\n  selector: 'app-user-card',\n  standalone: true,\n  template: \\`\n    <div class=\"card\">\n      <div class=\"name\">{{ fullName() }}</div>\n      <div class=\"username\">{{ username() }}</div>\n      <div class=\"joined\">Member since: {{ joinDate() }}</div>\n    </div>\n  \\`\n})\nexport class UserCardComponent {\n  // Transform first and last name into a full name\n  firstName = input<string>('', {\n    alias: 'first'\n  });\n\n  lastName = input<string>('', {\n    alias: 'last'\n  });\n\n  // Derive fullName from firstName and lastName\n  fullName = input<string>('', {\n    transform: () => {\n      return \\`\\${this.firstName()} \\${this.lastName()}\\`.trim();\n    }\n  });\n\n  // Validate and transform username\n  username = input<string>('', {\n    transform: (value: string) => {\n      // Convert to lowercase and remove spaces\n      return value.toLowerCase().replace(/\\\\s/g, '');\n    }\n  });\n\n  // Format date string\n  joinTimestamp = input<number>(0);\n\n  joinDate = input<string>('', {\n    transform: () => {\n      const date = new Date(this.joinTimestamp());\n      return date.toLocaleDateString();\n    }\n  });\n}`;\n\n  complexTransformExampleCode: string = `// Complex Transforms with Input Functions\nimport { Component, input, computed } from '@angular/core';\n\ninterface Product {\n  id: number;\n  name: string;\n  price: number;\n  inStock: boolean;\n}\n\n@Component({\n  selector: 'app-product-card',\n  standalone: true,\n  template: \\`\n    <div class=\"product\" [class.out-of-stock]=\"!isAvailable()\">\n      <h3>{{ product().name }}</h3>\n      <div class=\"price\">{{ formattedPrice() }}</div>\n      <div class=\"status\">{{ statusMessage() }}</div>\n    </div>\n  \\`\n})\nexport class ProductCardComponent {\n  // Transform raw product data with validation\n  product = input<Product>({\n    id: 0,\n    name: 'Unknown',\n    price: 0,\n    inStock: false\n  }, {\n    transform: (value: any) => {\n      // Validate and provide defaults for missing properties\n      return {\n        id: value?.id ?? 0,\n        name: value?.name ?? 'Unknown Product',\n        price: parseFloat(value?.price) || 0,\n        inStock: Boolean(value?.inStock)\n      };\n    }\n  });\n\n  // Derived state from the transformed input\n  isAvailable = computed(() => this.product().inStock);\n\n  formattedPrice = computed(() => {\n    const price = this.product().price;\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(price);\n  });\n\n  statusMessage = computed(() => {\n    return this.isAvailable() ? 'In Stock' : 'Out of Stock';\n  });\n}`;\n\n  v19EnhancementsCode: string = `// Angular 19 Input Transform Enhancements\nimport { Component, input, model, computed } from '@angular/core';\n\n// 1. Reactive transform with computed values\n@Component({\n  selector: 'app-reactive-transform',\n  template: \\`<div>{{ displayValue() }}</div>\\`\n})\nexport class ReactiveTransformComponent {\n  // Base input\n  count = input<number>(0);\n\n  // Transform that automatically updates when dependencies change\n  displayValue = input<string>('', {\n    transform: () => {\n      const currentCount = this.count();\n      if (currentCount <= 0) return 'No items';\n      if (currentCount === 1) return '1 item';\n      return \\`\\${currentCount} items\\`;\n    }\n  });\n}\n\n// 2. Two-way binding with model() and transform\n@Component({\n  selector: 'app-currency-input',\n  template: \\`\n    <input\n      type=\"text\"\n      [value]=\"displayValue()\"\n      (input)=\"updateValue($event)\"\n    />\n  \\`\n})\nexport class CurrencyInputComponent {\n  // Two-way bindable model with transform\n  amount = model<number>(0);\n\n  // Format for display\n  displayValue = computed(() => {\n    return \\`$\\${this.amount().toFixed(2)}\\`;\n  });\n\n  // Parse user input back to number\n  updateValue(event: Event) {\n    const input = (event.target as HTMLInputElement).value;\n    // Remove currency symbol and convert to number\n    const numericValue = parseFloat(input.replace(/[^0-9.-]+/g, ''));\n\n    if (!isNaN(numericValue)) {\n      this.amount.set(numericValue);\n    }\n  }\n}\n\n// 3. Async transform with error handling\n@Component({\n  selector: 'app-async-transform',\n  template: \\`\n    <div *ngIf=\"userData().status === 'loading'\">Loading...</div>\n    <div *ngIf=\"userData().status === 'error'\">Error: {{ userData().error }}</div>\n    <div *ngIf=\"userData().status === 'success'\">\n      Welcome, {{ userData().data?.name }}!\n    </div>\n  \\`\n})\nexport class AsyncTransformComponent {\n  userId = input<string>('');\n\n  userData = input<{\n    status: 'loading' | 'success' | 'error';\n    data?: any;\n    error?: string;\n  }>({ status: 'loading' }, {\n    transform: async (id: string) => {\n      if (!id) return { status: 'error', error: 'No user ID provided' };\n\n      try {\n        // Mark as loading during fetch\n        this.userData.set({ status: 'loading' });\n\n        const response = await fetch(\\`https://api.example.com/users/\\${id}\\`);\n        if (!response.ok) throw new Error('Failed to fetch user data');\n\n        const data = await response.json();\n        return { status: 'success', data };\n      } catch (error) {\n        return {\n          status: 'error',\n          error: error instanceof Error ? error.message : 'Unknown error'\n        };\n      }\n    }\n  });\n}`;\n\n  architectureExampleCode: string = `// Architecture Patterns with Input Transform\nimport { Component, input, computed, inject } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { filter, debounceTime, switchMap } from 'rxjs/operators';\nimport { UserService } from './user.service';\n\n// 1. Service Integration\n@Component({\n  selector: 'app-user-search',\n  template: \\`\n    <div class=\"search-results\">\n      <div *ngFor=\"let user of processedUsers()\">\n        {{ user.displayName }}\n      </div>\n    </div>\n  \\`\n})\nexport class UserSearchComponent {\n  private userService = inject(UserService);\n\n  // Transform raw query into normalized search term\n  searchQuery = input<string>('', {\n    transform: (value: string) => value.trim().toLowerCase()\n  });\n\n  // Process user data with transforms\n  processedUsers = input<any[]>([], {\n    transform: async (query: string) => {\n      if (query.length < 2) return [];\n\n      const users = await this.userService.searchUsers(query).toPromise();\n      return users.map(user => ({\n        ...user,\n        displayName: \\`\\${user.firstName} \\${user.lastName}\\`,\n        initials: \\`\\${user.firstName[0]}\\${user.lastName[0]}\\`.toUpperCase()\n      }));\n    }\n  });\n}\n\n// 2. Form Integration\n@Component({\n  selector: 'app-address-form',\n  template: \\`<!-- Form template -->\\`\n})\nexport class AddressFormComponent {\n  // Transform and validate postal code\n  postalCode = input<string>('', {\n    transform: (value: string) => {\n      // Format as XXXXX or XXXXX-XXXX\n      const cleaned = value.replace(/[^0-9]/g, '');\n      if (cleaned.length <= 5) return cleaned;\n      return \\`\\${cleaned.slice(0, 5)}-\\${cleaned.slice(5, 9)}\\`;\n    }\n  });\n\n  // Validate postal code\n  isValidPostalCode = computed(() => {\n    const code = this.postalCode();\n    return /^\\\\d{5}(-\\\\d{4})?$/.test(code);\n  });\n}`;\n\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  ngOnInit() {\n    // Nothing to do here\n  }\n}\n","<section class=\"p-4 text-sm\">\n  <p class=\"heading-1 mb-2\">\n    Input Transform\n  </p>\n\n  <div class=\"text-content\">\n    <p>\n      <span class=\"text-zinc-50 tw-font-medium\">Input Transform</span>\n      is a powerful feature in Angular 19 that allows you to transform input values as they enter a component, providing clean data manipulation, validation, and formatting without cluttering component logic.\n    </p>\n\n    <br>\n\n    <div class=\"flex flex-col\">\n      <div class=\"flex border-b border-gray-200\">\n        <button (click)=\"selectedTab = 1\" [class.text-rose-300]=\"selectedTab===1\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Notes\n        </button>\n        <button (click)=\"selectedTab = 2\" [class.text-rose-300]=\"selectedTab===2\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Best Practices\n        </button>\n        <button (click)=\"selectedTab = 3\" [class.text-rose-300]=\"selectedTab===3\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Pros and Cons\n        </button>\n        <button (click)=\"selectedTab = 4\" [class.text-rose-300]=\"selectedTab===4\" class=\"text-sky-400 hover:text-rose-400 font-semibold py-2 px-4 border-b-2 border-transparent hover:border-gray-500 focus:outline-none\">\n          Related Topics\n        </button>\n      </div>\n      <div class=\"p-4\">\n        <ng-container [ngSwitch]=\"selectedTab\">\n          <div *ngSwitchCase=\"2\">\n            <ng-container *ngTemplateOutlet=\"bestRef\"></ng-container>\n          </div>\n          <div *ngSwitchCase=\"3\">\n            <ng-container *ngTemplateOutlet=\"prosConsRef\"></ng-container>\n          </div>\n          <div *ngSwitchCase=\"4\">\n            <ng-container *ngTemplateOutlet=\"topicsRef\"></ng-container>\n          </div>\n          <div *ngSwitchDefault>\n            <ng-container *ngTemplateOutlet=\"notesRef\"></ng-container>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n\n  </div>\n</section>\n\n<ng-template #notesRef>\n  <p>What is Input Transform?</p>\n  <ul class=\"list-disc pl-4 text-sm\">\n    <li>\n      <strong>Input Property Transformation</strong>:\n      A feature that lets you transform input values as they enter a component.\n    </li>\n    <li>\n      <strong>Reactive Integration</strong>:\n      Works seamlessly with Angular's signal-based reactivity system.\n    </li>\n    <li>\n      <strong>Cleaner Component Logic</strong>:\n      Moves data manipulation logic directly into the input declaration.\n    </li>\n    <li>\n      <strong>Type-Safe Transformations</strong>:\n      Maintains TypeScript type safety throughout the transformation pipeline.\n    </li>\n  </ul>\n\n  <br>\n  <br>\n\n  <p>Basic Input Transform Example</p>\n  <button (click)=\"code1.hidden = !code1.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n\n  <span #code1 hidden copyToClipboard>\n    <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n      <span>typescript</span>\n      <span class=\"copy-button-wrapper bg-gray-700\"></span>\n    </div>\n\n    <pre>\n      <code\n        [highlight]=\"basicExampleCode\"\n        [languages]=\"['typescript']\">\n      </code>\n    </pre>\n  </span>\n\n  <br>\n  <br>\n\n  <p>Multiple Input Transforms</p>\n  <button (click)=\"code2.hidden = !code2.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n\n  <span #code2 hidden copyToClipboard>\n    <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n      <span>typescript</span>\n      <span class=\"copy-button-wrapper bg-gray-700\"></span>\n    </div>\n\n    <pre>\n      <code\n        [highlight]=\"multiInputExampleCode\"\n        [languages]=\"['typescript']\">\n      </code>\n    </pre>\n  </span>\n\n  <br>\n  <br>\n\n  <p>Complex Transforms with Input Functions</p>\n  <button (click)=\"code3.hidden = !code3.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n\n  <span #code3 hidden copyToClipboard>\n    <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n      <span>typescript</span>\n      <span class=\"copy-button-wrapper bg-gray-700\"></span>\n    </div>\n\n    <pre>\n      <code\n        [highlight]=\"complexTransformExampleCode\"\n        [languages]=\"['typescript']\">\n      </code>\n    </pre>\n  </span>\n\n  <br>\n  <br>\n\n  <p>Angular 19 Input Transform Enhancements</p>\n  <button (click)=\"code4.hidden = !code4.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n\n  <span #code4 hidden copyToClipboard>\n    <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n      <span>typescript</span>\n      <span class=\"copy-button-wrapper bg-gray-700\"></span>\n    </div>\n\n    <pre>\n      <code\n        [highlight]=\"v19EnhancementsCode\"\n        [languages]=\"['typescript']\">\n      </code>\n    </pre>\n  </span>\n\n  <br>\n  <br>\n\n  <p>Architecture Patterns with Input Transform</p>\n  <button (click)=\"code5.hidden = !code5.hidden\" class=\"border border-rose-400 rounded-md px-1 text-sky-400\">code</button>\n\n  <span #code5 hidden copyToClipboard>\n    <div class=\"flex flex-row justify-between items-center bg-gray-900 px-4 py-2 relative top-5\">\n      <span>typescript</span>\n      <span class=\"copy-button-wrapper bg-gray-700\"></span>\n    </div>\n\n    <pre>\n      <code\n        [highlight]=\"architectureExampleCode\"\n        [languages]=\"['typescript']\">\n      </code>\n    </pre>\n  </span>\n\n  <br>\n  <br>\n\n  <p>Input Transform Key Features</p>\n  <table class=\"w-full border-collapse rounded-lg overflow-hidden shadow-md\">\n    <thead>\n      <tr class=\"bg-gray-800 text-gray-100\">\n        <th class=\"py-3 px-4 text-left\">Feature</th>\n        <th class=\"py-3 px-4 text-left\">Description</th>\n        <th class=\"py-3 px-4 text-left\">Benefits</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr class=\"border-b border-gray-700 bg-gray-900 hover:bg-gray-800 transition-colors\">\n        <td class=\"py-3 px-4\">Value Transformation</td>\n        <td class=\"py-3 px-4\">Transform raw input values into formatted, validated data</td>\n        <td class=\"py-3 px-4\">Clean data always available in component without extra logic</td>\n      </tr>\n      <tr class=\"border-b border-gray-700 bg-gray-950 hover:bg-gray-800 transition-colors\">\n        <td class=\"py-3 px-4\">Dependency Tracking</td>\n        <td class=\"py-3 px-4\">Transforms can depend on other inputs or signals</td>\n        <td class=\"py-3 px-4\">Automatically updates when dependencies change</td>\n      </tr>\n      <tr class=\"border-b border-gray-700 bg-gray-900 hover:bg-gray-800 transition-colors\">\n        <td class=\"py-3 px-4\">Type Safety</td>\n        <td class=\"py-3 px-4\">Full TypeScript support for input and output types</td>\n        <td class=\"py-3 px-4\">Prevents errors and improves development experience</td>\n      </tr>\n      <tr class=\"bg-gray-950 hover:bg-gray-800 transition-colors\">\n        <td class=\"py-3 px-4\">Async Support</td>\n        <td class=\"py-3 px-4\">Transform functions can be asynchronous</td>\n        <td class=\"py-3 px-4\">Enables API calls or complex async operations in transforms</td>\n      </tr>\n    </tbody>\n  </table>\n</ng-template>\n\n<ng-template #bestRef>\n  <ol class=\"list-decimal px-4 text-sm\">\n    <li>\n      <strong class=\"text-sky-400\">Keep Transforms Pure and Focused</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong>Single Responsibility</strong>:\n          Each transform should have a clear, single purpose (formatting, validation, etc.).\n        </li>\n        <li>\n          <strong>Avoid Side Effects</strong>:\n          Transforms should not change component state or trigger external actions.\n        </li>\n        <li>\n          <strong>Prefer Immutability</strong>:\n          Return new objects rather than mutating input values.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong class=\"text-sky-400\">Plan Your Transform Dependencies</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong>Dependency Order</strong>:\n          Define inputs in the proper order if transforms depend on other inputs.\n        </li>\n        <li>\n          <strong>Avoid Circular Dependencies</strong>:\n          Don't create transforms that depend on each other in a circular manner.\n        </li>\n        <li>\n          <strong>Use Computed for Derived Values</strong>:\n          If you only need to derive values without transforming inputs, use computed() instead.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong class=\"text-sky-400\">Handle Edge Cases Gracefully</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong>Default Values</strong>:\n          Always provide sensible defaults for when inputs are undefined.\n        </li>\n        <li>\n          <strong>Validation</strong>:\n          Include appropriate validation in transforms to prevent unexpected values.\n        </li>\n        <li>\n          <strong>Error Handling</strong>:\n          Properly handle errors in transforms, especially for async transforms.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong class=\"text-sky-400\">Optimize for Performance</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong>Keep Transforms Efficient</strong>:\n          Avoid computationally intensive operations in transforms that run frequently.\n        </li>\n        <li>\n          <strong>Debounce Frequent Changes</strong>:\n          For inputs that change rapidly, consider implementing debouncing.\n        </li>\n        <li>\n          <strong>Cache Complex Results</strong>:\n          Use memoization techniques for expensive transformations.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong class=\"text-sky-400\">Document Your Transforms</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong>Clear Comments</strong>:\n          Document what each transform does, especially for complex transforms.\n        </li>\n        <li>\n          <strong>Type Annotations</strong>:\n          Use explicit TypeScript types for both input and output of transforms.\n        </li>\n        <li>\n          <strong>Document Assumptions</strong>:\n          Make clear any assumptions about input values or dependencies.\n        </li>\n      </ul>\n    </li>\n  </ol>\n</ng-template>\n\n<ng-template #prosConsRef>\n  <strong class=\"text-sky-400\">\n    Pros:\n  </strong>\n\n  <br>\n\n  <ol class=\"list-decimal px-10 text-sm\">\n    <li>\n      <strong>Cleaner Component Logic</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Declarative Approach</span>:\n          Transforms move data manipulation logic directly into input declarations.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Reduced Boilerplate</span>:\n          Eliminates the need for separate getters/setters or ngOnChanges.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Self-Contained Logic</span>:\n          Keep input handling logic close to where the input is defined.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Enhanced Type Safety</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Strong Typing</span>:\n          Full TypeScript support for both incoming values and transformed results.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Compile-Time Checks</span>:\n          Type errors are caught at compile time rather than runtime.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Better IntelliSense</span>:\n          Improved IDE support for working with transformed values.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Reactive Integration</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Seamless Signal Integration</span>:\n          Works perfectly with Angular's signal-based reactivity system.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Automatic Updates</span>:\n          Transforms re-run automatically when dependencies change.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Fine-Grained Reactivity</span>:\n          Updates only components affected by input changes.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Better Reusability</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Encapsulated Validation</span>:\n          Components can handle their own input validation.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Standardized Interfaces</span>:\n          Transforms can normalize different input formats to a standard internal format.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Clean Component APIs</span>:\n          Makes components more self-contained and easier to reuse.\n        </li>\n      </ul>\n    </li>\n  </ol>\n\n  <br>\n  <br>\n\n  <strong class=\"text-sky-400\">\n    Cons:\n  </strong>\n\n  <br>\n\n  <ol class=\"list-decimal px-10 text-sm\">\n    <li>\n      <strong>Potential Complexity</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Dependency Tracking</span>:\n          Complex dependency chains between transforms can be difficult to understand.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Hidden Logic</span>:\n          Transform logic can be less visible than explicit methods.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Debugging Challenges</span>:\n          Issues within transforms can sometimes be harder to debug.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Performance Considerations</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Execution Frequency</span>:\n          Transforms might run more often than needed if dependencies change frequently.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Resource Usage</span>:\n          Complex transforms on large data structures can impact performance.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Memory Overhead</span>:\n          Creating new objects in transforms can increase memory usage.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Learning Curve</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">New Pattern</span>:\n          Developers need to learn this new approach to input handling.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Conceptual Shift</span>:\n          Requires understanding reactive programming concepts.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Pattern Evolution</span>:\n          Best practices for input transforms are still evolving.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Limited Backward Compatibility</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Angular Version Requirement</span>:\n          Only available in Angular 19+, not usable in older projects.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Migration Effort</span>:\n          Converting existing input patterns to use transforms requires refactoring.\n        </li>\n        <li>\n          <span class=\"text-zinc-50 tw-font-medium\">Signal Dependency</span>:\n          Fully leveraging transforms requires adopting the signals architecture.\n        </li>\n      </ul>\n    </li>\n  </ol>\n</ng-template>\n\n<ng-template #topicsRef>\n  <ol class=\"list-decimal px-10 text-sm\">\n    <li>\n      <strong>Angular Signals</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Angular's reactive primitives for state management.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Input Transform</strong>:\n          Input transforms are built on the signals architecture and can depend on signal values.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Computed Values</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Derived values that automatically update when their dependencies change.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Input Transform</strong>:\n          Input transforms can use computed values, and computed values can use transformed inputs.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Two-Way Binding with model()</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Angular 19's approach to two-way data binding using signals.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Input Transform</strong>:\n          Can be combined with input transforms for more powerful two-way binding patterns.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Form Control Validation</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Validating and processing user input in forms.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Input Transform</strong>:\n          Input transforms can provide an alternative approach to form value processing and validation.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Change Detection</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          How Angular detects and responds to state changes.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Input Transform</strong>:\n          Input transforms participate in signal-based change detection, improving performance.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Component Architecture</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Patterns for structuring Angular components and their interactions.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Input Transform</strong>:\n          Transforms can simplify component APIs and improve component boundaries.\n        </li>\n      </ul>\n    </li>\n    <li>\n      <strong>Zoneless Applications</strong>\n      <ul class=\"list-disc pl-4\">\n        <li>\n          <strong class=\"text-sky-400\">Description</strong>:\n          Angular applications that don't rely on Zone.js for change detection.\n        </li>\n        <li>\n          <strong class=\"text-sky-400\">Relation to Input Transform</strong>:\n          Input transforms work well in zoneless applications as part of the signals architecture.\n        </li>\n      </ul>\n    </li>\n  </ol>\n</ng-template>\n"],"names":["InputTransformComponent","CommonModule","HighlightModule","UnsubscribeService","i0","constructor","http","ngOnInit","selectors","viewQuery","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}