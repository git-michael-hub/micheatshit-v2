"use strict";(self.webpackChunktailwind=self.webpackChunktailwind||[]).push([[706],{706:(T,d,a)=>{a.r(d),a.d(d,{ComponentComponent:()=>s});var c=a(6895),u=a(827),p=a(8512),e=a(8256);const g=["basicComponentCodeEl"],m=["signalComponentCodeEl"],Z=["lifecycleHooksCodeEl"],h=["deferredComponentsCodeEl"],l=function(){return["typescript"]};function _(o,r){if(1&o){const n=e.EpF();e.TgZ(0,"div")(1,"p"),e._uU(2,"Component Fundamentals"),e.qZA(),e.TgZ(3,"ul",9)(4,"li")(5,"strong"),e._uU(6,"Basic Component Structure"),e.qZA(),e.TgZ(7,"ul",10)(8,"li"),e._uU(9,"Components consist of a TypeScript class with the "),e.TgZ(10,"code"),e._uU(11,"@Component"),e.qZA(),e._uU(12," decorator"),e.qZA(),e.TgZ(13,"li"),e._uU(14,"Every component needs a template (inline or external) defining its view"),e.qZA(),e.TgZ(15,"li"),e._uU(16,"Components can include styles, which are encapsulated by default"),e.qZA(),e.TgZ(17,"li"),e._uU(18,"Modern components are typically standalone and self-contained"),e.qZA(),e.TgZ(19,"button",11),e.NdJ("click",function(){e.CHM(n);const i=e.MAs(22);return e.KtG(i.hidden=!i.hidden)}),e._uU(20,"code"),e.qZA(),e.TgZ(21,"span",12,13)(23,"div",14)(24,"span"),e._uU(25,"typescript"),e.qZA(),e._UZ(26,"span",15),e.qZA(),e.TgZ(27,"pre"),e._uU(28,"                    "),e._UZ(29,"code",16),e._uU(30,"\n                  "),e.qZA()()()(),e.TgZ(31,"li")(32,"strong"),e._uU(33,"Component Decorators and Metadata"),e.qZA(),e.TgZ(34,"ul",10)(35,"li")(36,"code"),e._uU(37,"@Component"),e.qZA(),e._uU(38," defines the core metadata for a component"),e.qZA(),e.TgZ(39,"li"),e._uU(40,"Selector specifies the custom HTML tag used to instantiate the component"),e.qZA(),e.TgZ(41,"li"),e._uU(42,"Templates can be defined inline with "),e.TgZ(43,"code"),e._uU(44,"template"),e.qZA(),e._uU(45," or externally with "),e.TgZ(46,"code"),e._uU(47,"templateUrl"),e.qZA()(),e.TgZ(48,"li"),e._uU(49,"Similarly, styles can be defined with "),e.TgZ(50,"code"),e._uU(51,"styles"),e.qZA(),e._uU(52," or "),e.TgZ(53,"code"),e._uU(54,"styleUrls"),e.qZA()(),e.TgZ(55,"li"),e._uU(56,"The "),e.TgZ(57,"code"),e._uU(58,"changeDetection"),e.qZA(),e._uU(59," property controls how Angular detects changes"),e.qZA()()(),e.TgZ(60,"li")(61,"strong"),e._uU(62,"Component Lifecycle"),e.qZA(),e.TgZ(63,"ul",10)(64,"li"),e._uU(65,"Components have a well-defined lifecycle with specific hooks"),e.qZA(),e.TgZ(66,"li"),e._uU(67,"Angular calls these hooks at specific times during component execution"),e.qZA(),e.TgZ(68,"li"),e._uU(69,"Common hooks include "),e.TgZ(70,"code"),e._uU(71,"ngOnInit"),e.qZA(),e._uU(72,", "),e.TgZ(73,"code"),e._uU(74,"ngOnChanges"),e.qZA(),e._uU(75,", and "),e.TgZ(76,"code"),e._uU(77,"ngOnDestroy"),e.qZA()(),e.TgZ(78,"li"),e._uU(79,"Lifecycle hooks allow implementing custom logic at different stages"),e.qZA(),e.TgZ(80,"button",11),e.NdJ("click",function(){e.CHM(n);const i=e.MAs(83);return e.KtG(i.hidden=!i.hidden)}),e._uU(81,"code"),e.qZA(),e.TgZ(82,"span",12,17)(84,"div",14)(85,"span"),e._uU(86,"typescript"),e.qZA(),e._UZ(87,"span",15),e.qZA(),e.TgZ(88,"pre"),e._uU(89,"                    "),e._UZ(90,"code",16),e._uU(91,"\n                  "),e.qZA()()()()(),e._UZ(92,"br")(93,"br"),e.TgZ(94,"p"),e._uU(95,"Angular 19 Component Enhancements"),e.qZA(),e.TgZ(96,"ul",9)(97,"li")(98,"strong"),e._uU(99,"Signal-based Components"),e.qZA(),e.TgZ(100,"ul",10)(101,"li"),e._uU(102,"Angular 19 fully integrates signals into the component architecture"),e.qZA(),e.TgZ(103,"li"),e._uU(104,"Signal-based inputs simplify component communication"),e.qZA(),e.TgZ(105,"li"),e._uU(106,"Signal-based reactive state management is more efficient than traditional approaches"),e.qZA(),e.TgZ(107,"li"),e._uU(108,"Change detection is more granular and performance is improved"),e.qZA(),e.TgZ(109,"button",11),e.NdJ("click",function(){e.CHM(n);const i=e.MAs(112);return e.KtG(i.hidden=!i.hidden)}),e._uU(110,"code"),e.qZA(),e.TgZ(111,"span",12,18)(113,"div",14)(114,"span"),e._uU(115,"typescript"),e.qZA(),e._UZ(116,"span",15),e.qZA(),e.TgZ(117,"pre"),e._uU(118,"                    "),e._UZ(119,"code",16),e._uU(120,"\n                  "),e.qZA()()()(),e.TgZ(121,"li")(122,"strong"),e._uU(123,"Deferrable Components & Views"),e.qZA(),e.TgZ(124,"ul",10)(125,"li"),e._uU(126,"Angular 19 introduces the "),e.TgZ(127,"code"),e._uU(128,"@defer"),e.qZA(),e._uU(129," block for lazy-loading component content"),e.qZA(),e.TgZ(130,"li"),e._uU(131,"Deferred content loads only when specified conditions are met"),e.qZA(),e.TgZ(132,"li"),e._uU(133,"Loading, placeholder, and error states can be specified"),e.qZA(),e.TgZ(134,"li"),e._uU(135,"This feature enhances initial page load performance"),e.qZA(),e.TgZ(136,"button",11),e.NdJ("click",function(){e.CHM(n);const i=e.MAs(139);return e.KtG(i.hidden=!i.hidden)}),e._uU(137,"code"),e.qZA(),e.TgZ(138,"span",12,19)(140,"div",14)(141,"span"),e._uU(142,"typescript"),e.qZA(),e._UZ(143,"span",15),e.qZA(),e.TgZ(144,"pre"),e._uU(145,"                    "),e._UZ(146,"code",16),e._uU(147,"\n                  "),e.qZA()()()(),e.TgZ(148,"li")(149,"strong"),e._uU(150,"Hydration Improvements"),e.qZA(),e.TgZ(151,"ul",10)(152,"li"),e._uU(153,"Components can now specify their hydration strategy"),e.qZA(),e.TgZ(154,"li"),e._uU(155,"Partial hydration allows for more efficient client-side reuse of server-rendered components"),e.qZA(),e.TgZ(156,"li"),e._uU(157,"Components can be marked for manual hydration in performance-critical applications"),e.qZA(),e.TgZ(158,"li"),e._uU(159,"These features result in faster First Contentful Paint and Time to Interactive metrics"),e.qZA()()()(),e._UZ(160,"br")(161,"br"),e.TgZ(162,"p"),e._uU(163,"Component Types in Angular 19"),e.qZA(),e.TgZ(164,"table",20)(165,"thead")(166,"tr",21)(167,"th",22),e._uU(168,"Component Type"),e.qZA(),e.TgZ(169,"th",22),e._uU(170,"Description"),e.qZA(),e.TgZ(171,"th",22),e._uU(172,"Angular 19 Features"),e.qZA()()(),e.TgZ(173,"tbody")(174,"tr",23)(175,"td",24),e._uU(176,"Standalone Components"),e.qZA(),e.TgZ(177,"td",24),e._uU(178,"Self-contained, don't require NgModules"),e.qZA(),e.TgZ(179,"td",24),e._uU(180,"Improved performance, simplified dependencies"),e.qZA()(),e.TgZ(181,"tr",25)(182,"td",24),e._uU(183,"Presentational Components"),e.qZA(),e.TgZ(184,"td",24),e._uU(185,"Focus on UI, receive data via inputs"),e.qZA(),e.TgZ(186,"td",24),e._uU(187,"Signal inputs, performance optimizations"),e.qZA()(),e.TgZ(188,"tr",23)(189,"td",24),e._uU(190,"Container Components"),e.qZA(),e.TgZ(191,"td",24),e._uU(192,"Handle data fetching and state management"),e.qZA(),e.TgZ(193,"td",24),e._uU(194,"Improved signal-based state management"),e.qZA()(),e.TgZ(195,"tr",25)(196,"td",24),e._uU(197,"Dynamic Components"),e.qZA(),e.TgZ(198,"td",24),e._uU(199,"Created and loaded at runtime"),e.qZA(),e.TgZ(200,"td",24),e._uU(201,"Enhanced dynamic component loading API"),e.qZA()(),e.TgZ(202,"tr",23)(203,"td",24),e._uU(204,"Layout Components"),e.qZA(),e.TgZ(205,"td",24),e._uU(206,"Structure other components, often use content projection"),e.qZA(),e.TgZ(207,"td",24),e._uU(208,"Enhanced content projection performance"),e.qZA()(),e.TgZ(209,"tr",25)(210,"td",24),e._uU(211,"Page/Route Components"),e.qZA(),e.TgZ(212,"td",24),e._uU(213,"Top-level components for routes"),e.qZA(),e.TgZ(214,"td",24),e._uU(215,"Improved SSR integration and hydration"),e.qZA()(),e.TgZ(216,"tr",23)(217,"td",24),e._uU(218,"Deferrable Components"),e.qZA(),e.TgZ(219,"td",24),e._uU(220,"Components with lazy loaded parts"),e.qZA(),e.TgZ(221,"td",24),e._uU(222,"New @defer syntax for conditional loading"),e.qZA()()()()()}if(2&o){const n=e.oxw();e.xp6(29),e.Q6J("highlight",n.basicComponentCode)("languages",e.DdM(8,l)),e.xp6(61),e.Q6J("highlight",n.lifecycleHooksCode)("languages",e.DdM(9,l)),e.xp6(29),e.Q6J("highlight",n.signalComponentCode)("languages",e.DdM(10,l)),e.xp6(27),e.Q6J("highlight",n.deferredComponentsCode)("languages",e.DdM(11,l))}}function f(o,r){1&o&&(e.TgZ(0,"div")(1,"ol",26)(2,"li")(3,"strong",27),e._uU(4,"Keep Components Focused and Cohesive"),e.qZA(),e.TgZ(5,"ul",10)(6,"li"),e._uU(7,"Each component should have a single responsibility"),e.qZA(),e.TgZ(8,"li"),e._uU(9,"Break large components into smaller, reusable ones"),e.qZA(),e.TgZ(10,"li"),e._uU(11,"Follow the Single Responsibility Principle"),e.qZA(),e.TgZ(12,"li"),e._uU(13,"Keep component templates under 100 lines for maintainability"),e.qZA(),e.TgZ(14,"li"),e._uU(15,"Consider using sub-components for complex UI sections"),e.qZA()()(),e.TgZ(16,"li")(17,"strong",27),e._uU(18,"Optimize Change Detection"),e.qZA(),e.TgZ(19,"ul",10)(20,"li"),e._uU(21,"Use OnPush change detection for performance improvements"),e.qZA(),e.TgZ(22,"li"),e._uU(23,"Leverage signals for reactive, granular updates"),e.qZA(),e.TgZ(24,"li"),e._uU(25,"Make components immutable where possible"),e.qZA(),e.TgZ(26,"li"),e._uU(27,"Avoid deep object mutations that can trigger change detection"),e.qZA(),e.TgZ(28,"li"),e._uU(29,"Use async pipe in templates to automatically handle subscriptions"),e.qZA()()(),e.TgZ(30,"li")(31,"strong",27),e._uU(32,"Implement Smart Component Architecture"),e.qZA(),e.TgZ(33,"ul",10)(34,"li"),e._uU(35,"Separate components into presentational and container types"),e.qZA(),e.TgZ(36,"li"),e._uU(37,"Presentational components should be pure and focus on display"),e.qZA(),e.TgZ(38,"li"),e._uU(39,"Container components should handle data fetching and business logic"),e.qZA(),e.TgZ(40,"li"),e._uU(41,"Use inputs/outputs for component communication"),e.qZA(),e.TgZ(42,"li"),e._uU(43,"Consider signal-based inputs for improved performance"),e.qZA()()(),e.TgZ(44,"li")(45,"strong",27),e._uU(46,"Manage Component Lifecycle Appropriately"),e.qZA(),e.TgZ(47,"ul",10)(48,"li"),e._uU(49,"Implement "),e.TgZ(50,"code"),e._uU(51,"ngOnInit"),e.qZA(),e._uU(52," for initialization logic"),e.qZA(),e.TgZ(53,"li"),e._uU(54,"Clean up resources in "),e.TgZ(55,"code"),e._uU(56,"ngOnDestroy"),e.qZA(),e._uU(57," to prevent memory leaks"),e.qZA(),e.TgZ(58,"li"),e._uU(59,"Use "),e.TgZ(60,"code"),e._uU(61,"ngOnChanges"),e.qZA(),e._uU(62," to react to input changes"),e.qZA(),e.TgZ(63,"li"),e._uU(64,"Be cautious with "),e.TgZ(65,"code"),e._uU(66,"ngAfterViewInit"),e.qZA(),e._uU(67," to avoid ExpressionChangedAfterItHasBeenCheckedError"),e.qZA(),e.TgZ(68,"li"),e._uU(69,"Consider extending from UnsubscribeService or similar to manage subscriptions"),e.qZA()()(),e.TgZ(70,"li")(71,"strong",27),e._uU(72,"Enhance Performance with Angular 19 Features"),e.qZA(),e.TgZ(73,"ul",10)(74,"li"),e._uU(75,"Use standalone components to reduce bundle size"),e.qZA(),e.TgZ(76,"li"),e._uU(77,"Implement the @defer directive for lazy loading expensive content"),e.qZA(),e.TgZ(78,"li"),e._uU(79,"Consider partial hydration for SSR components"),e.qZA(),e.TgZ(80,"li"),e._uU(81,"Leverage signals for reactive state management"),e.qZA(),e.TgZ(82,"li"),e._uU(83,"Implement zoneless change detection when appropriate"),e.qZA()()()()())}function A(o,r){1&o&&(e.TgZ(0,"div")(1,"div",28)(2,"p",29),e._uU(3,"Advantages of Angular Components"),e.qZA(),e.TgZ(4,"ul",30)(5,"li")(6,"strong"),e._uU(7,"Encapsulation"),e.qZA(),e._uU(8,": Components bundle HTML, CSS, and TypeScript together"),e.qZA(),e.TgZ(9,"li")(10,"strong"),e._uU(11,"Reusability"),e.qZA(),e._uU(12,": Components can be reused throughout the application"),e.qZA(),e.TgZ(13,"li")(14,"strong"),e._uU(15,"Testability"),e.qZA(),e._uU(16,": Components are easy to test in isolation"),e.qZA(),e.TgZ(17,"li")(18,"strong"),e._uU(19,"Maintainability"),e.qZA(),e._uU(20,": Component architecture makes code more maintainable"),e.qZA(),e.TgZ(21,"li")(22,"strong"),e._uU(23,"Structure"),e.qZA(),e._uU(24,": Components provide clear structure to applications"),e.qZA(),e.TgZ(25,"li")(26,"strong"),e._uU(27,"Performance"),e.qZA(),e._uU(28,": Angular 19's signal-based components offer improved performance"),e.qZA(),e.TgZ(29,"li")(30,"strong"),e._uU(31,"Modularity"),e.qZA(),e._uU(32,": Components can be easily split, combined, or refactored"),e.qZA()(),e.TgZ(33,"p",29),e._uU(34,"Challenges with Angular Components"),e.qZA(),e.TgZ(35,"ul",30)(36,"li")(37,"strong"),e._uU(38,"Learning Curve"),e.qZA(),e._uU(39,": Component architecture can be complex for newcomers"),e.qZA(),e.TgZ(40,"li")(41,"strong"),e._uU(42,"Boilerplate"),e.qZA(),e._uU(43,": Components can require significant setup code"),e.qZA(),e.TgZ(44,"li")(45,"strong"),e._uU(46,"Over-decomposition"),e.qZA(),e._uU(47,": Breaking into too many small components can increase complexity"),e.qZA(),e.TgZ(48,"li")(49,"strong"),e._uU(50,"Communication Complexity"),e.qZA(),e._uU(51,": Component communication can become complex in large apps"),e.qZA(),e.TgZ(52,"li")(53,"strong"),e._uU(54,"Change Detection Pitfalls"),e.qZA(),e._uU(55,": OnPush and other optimizations can introduce subtle bugs"),e.qZA(),e.TgZ(56,"li")(57,"strong"),e._uU(58,"Bundle Size"),e.qZA(),e._uU(59,": Many components can increase overall bundle size if not lazy-loaded"),e.qZA(),e.TgZ(60,"li")(61,"strong"),e._uU(62,"Lifecycle Management"),e.qZA(),e._uU(63,": Complex lifecycle hooks can be difficult to reason about"),e.qZA()(),e.TgZ(64,"p",29),e._uU(65,"Angular 19 Component Improvements Over Previous Versions"),e.qZA(),e.TgZ(66,"table",31)(67,"thead")(68,"tr",21)(69,"th",22),e._uU(70,"Feature"),e.qZA(),e.TgZ(71,"th",22),e._uU(72,"Before Angular 19"),e.qZA(),e.TgZ(73,"th",22),e._uU(74,"Angular 19 Improvements"),e.qZA()()(),e.TgZ(75,"tbody")(76,"tr",32)(77,"td",24),e._uU(78,"State Management"),e.qZA(),e.TgZ(79,"td",24),e._uU(80,"NgRx, RxJS, or manual state handling"),e.qZA(),e.TgZ(81,"td",24),e._uU(82,"First-class signals integration for reactive state"),e.qZA()(),e.TgZ(83,"tr",33)(84,"td",24),e._uU(85,"Change Detection"),e.qZA(),e.TgZ(86,"td",24),e._uU(87,"Zone.js based or OnPush strategy"),e.qZA(),e.TgZ(88,"td",24),e._uU(89,"Signal-based fine-grained updates, zoneless support"),e.qZA()(),e.TgZ(90,"tr",32)(91,"td",24),e._uU(92,"Component Loading"),e.qZA(),e.TgZ(93,"td",24),e._uU(94,"Route-level lazy loading only"),e.qZA(),e.TgZ(95,"td",24),e._uU(96,"Component-level lazy loading with @defer"),e.qZA()(),e.TgZ(97,"tr",33)(98,"td",24),e._uU(99,"Component Input"),e.qZA(),e.TgZ(100,"td",24),e._uU(101,"Basic @Input() declaration"),e.qZA(),e.TgZ(102,"td",24),e._uU(103,"Signal inputs with transform functions"),e.qZA()(),e.TgZ(104,"tr",32)(105,"td",24),e._uU(106,"Server Rendering"),e.qZA(),e.TgZ(107,"td",24),e._uU(108,"Basic SSR with full hydration"),e.qZA(),e.TgZ(109,"td",24),e._uU(110,"Improved SSR with partial and manual hydration"),e.qZA()()()()()())}function U(o,r){1&o&&(e.TgZ(0,"div")(1,"div",28)(2,"p",29),e._uU(3,"Related Angular Concepts"),e.qZA(),e.TgZ(4,"ul",30)(5,"li")(6,"strong"),e._uU(7,"Directives"),e.qZA(),e._uU(8,": Add behavior to existing elements or components"),e.qZA(),e.TgZ(9,"li")(10,"strong"),e._uU(11,"Pipes"),e.qZA(),e._uU(12,": Transform data for display within component templates"),e.qZA(),e.TgZ(13,"li")(14,"strong"),e._uU(15,"Services"),e.qZA(),e._uU(16,": Share data and logic between components"),e.qZA(),e.TgZ(17,"li")(18,"strong"),e._uU(19,"Dependency Injection"),e.qZA(),e._uU(20,": Provide services and other dependencies to components"),e.qZA(),e.TgZ(21,"li")(22,"strong"),e._uU(23,"Signals"),e.qZA(),e._uU(24,": Reactive primitives for component state management"),e.qZA(),e.TgZ(25,"li")(26,"strong"),e._uU(27,"Content Projection"),e.qZA(),e._uU(28,": Allow components to receive and display external content"),e.qZA(),e.TgZ(29,"li")(30,"strong"),e._uU(31,"View Encapsulation"),e.qZA(),e._uU(32,": Control how component styles affect the application"),e.qZA()(),e.TgZ(33,"p",29),e._uU(34,"Component FAQ"),e.qZA(),e.TgZ(35,"ul",30)(36,"li")(37,"strong"),e._uU(38,"Q: How do I decide between regular and signal-based inputs in Angular 19?"),e.qZA(),e._UZ(39,"br"),e._uU(40," A: Use signal-based inputs when you need fine-grained reactivity and better change detection performance. Regular inputs are simpler and sufficient for basic cases where the input doesn't change frequently or if backward compatibility is required. Signal inputs are especially valuable for performance-critical components or those with complex data transformations. "),e.qZA(),e.TgZ(41,"li")(42,"strong"),e._uU(43,"Q: How can I optimize component performance in Angular 19?"),e.qZA(),e._UZ(44,"br"),e._uU(45," A: Use OnPush change detection, implement signal-based state, leverage the defer directive for lazy loading expensive content, use pure pipes for calculations, avoid excessive DOM manipulation, keep templates simple, and consider implementing zoneless change detection for performance-critical components. Also, ensure proper unsubscribing from observables to prevent memory leaks. "),e.qZA(),e.TgZ(46,"li")(47,"strong"),e._uU(48,"Q: What's the best way to communicate between components in Angular 19?"),e.qZA(),e._UZ(49,"br"),e._uU(50," A: For parent-child: use inputs and outputs, with signal inputs for better performance. For unrelated components: use services with signals or observables, or use a state management pattern. The new signal-based state makes communication simpler by allowing components to directly observe state changes in a performant way. For simple state, a service with signals is often sufficient; for complex state, consider SignalStore or NgRx. "),e.qZA(),e.TgZ(51,"li")(52,"strong"),e._uU(53,"Q: When should I use standalone components vs. module-based components?"),e.qZA(),e._UZ(54,"br"),e._uU(55," A: In Angular 19, standalone components are the recommended approach for most use cases. They're simpler to manage, easier to test, and allow for better tree-shaking. Use standalone components for new development and when refactoring existing code. Module-based components are primarily useful for legacy applications or when integrating with libraries that still require NgModules. "),e.qZA(),e.TgZ(56,"li")(57,"strong"),e._uU(58,"Q: How do I handle dynamic component creation in Angular 19?"),e.qZA(),e._UZ(59,"br"),e._uU(60," A: Angular 19 provides an improved API for dynamic component creation. Use ViewContainerRef's createComponent method, which now works well with standalone components. For advanced cases, you can use ComponentFactoryResolver. Component lazy loading can also be handled with the new defer block, which provides a cleaner way to conditionally load components with loading, error, and placeholder states. "),e.qZA()(),e.TgZ(61,"p",29),e._uU(62,"Useful Resources"),e.qZA(),e.TgZ(63,"ul",10)(64,"li")(65,"a",34),e._uU(66,"Angular Components Guide"),e.qZA()(),e.TgZ(67,"li")(68,"a",35),e._uU(69,"Angular Signals Documentation"),e.qZA()(),e.TgZ(70,"li")(71,"a",36),e._uU(72,"Deferrable Views Guide"),e.qZA()(),e.TgZ(73,"li")(74,"a",37),e._uU(75,"Standalone Components Guide"),e.qZA()(),e.TgZ(76,"li")(77,"a",38),e._uU(78,"Change Detection in Angular"),e.qZA()()()()())}class s extends p.Y{constructor(){super(...arguments),this.selectedTab=1,this.basicComponentCode="import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-greeting',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div class=\"greeting\">\n      <h2>Hello, {{ name }}!</h2>\n      <p>Welcome to Angular 19</p>\n      <button (click)=\"updateName()\">Change Name</button>\n    </div>\n  `,\n  styles: [`\n    .greeting {\n      padding: 1rem;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n    }\n    h2 {\n      color: #333;\n    }\n    button {\n      background: #0066cc;\n      color: white;\n      border: none;\n      padding: 0.5rem 1rem;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n  `]\n})\nexport class GreetingComponent {\n  name = 'World';\n\n  updateName() {\n    this.name = 'Angular Developer';\n  }\n}",this.signalComponentCode='import { Component, signal, computed, effect } from \'@angular/core\';\nimport { CommonModule } from \'@angular/common\';\nimport { FormsModule } from \'@angular/forms\';\n\n@Component({\n  selector: \'app-counter\',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  template: `\n    <div class="counter-container">\n      <h2>Signal-based Counter</h2>\n\n      <p>Current count: {{ count() }}</p>\n      <p>Doubled value: {{ doubled() }}</p>\n\n      <div class="actions">\n        <button (click)="increment()">Increment</button>\n        <button (click)="decrement()">Decrement</button>\n        <button (click)="reset()">Reset</button>\n      </div>\n\n      <div class="custom-value">\n        <label for="customValue">Set custom value:</label>\n        <input\n          id="customValue"\n          type="number"\n          [ngModel]="count()"\n          (ngModelChange)="updateCount($event)"\n        >\n      </div>\n\n      <div class="log-container">\n        <h3>Effect Log:</h3>\n        <ul>\n          <li *ngFor="let entry of logEntries()">{{ entry }}</li>\n        </ul>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .counter-container {\n      padding: 1rem;\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      max-width: 400px;\n    }\n    .actions {\n      display: flex;\n      gap: 0.5rem;\n      margin: 1rem 0;\n    }\n    button {\n      background: #0066cc;\n      color: white;\n      border: none;\n      padding: 0.5rem 1rem;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    .custom-value {\n      margin: 1rem 0;\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n    }\n    input {\n      padding: 0.5rem;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n    }\n    .log-container {\n      margin-top: 1rem;\n      border-top: 1px solid #eee;\n      padding-top: 1rem;\n    }\n  `]\n})\nexport class CounterComponent {\n  // Signal state\n  count = signal<number>(0);\n  logEntries = signal<string[]>([]);\n\n  // Computed value derived from state\n  doubled = computed(() => this.count() * 2);\n\n  constructor() {\n    // Effect to log changes\n    effect(() => {\n      const currentCount = this.count();\n      const newEntry = `Count changed to: ${currentCount} at ${new Date().toLocaleTimeString()}`;\n      this.logEntries.update(entries => [newEntry, ...entries.slice(0, 4)]);\n    });\n  }\n\n  increment() {\n    this.count.update(value => value + 1);\n  }\n\n  decrement() {\n    this.count.update(value => value - 1);\n  }\n\n  reset() {\n    this.count.set(0);\n  }\n\n  updateCount(newValue: number) {\n    this.count.set(newValue);\n  }\n}',this.lifecycleHooksCode="import { Component, OnInit, OnDestroy, AfterViewInit,\n  OnChanges, SimpleChanges, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-lifecycle-demo',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div class=\"lifecycle-container\">\n      <h2>Component Lifecycle Demo</h2>\n      <p>Current status: {{ status }}</p>\n      <div class=\"log-container\">\n        <h3>Lifecycle Log:</h3>\n        <ul>\n          <li *ngFor=\"let entry of lifecycleLog\" [class.highlighted]=\"entry.includes('ngOnInit')\">\n            {{ entry }}\n          </li>\n        </ul>\n      </div>\n      <button (click)=\"triggerChange()\">Trigger Change</button>\n    </div>\n  `,\n  styles: [`\n    .lifecycle-container {\n      padding: 1rem;\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      max-width: 500px;\n    }\n    .log-container {\n      max-height: 200px;\n      overflow-y: auto;\n      border: 1px solid #eee;\n      padding: 0.5rem;\n      margin: 1rem 0;\n    }\n    ul {\n      list-style-type: none;\n      padding: 0;\n    }\n    li {\n      padding: 0.25rem 0;\n      border-bottom: 1px solid #f5f5f5;\n    }\n    li.highlighted {\n      background-color: #fffde7;\n      font-weight: bold;\n    }\n    button {\n      background: #0066cc;\n      color: white;\n      border: none;\n      padding: 0.5rem 1rem;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n  `]\n})\nexport class LifecycleDemoComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n  @Input() name: string = 'Component';\n  status: string = 'Initializing';\n  lifecycleLog: string[] = [];\n  private intervalId: any;\n\n  constructor() {\n    this.logLifecycleEvent('constructor');\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.logLifecycleEvent(`ngOnChanges - name: ${changes['name']?.currentValue}`);\n  }\n\n  ngOnInit(): void {\n    this.logLifecycleEvent('ngOnInit');\n    this.status = 'Running';\n\n    // Set up an interval to demonstrate component activity\n    this.intervalId = setInterval(() => {\n      this.logLifecycleEvent('Interval tick');\n    }, 5000);\n  }\n\n  ngAfterViewInit(): void {\n    this.logLifecycleEvent('ngAfterViewInit');\n  }\n\n  ngOnDestroy(): void {\n    this.logLifecycleEvent('ngOnDestroy');\n    clearInterval(this.intervalId);\n    this.status = 'Destroyed';\n  }\n\n  triggerChange(): void {\n    this.name = `Updated ${new Date().toLocaleTimeString()}`;\n    this.logLifecycleEvent(`Manual update triggered`);\n  }\n\n  private logLifecycleEvent(event: string): void {\n    const timestamp = new Date().toLocaleTimeString();\n    this.lifecycleLog = [`${timestamp}: ${event}`, ...this.lifecycleLog.slice(0, 9)];\n  }\n}",this.deferredComponentsCode='import { Component } from \'@angular/core\';\nimport { CommonModule } from \'@angular/common\';\n\n@Component({\n  selector: \'app-deferred-demo\',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div class="deferred-container">\n      <h2>Deferred Loading Demo</h2>\n      <p>This component demonstrates Angular 19\'s deferrable views</p>\n\n      <div class="controls">\n        <button (click)="showCharts = !showCharts">\n          {{ showCharts ? \'Hide\' : \'Show\' }} Charts\n        </button>\n      </div>\n\n      @defer (when showCharts) {\n        <div class="chart-container">\n          <h3>Heavy Chart Component Loaded</h3>\n          <div class="chart-placeholder">\n            \x3c!-- Chart would render here --\x3e\n            <div class="chart"></div>\n            <p>Chart data loaded at: {{ currentTime }}</p>\n          </div>\n        </div>\n      } @loading {\n        <div class="loading-indicator">\n          <p>Loading charts...</p>\n          <div class="spinner"></div>\n        </div>\n      } @placeholder {\n        <div class="placeholder">\n          <p>Click the button to load charts</p>\n        </div>\n      } @error {\n        <div class="error">\n          <p>Error loading charts component!</p>\n        </div>\n      }\n    </div>\n  `,\n  styles: [`\n    .deferred-container {\n      padding: 1rem;\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      max-width: 600px;\n    }\n    .controls {\n      margin: 1rem 0;\n    }\n    button {\n      background: #0066cc;\n      color: white;\n      border: none;\n      padding: 0.5rem 1rem;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    .chart-container {\n      padding: 1rem;\n      border: 1px solid #eee;\n      border-radius: 4px;\n      margin-top: 1rem;\n    }\n    .chart-placeholder {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n    .chart {\n      width: 300px;\n      height: 200px;\n      background: linear-gradient(to right, #e66465, #9198e5);\n      border-radius: 4px;\n    }\n    .loading-indicator {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      padding: 2rem;\n    }\n    .spinner {\n      width: 40px;\n      height: 40px;\n      border: 4px solid #f3f3f3;\n      border-top: 4px solid #3498db;\n      border-radius: 50%;\n      animation: spin 1s linear infinite;\n    }\n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n    .placeholder, .error {\n      padding: 2rem;\n      text-align: center;\n      border: 1px dashed #ccc;\n      border-radius: 4px;\n    }\n    .error {\n      border-color: #e74c3c;\n      color: #e74c3c;\n    }\n  `]\n})\nexport class DeferredDemoComponent {\n  showCharts = false;\n\n  get currentTime(): string {\n    return new Date().toLocaleTimeString();\n  }\n}'}ngOnInit(){}}s.\u0275fac=function(){let o;return function(n){return(o||(o=e.n5z(s)))(n||s)}}(),s.\u0275cmp=e.Xpm({type:s,selectors:[["app-component"]],viewQuery:function(r,n){if(1&r&&(e.Gf(g,5),e.Gf(m,5),e.Gf(Z,5),e.Gf(h,5)),2&r){let t;e.iGM(t=e.CRH())&&(n.basicComponentCodeEl=t.first),e.iGM(t=e.CRH())&&(n.signalComponentCodeEl=t.first),e.iGM(t=e.CRH())&&(n.lifecycleHooksCodeEl=t.first),e.iGM(t=e.CRH())&&(n.deferredComponentsCodeEl=t.first)}},standalone:!0,features:[e.qOj,e.jDz],decls:24,vars:12,consts:[[1,"p-4","text-sm"],[1,"heading-1","mb-2"],[1,"text-content"],[1,"text-zinc-50","tw-font-medium"],[1,"flex","flex-col"],[1,"flex","border-b","border-gray-200"],[1,"text-sky-400","hover:text-rose-400","font-semibold","py-2","px-4","border-b-2","border-transparent","hover:border-gray-500","focus:outline-none",3,"click"],[1,"p-4"],[4,"ngIf"],[1,"list-disc","pl-4","text-sm"],[1,"list-disc","pl-4"],[1,"border","border-rose-400","rounded-md","px-1","text-sky-400",3,"click"],["hidden","","copyToClipboard",""],["basicComponentCodeEl",""],[1,"flex","flex-row","justify-between","items-center","bg-gray-900","px-4","py-2","relative","top-5"],[1,"copy-button-wrapper","bg-gray-700"],[3,"highlight","languages"],["lifecycleHooksCodeEl",""],["signalComponentCodeEl",""],["deferredComponentsCodeEl",""],[1,"w-full","border-collapse","rounded-lg","overflow-hidden","shadow-md"],[1,"bg-gray-800","text-gray-100"],[1,"py-3","px-4","text-left"],[1,"border-b","border-gray-700","bg-gray-900","hover:bg-gray-800","transition-colors"],[1,"py-3","px-4"],[1,"border-b","border-gray-700","bg-gray-950","hover:bg-gray-800","transition-colors"],[1,"list-decimal","pl-4","text-sm"],[1,"text-sky-400"],[1,"text-sm"],[1,"font-semibold","text-sky-400","mb-2"],[1,"list-disc","pl-4","mb-6"],[1,"w-full","border-collapse","rounded-lg","overflow-hidden","shadow-md","mb-4"],[1,"border-b","border-gray-700","bg-gray-900"],[1,"border-b","border-gray-700","bg-gray-950"],["href","https://angular.dev/guide/components",1,"text-sky-400","hover:underline"],["href","https://angular.dev/guide/signals",1,"text-sky-400","hover:underline"],["href","https://angular.dev/guide/defer",1,"text-sky-400","hover:underline"],["href","https://angular.dev/guide/standalone-components",1,"text-sky-400","hover:underline"],["href","https://angular.dev/guide/change-detection",1,"text-sky-400","hover:underline"]],template:function(r,n){1&r&&(e.TgZ(0,"section",0)(1,"p",1),e._uU(2," Components in Angular "),e.qZA(),e.TgZ(3,"div",2)(4,"p")(5,"span",3),e._uU(6,"Components"),e.qZA(),e._uU(7," are the fundamental building blocks of Angular applications. They encapsulate the template, styles, and behavior for a specific part of the UI. Each component defines a TypeScript class with application logic and is associated with an HTML template that defines the view. In Angular 19, components have been enhanced with improved performance, streamlined APIs, and tighter integration with signals and other modern Angular features. "),e.qZA(),e._UZ(8,"br"),e.TgZ(9,"div",4)(10,"div",5)(11,"button",6),e.NdJ("click",function(){return n.selectedTab=1}),e._uU(12," Notes "),e.qZA(),e.TgZ(13,"button",6),e.NdJ("click",function(){return n.selectedTab=2}),e._uU(14," Best Practices "),e.qZA(),e.TgZ(15,"button",6),e.NdJ("click",function(){return n.selectedTab=3}),e._uU(16," Pros and Cons "),e.qZA(),e.TgZ(17,"button",6),e.NdJ("click",function(){return n.selectedTab=4}),e._uU(18," Related Topics "),e.qZA()(),e.TgZ(19,"div",7),e.YNc(20,_,223,12,"div",8),e.YNc(21,f,84,0,"div",8),e.YNc(22,A,111,0,"div",8),e.YNc(23,U,79,0,"div",8),e.qZA()()()()),2&r&&(e.xp6(11),e.ekj("text-rose-300",1===n.selectedTab),e.xp6(2),e.ekj("text-rose-300",2===n.selectedTab),e.xp6(2),e.ekj("text-rose-300",3===n.selectedTab),e.xp6(2),e.ekj("text-rose-300",4===n.selectedTab),e.xp6(3),e.Q6J("ngIf",1===n.selectedTab),e.xp6(1),e.Q6J("ngIf",2===n.selectedTab),e.xp6(1),e.Q6J("ngIf",3===n.selectedTab),e.xp6(1),e.Q6J("ngIf",4===n.selectedTab))},dependencies:[c.ez,c.O5,u._l,u.y$],changeDetection:0})}}]);